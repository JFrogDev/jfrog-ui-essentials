{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/normalize-fields.js"],"names":[],"mappings":";;;;;;AAAa;;AAEb;AACA;;AAEA,wCAAwC,mBAAO,CAAC,MAA0B;;AAE1E,eAAe,mBAAO,CAAC,MAAwB;;AAE/C,cAAc,mBAAO,CAAC,MAAuB;;AAE7C,iBAAiB,mBAAO,CAAC,MAAa;;AAEtC,sCAAsC,uCAAuC,gBAAgB;;AAE7F,gCAAgC,gBAAgB,sBAAsB,OAAO,uDAAuD,mCAAmC,0DAA0D,sFAAsF,gEAAgE,EAAE,GAAG,EAAE,iCAAiC,2CAA2C,EAAE,EAAE,EAAE,eAAe;;AAE/d,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE/M;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,4BAA4B;AAC5B;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF,MAAM,yBAAyB,GAAG,IAAI,QAAQ,GAAG;;;AAGjD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,oCAAoC;AACpC,OAAO;AACP,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA,2B","file":"jfrog-ui-essentials.umd.vendors-chunks~641b105c.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _startcase = _interopRequireDefault(require(\"../../../utils/startcase\"));\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Private function to massage field entry into common object format\nvar processField = function processField(key, value) {\n  var field = null;\n\n  if ((0, _inspect.isString)(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if ((0, _inspect.isFunction)(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if ((0, _inspect.isObject)(value)) {\n    field = _objectSpread({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if ((0, _inspect.isArray)(origFields)) {\n    // Normalize array Form\n    origFields.filter(function (f) {\n      return f;\n    }).forEach(function (f) {\n      if ((0, _inspect.isString)(f)) {\n        fields.push({\n          key: f,\n          label: (0, _startcase.default)(f)\n        });\n      } else if ((0, _inspect.isObject)(f) && f.key && (0, _inspect.isString)(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(_objectSpread({}, f));\n      } else if ((0, _inspect.isObject)(f) && (0, _object.keys)(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = (0, _object.keys)(f)[0];\n        var field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && (0, _inspect.isObject)(origFields) && (0, _object.keys)(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    (0, _object.keys)(origFields).forEach(function (key) {\n      var field = processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && (0, _inspect.isArray)(items) && items.length > 0) {\n    var sample = items[0];\n    (0, _object.keys)(sample).forEach(function (k) {\n      if (!_constants.IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: (0, _startcase.default)(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = (0, _inspect.isString)(f.label) ? f.label : (0, _startcase.default)(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar _default = normalizeFields;\nexports.default = _default;"],"sourceRoot":""}