{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatNumerals.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatSpecifier.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/defaultLocale.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatTrim.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatGroup.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/exponent.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatDecimal.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatRounded.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatTypes.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/formatPrefixAuto.js"],"names":["__webpack_exports__","numerals","value","replace","i","__webpack_require__","d","formatSpecifier","re","specifier","FormatSpecifier","match","exec","Error","this","fill","align","sign","symbol","zero","width","comma","precision","slice","trim","type","prototype","toString","Math","max","format","formatPrefix","locale","_locale__WEBPACK_IMPORTED_MODULE_0__","defaultLocale","definition","Object","decimal","thousands","grouping","currency","s","out","i1","n","length","i0","t","j","g","push","substring","reverse","join","_formatDecimal__WEBPACK_IMPORTED_MODULE_0__","x","abs","NaN","p","toExponential","indexOf","coefficient","formatRounded","formatDecimal","exponent","Array","%","toFixed","b","round","c","e","f","toPrecision","o","r","formatPrefixAuto","X","toUpperCase","prefixExponent","min","floor"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~3001dd99.js","sourcesContent":["export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, Â±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatPrefixAuto from \"./formatPrefixAuto\";\nimport formatRounded from \"./formatRounded\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","import formatDecimal from \"./formatDecimal\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n"],"sourceRoot":""}