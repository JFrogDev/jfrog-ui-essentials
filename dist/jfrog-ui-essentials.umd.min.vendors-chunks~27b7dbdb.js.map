{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/linear.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/nice.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/log.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/init.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/number.js"],"names":["__webpack_require__","d","__webpack_exports__","linearish","linear","d3_array__WEBPACK_IMPORTED_MODULE_0__","_continuous__WEBPACK_IMPORTED_MODULE_1__","_init__WEBPACK_IMPORTED_MODULE_2__","_tickFormat__WEBPACK_IMPORTED_MODULE_3__","scale","domain","ticks","count","Object","length","tickFormat","specifier","nice","step","i0","i1","start","stop","Math","floor","ceil","copy","apply","arguments","interval","slice","t","x0","x1","loggish","log","d3_format__WEBPACK_IMPORTED_MODULE_1__","_nice__WEBPACK_IMPORTED_MODULE_2__","_continuous__WEBPACK_IMPORTED_MODULE_3__","_init__WEBPACK_IMPORTED_MODULE_4__","transformLog","x","transformExp","exp","transformLogn","transformExpn","pow10","isFinite","powp","base","E","pow","logp","log10","log2","reflect","f","transform","logs","pows","rescale","_","r","u","v","i","p","k","j","n","z","round","push","min","map","reverse","Infinity","max","initRange","range","this","initInterpolator","interpolator"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~27b7dbdb.js","sourcesContent":["import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","export default function(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {ticks} from \"d3-array\";\nimport {format} from \"d3-format\";\nimport nice from \"./nice\";\nimport {copy, transformer} from \"./continuous\";\nimport {initRange} from \"./init\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nexport function loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.interpolator(domain); break;\n    default: this.interpolator(interpolator).domain(domain); break;\n  }\n  return this;\n}\n","export default function(x) {\n  return +x;\n}\n"],"sourceRoot":""}