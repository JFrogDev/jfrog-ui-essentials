{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/mixins/form-radio-check-group.js"],"names":["exports","__esModule","default","_html","__webpack_require__","_formCheckbox","_interopRequireDefault","_formRadio","obj","_default","model","prop","event","props","validated","type","Boolean","ariaInvalid","String","stacked","plain","buttons","buttonVariant","computed","inline","this","groupName","name","safeId","groupClasses","size","concat","computedAriaInvalid","computedState","watch","checked","newVal","oldVal","localChecked","$emit","render","h","_this","$slots","inputs","formOptions","map","option","idx","uid","is_RadioGroup","key","id","value","disabled","domProps","htmlOrText","html","text","class","attrs","role","tabindex","aria-required","required","aria-invalid","first"],"mappings":"yMAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAYC,EAAQ,QAEpBC,EAAAC,EAA2CF,EAAQ,SAEnDG,EAAAD,EAAwCF,EAAQ,SAEhD,SAAAE,EAAAE,GAAsC,OAAAA,KAAAP,WAAAO,EAAA,CAAuCN,QAAAM,GAG7E,IAAAC,EAAA,CACAC,MAAA,CACAC,KAAA,UACAC,MAAA,SAEAC,MAAA,CACAC,UAAA,CACAC,KAAAC,QACAd,SAAA,GAEAe,YAAA,CACAF,KAAA,CAAAC,QAAAE,QACAhB,SAAA,GAEAiB,QAAA,CACAJ,KAAAC,QACAd,SAAA,GAEAkB,MAAA,CACAL,KAAAC,QACAd,SAAA,GAEAmB,QAAA,CAEAN,KAAAC,QACAd,SAAA,GAEAoB,cAAA,CAEAP,KAAAG,OACAhB,QAAA,cAGAqB,SAAA,CACAC,OAAA,WACA,OAAAC,KAAAN,SAEAO,UAAA,WAGA,OAAAD,KAAAE,MAAAF,KAAAG,UAEAC,aAAA,WACA,OAAAJ,KAAAJ,QACA,oBAAAI,KAAAD,OAAA,iCAAAC,KAAAK,KAAA,aAAAC,OAAAN,KAAAK,MAAA,GAAAL,KAAAX,UAAA,oBAGA,CAAAW,KAAAX,UAAA,qBAEAkB,oBAAA,WACA,IAAAf,EAAAQ,KAAAR,YAEA,WAAAA,GAAA,SAAAA,GAAA,KAAAA,EACA,QAGA,IAAAQ,KAAAQ,cAAA,cAGAC,MAAA,CACAC,QAAA,SAAAC,EAAAC,GACAZ,KAAAa,aAAAF,GAEAE,aAAA,SAAAF,EAAAC,GACAZ,KAAAc,MAAA,QAAAH,KAGAI,OAAA,SAAAC,GACA,IAAAC,EAAAjB,KAEAkB,EAAAlB,KAAAkB,OACAC,EAAAnB,KAAAoB,YAAAC,IAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,cAAAlB,OAAAiB,EAAA,KACA,OAAAP,EAAAC,EAAAQ,cAAA3C,EAAAL,QAAAG,EAAAH,QAAA,CACAiD,IAAAF,EACApC,MAAA,CACAuC,GAAAV,EAAAd,OAAAqB,GACAI,MAAAN,EAAAM,MAEAC,SAAAP,EAAAO,WAAA,IAMO,CAAAb,EAAA,QACPc,UAAA,EAAApD,EAAAqD,YAAAT,EAAAU,KAAAV,EAAAW,YAGA,OAAAjB,EAAA,OACAkB,MAAAlC,KAAAI,aACA+B,MAAA,CACAR,GAAA3B,KAAAG,SACAiC,KAAApC,KAAAyB,cAAA,qBAEAY,SAAA,KACAC,gBAAAtC,KAAAuC,SAAA,YACAC,eAAAxC,KAAAO,sBAEK,CAAAW,EAAAuB,MAAAtB,EAAAD,EAAAzC,YAGLF,EAAAE,QAAAO","file":"jfrog-ui-essentials.umd.min.vendors-chunks~425b561a.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _html = require(\"../utils/html\");\n\nvar _formCheckbox = _interopRequireDefault(require(\"../components/form-checkbox/form-checkbox\"));\n\nvar _formRadio = _interopRequireDefault(require(\"../components/form-radio/form-radio\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// @vue/component\nvar _default = {\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    buttons: {\n      // Render as button style\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: 'secondary'\n    }\n  },\n  computed: {\n    inline: function inline() {\n      return !this.stacked;\n    },\n    groupName: function groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility.\n      return this.name || this.safeId();\n    },\n    groupClasses: function groupClasses() {\n      if (this.buttons) {\n        return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n      }\n\n      return [this.validated ? \"was-validated\" : ''];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      var ariaInvalid = this.ariaInvalid;\n\n      if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n        return 'true';\n      }\n\n      return this.computedState === false ? 'true' : null;\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.localChecked = newVal;\n    },\n    localChecked: function localChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var $slots = this.$slots;\n    var inputs = this.formOptions.map(function (option, idx) {\n      var uid = \"_BV_option_\".concat(idx, \"_\");\n      return h(_this.is_RadioGroup ? _formRadio.default : _formCheckbox.default, {\n        key: uid,\n        props: {\n          id: _this.safeId(uid),\n          value: option.value,\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n          // name: this.groupName,\n          // form: this.form || null,\n          // required: Boolean(this.name && this.required)\n\n        }\n      }, [h('span', {\n        domProps: (0, _html.htmlOrText)(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: this.groupClasses,\n      attrs: {\n        id: this.safeId(),\n        role: this.is_RadioGroup ? 'radiogroup' : 'group',\n        // Tabindex to allow group to be focused if needed\n        tabindex: '-1',\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      }\n    }, [$slots.first, inputs, $slots.default]);\n  }\n};\nexports.default = _default;"],"sourceRoot":""}