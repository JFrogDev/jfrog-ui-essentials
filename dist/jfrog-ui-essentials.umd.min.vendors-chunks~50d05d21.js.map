{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/source-map/lib/source-node.js"],"names":["SourceMapGenerator","__webpack_require__","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","aLine","aColumn","aSource","aChunks","aName","this","children","sourceContents","line","column","source","name","add","fromStringWithSourceMap","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","remainingLinesIndex","shiftNextLine","lineContents","getNextLine","newLine","length","undefined","lastGeneratedLine","lastGeneratedColumn","lastMapping","eachMapping","mapping","generatedLine","nextLine","code","substr","generatedColumn","addMappingWithCode","splice","join","sources","forEach","sourceFile","content","sourceContentFor","setSourceContent","originalLine","originalColumn","prototype","aChunk","Array","isArray","chunk","TypeError","push","prepend","i","unshift","walk","aFn","len","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","replace","aSourceFile","aSourceContent","toSetString","walkSourceContents","Object","keys","fromSetString","toString","str","toStringWithSourceMap","aArgs","generated","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceContent","exports"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~50d05d21.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n"],"sourceRoot":""}