{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/addon/edit/matchbrackets.js"],"names":["mod","__webpack_require__","CodeMirror","ie_lt8","test","navigator","userAgent","document","documentMode","Pos","matching","(",")","[","]","{","}","<",">","bracketRegex","config","findMatchingBracket","cm","where","line","getLineHandle","pos","ch","afterCursor","getWrapperElement","className","re","match","text","charAt","dir","strict","style","getTokenTypeAt","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","stack","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","length","end","undefined","push","pop","matchBrackets","autoclear","maxHighlightLen","state","maxHighlightLineLength","marks","ranges","listSelections","i","empty","head","markText","focused","focus","clear","operation","setTimeout","doMatchBrackets","currentlyHighlighted","defineOption","val","old","Init","off","on","defineExtension","this","oldConfig"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~8e7fa3c6.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\", \"<\": \">>\", \">\": \"<<\"};\n\n  function bracketRegex(config) {\n    return config && config.bracketRegex || /[(){}[\\]]/\n  }\n\n  function findMatchingBracket(cm, where, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var afterCursor = config && config.afterCursor\n    if (afterCursor == null)\n      afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className)\n    var re = bracketRegex(config)\n\n    // A cursor is defined as between two characters, but in in vim command mode\n    // (i.e. not insert mode), the cursor is visually represented as a\n    // highlighted box on top of the 2nd character. Otherwise, we allow matches\n    // from before or after the cursor.\n    var match = (!afterCursor && pos >= 0 && re.test(line.text.charAt(pos)) && matching[line.text.charAt(pos)]) ||\n        re.test(line.text.charAt(pos + 1)) && matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (config && config.strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = bracketRegex(config)\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (cm.state.matchBrackets.currentlyHighlighted) {\n        cm.state.matchBrackets.currentlyHighlighted();\n        cm.state.matchBrackets.currentlyHighlighted = null;\n      }\n      cm.state.matchBrackets.currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchBrackets);\n      if (cm.state.matchBrackets && cm.state.matchBrackets.currentlyHighlighted) {\n        cm.state.matchBrackets.currentlyHighlighted();\n        cm.state.matchBrackets.currentlyHighlighted = null;\n      }\n    }\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, config, oldConfig){\n    // Backwards-compatibility kludge\n    if (oldConfig || typeof config == \"boolean\") {\n      if (!oldConfig) {\n        config = config ? {strict: true} : null\n      } else {\n        oldConfig.strict = config\n        config = oldConfig\n      }\n    }\n    return findMatchingBracket(this, pos, config)\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n"],"sourceRoot":""}