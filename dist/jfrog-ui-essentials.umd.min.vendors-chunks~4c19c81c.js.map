{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/modal/helpers/modal-manager.js"],"names":["exports","__esModule","default","_vue","_interopRequireDefault","__webpack_require__","_dom","_env","_inspect","obj","DEFAULT_ZINDEX","Selector","FIXED_CONTENT","STICKY_CONTENT","NAVBAR_TOGGLER","ModalManager","extend","data","modals","baseZIndex","scrollbarWidth","isBodyOverflowing","computed","modalCount","this","length","modalsAreOpen","watch","newCount","oldCount","isBrowser","getScrollbarWidth","checkScrollbar","setScrollbar","addClass","document","body","resetScrollbar","removeClass","setAttr","String","newVal","oldVal","_this","requestAF","updateModals","methods","registerModal","modal","_this2","indexOf","push","$once","unregisterModal","index","splice","_isBeingDestroyed","_isDestroyed","resetModal","getBaseZIndex","isNull","div","createElement","className","style","display","appendChild","parseInt","getCS","zIndex","removeChild","getBCR","width","clientWidth","_this3","forEach","isTop","_getBCR","left","right","window","innerWidth","_paddingChangedForModal","_marginChangedForModal","selectAll","el","actualPadding","paddingRight","calculatedPadding","concat","parseFloat","actualMargin","marginRight","calculatedMargin","hasAttr","getAttr","removeAttr","_default"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~4c19c81c.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"../../../utils/vue\"));\n\nvar _dom = require(\"../../../utils/dom\");\n\nvar _env = require(\"../../../utils/env\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Private ModalManager helper\n * Handles controlling modal stacking zIndexes and body adjustments/classes\n */\n// --- Constants ---\n// Default modal backdrop z-index\nvar DEFAULT_ZINDEX = 1040; // Selectors for padding/margin adjustments\n\nvar Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler' // @vue/component\n\n};\n\nvar ModalManager = _vue.default.extend({\n  data: function data() {\n    return {\n      modals: [],\n      baseZIndex: null,\n      scrollbarWidth: null,\n      isBodyOverflowing: false\n    };\n  },\n  computed: {\n    modalCount: function modalCount() {\n      return this.modals.length;\n    },\n    modalsAreOpen: function modalsAreOpen() {\n      return this.modalCount > 0;\n    }\n  },\n  watch: {\n    modalCount: function modalCount(newCount, oldCount) {\n      if (_env.isBrowser) {\n        this.getScrollbarWidth();\n\n        if (newCount > 0 && oldCount === 0) {\n          // Transitioning to modal(s) open\n          this.checkScrollbar();\n          this.setScrollbar();\n          (0, _dom.addClass)(document.body, 'modal-open');\n        } else if (newCount === 0 && oldCount > 0) {\n          // Transitioning to modal(s) closed\n          this.resetScrollbar();\n          (0, _dom.removeClass)(document.body, 'modal-open');\n        }\n\n        (0, _dom.setAttr)(document.body, 'data-modal-open-count', String(newCount));\n      }\n    },\n    modals: function modals(newVal, oldVal) {\n      var _this = this;\n\n      this.checkScrollbar();\n      (0, _dom.requestAF)(function () {\n        _this.updateModals(newVal || []);\n      });\n    }\n  },\n  methods: {\n    // Public methods\n    registerModal: function registerModal(modal) {\n      var _this2 = this;\n\n      if (modal && this.modals.indexOf(modal) === -1) {\n        // Add modal to modals array\n        this.modals.push(modal);\n        modal.$once('hook:beforeDestroy', function () {\n          _this2.unregisterModal(modal);\n        });\n      }\n    },\n    unregisterModal: function unregisterModal(modal) {\n      var index = this.modals.indexOf(modal);\n\n      if (index > -1) {\n        // Remove modal from modals array\n        this.modals.splice(index, 1); // Reset the modal's data\n\n        if (!(modal._isBeingDestroyed || modal._isDestroyed)) {\n          this.resetModal(modal);\n        }\n      }\n    },\n    getBaseZIndex: function getBaseZIndex() {\n      if ((0, _inspect.isNull)(this.baseZIndex) && _env.isBrowser) {\n        // Create a temporary `div.modal-backdrop` to get computed z-index\n        var div = document.createElement('div');\n        div.className = 'modal-backdrop d-none';\n        div.style.display = 'none';\n        document.body.appendChild(div);\n        this.baseZIndex = parseInt((0, _dom.getCS)(div).zIndex || DEFAULT_ZINDEX, 10);\n        document.body.removeChild(div);\n      }\n\n      return this.baseZIndex || DEFAULT_ZINDEX;\n    },\n    getScrollbarWidth: function getScrollbarWidth() {\n      if ((0, _inspect.isNull)(this.scrollbarWidth) && _env.isBrowser) {\n        // Create a temporary `div.measure-scrollbar` to get computed z-index\n        var div = document.createElement('div');\n        div.className = 'modal-scrollbar-measure';\n        document.body.appendChild(div);\n        this.scrollbarWidth = (0, _dom.getBCR)(div).width - div.clientWidth;\n        document.body.removeChild(div);\n      }\n\n      return this.scrollbarWidth || 0;\n    },\n    // Private methods\n    updateModals: function updateModals(modals) {\n      var _this3 = this;\n\n      var baseZIndex = this.getBaseZIndex();\n      var scrollbarWidth = this.getScrollbarWidth();\n      modals.forEach(function (modal, index) {\n        // We update data values on each modal\n        modal.zIndex = baseZIndex + index;\n        modal.scrollbarWidth = scrollbarWidth;\n        modal.isTop = index === _this3.modals.length - 1;\n        modal.isBodyOverflowing = _this3.isBodyOverflowing;\n      });\n    },\n    resetModal: function resetModal(modal) {\n      if (modal) {\n        modal.zIndex = this.getBaseZIndex();\n        modal.isTop = true;\n        modal.isBodyOverflowing = false;\n      }\n    },\n    checkScrollbar: function checkScrollbar() {\n      // Determine if the body element is overflowing\n      // const { left, right, height } = getBCR(document.body)\n      // Extra check for body.height needed for stacked modals\n      // this.isBodyOverflowing = left + right < window.innerWidth || height > window.innerHeight\n      var _getBCR = (0, _dom.getBCR)(document.body),\n          left = _getBCR.left,\n          right = _getBCR.right;\n\n      this.isBodyOverflowing = left + right < window.innerWidth;\n    },\n    setScrollbar: function setScrollbar() {\n      var body = document.body; // Storage place to cache changes to margins and padding\n      // Note: This assumes the following element types are not added to the\n      // document after the modal has opened.\n\n      body._paddingChangedForModal = body._paddingChangedForModal || [];\n      body._marginChangedForModal = body._marginChangedForModal || [];\n\n      if (this.isBodyOverflowing) {\n        var scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(Selector.FIXED_CONTENT).forEach(function (el) {\n          var actualPadding = el.style.paddingRight;\n          var calculatedPadding = (0, _dom.getCS)(el).paddingRight || 0;\n          (0, _dom.setAttr)(el, 'data-padding-right', actualPadding);\n          el.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n\n          body._paddingChangedForModal.push(el);\n        }); // Adjust sticky content margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(Selector.STICKY_CONTENT).forEach(function (el) {\n          var actualMargin = el.style.marginRight;\n          var calculatedMargin = (0, _dom.getCS)(el).marginRight || 0;\n          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) - scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust <b-navbar-toggler> margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(Selector.NAVBAR_TOGGLER).forEach(function (el) {\n          var actualMargin = el.style.marginRight;\n          var calculatedMargin = (0, _dom.getCS)(el).marginRight || 0;\n          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) + scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust body padding\n\n        var actualPadding = body.style.paddingRight;\n        var calculatedPadding = (0, _dom.getCS)(body).paddingRight;\n        (0, _dom.setAttr)(body, 'data-padding-right', actualPadding);\n        body.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n      }\n    },\n    resetScrollbar: function resetScrollbar() {\n      var body = document.body;\n\n      if (body._paddingChangedForModal) {\n        // Restore fixed content padding\n        body._paddingChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if ((0, _dom.hasAttr)(el, 'data-padding-right')) {\n            el.style.paddingRight = (0, _dom.getAttr)(el, 'data-padding-right') || '';\n            (0, _dom.removeAttr)(el, 'data-padding-right');\n          }\n        });\n      }\n\n      if (body._marginChangedForModal) {\n        // Restore sticky content and navbar-toggler margin\n        body._marginChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if ((0, _dom.hasAttr)(el, 'data-margin-right')) {\n            el.style.marginRight = (0, _dom.getAttr)(el, 'data-margin-right') || '';\n            (0, _dom.removeAttr)(el, 'data-margin-right');\n          }\n        });\n      }\n\n      body._paddingChangedForModal = null;\n      body._marginChangedForModal = null; // Restore body padding\n\n      if ((0, _dom.hasAttr)(body, 'data-padding-right')) {\n        body.style.paddingRight = (0, _dom.getAttr)(body, 'data-padding-right') || '';\n        (0, _dom.removeAttr)(body, 'data-padding-right');\n      }\n    }\n  }\n}); // Export our ModalManager\n\n\nvar _default = new ModalManager();\n\nexports.default = _default;"],"sourceRoot":""}