{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/vue-multiselect/src/index.js","webpack://jfrog-ui-essentials/./node_modules/vue-multiselect/src/pointerMixin.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAuC;AACU;AACR;;AAE1B,qHAAW;;AAE4B;;;;;;;;;ACNvC;AACf;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA,SAAS,+EAA+E;AACxF,SAAS;AACT;AACA,KAAK;AACL,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC","file":"jfrog-ui-essentials.common.vendors-chunks~0d7a3b93.js","sourcesContent":["import Multiselect from './Multiselect'\nimport multiselectMixin from './multiselectMixin'\nimport pointerMixin from './pointerMixin'\n\nexport default Multiselect\n\nexport { Multiselect, multiselectMixin, pointerMixin }\n","export default {\n  data () {\n    return {\n      pointer: 0,\n      pointerDirty: false\n    }\n  },\n  props: {\n    /**\n     * Enable/disable highlighting of the pointed value.\n     * @type {Boolean}\n     * @default true\n     */\n    showPointer: {\n      type: Boolean,\n      default: true\n    },\n    optionHeight: {\n      type: Number,\n      default: 40\n    }\n  },\n  computed: {\n    pointerPosition () {\n      return this.pointer * this.optionHeight\n    },\n    visibleElements () {\n      return this.optimizedHeight / this.optionHeight\n    }\n  },\n  watch: {\n    filteredOptions () {\n      this.pointerAdjust()\n    },\n    isOpen () {\n      this.pointerDirty = false\n    }\n  },\n  methods: {\n    optionHighlight (index, option) {\n      return {\n        'multiselect__option--highlight': index === this.pointer && this.showPointer,\n        'multiselect__option--selected': this.isSelected(option)\n      }\n    },\n    groupHighlight (index, selectedGroup) {\n      if (!this.groupSelect) {\n        return ['multiselect__option--group', 'multiselect__option--disabled']\n      }\n\n      const group = this.options.find(option => {\n        return option[this.groupLabel] === selectedGroup.$groupLabel\n      })\n\n      return group && !this.wholeGroupDisabled(group) ? [\n        'multiselect__option--group',\n        { 'multiselect__option--highlight': index === this.pointer && this.showPointer },\n        { 'multiselect__option--group-selected': this.wholeGroupSelected(group) }\n      ] : 'multiselect__option--disabled'\n    },\n    addPointerElement ({ key } = 'Enter') {\n      /* istanbul ignore else */\n      if (this.filteredOptions.length > 0) {\n        this.select(this.filteredOptions[this.pointer], key)\n      }\n      this.pointerReset()\n    },\n    pointerForward () {\n      /* istanbul ignore else */\n      if (this.pointer < this.filteredOptions.length - 1) {\n        this.pointer++\n        /* istanbul ignore next */\n        if (this.$refs.list.scrollTop <= this.pointerPosition - (this.visibleElements - 1) * this.optionHeight) {\n          this.$refs.list.scrollTop = this.pointerPosition - (this.visibleElements - 1) * this.optionHeight\n        }\n        /* istanbul ignore else */\n        if (\n          this.filteredOptions[this.pointer] &&\n          this.filteredOptions[this.pointer].$isLabel &&\n          !this.groupSelect\n        ) this.pointerForward()\n      }\n      this.pointerDirty = true\n    },\n    pointerBackward () {\n      if (this.pointer > 0) {\n        this.pointer--\n        /* istanbul ignore else */\n        if (this.$refs.list.scrollTop >= this.pointerPosition) {\n          this.$refs.list.scrollTop = this.pointerPosition\n        }\n        /* istanbul ignore else */\n        if (\n          this.filteredOptions[this.pointer] &&\n          this.filteredOptions[this.pointer].$isLabel &&\n          !this.groupSelect\n        ) this.pointerBackward()\n      } else {\n        /* istanbul ignore else */\n        if (\n          this.filteredOptions[this.pointer] &&\n          this.filteredOptions[0].$isLabel &&\n          !this.groupSelect\n        ) this.pointerForward()\n      }\n      this.pointerDirty = true\n    },\n    pointerReset () {\n      /* istanbul ignore else */\n      if (!this.closeOnSelect) return\n      this.pointer = 0\n      /* istanbul ignore else */\n      if (this.$refs.list) {\n        this.$refs.list.scrollTop = 0\n      }\n    },\n    pointerAdjust () {\n      /* istanbul ignore else */\n      if (this.pointer >= this.filteredOptions.length - 1) {\n        this.pointer = this.filteredOptions.length\n          ? this.filteredOptions.length - 1\n          : 0\n      }\n\n      if (this.filteredOptions.length > 0 &&\n        this.filteredOptions[this.pointer].$isLabel &&\n        !this.groupSelect\n      ) {\n        this.pointerForward()\n      }\n    },\n    pointerSet (index) {\n      this.pointer = index\n      this.pointerDirty = true\n    }\n  }\n}\n"],"sourceRoot":""}