{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/radial.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/linear.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/step.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/descending.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/monotone.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/natural.js","webpack://jfrog-ui-essentials/./node_modules/d3-shape/src/curve/linearClosed.js"],"names":["__webpack_require__","d","__webpack_exports__","curveRadialLinear","curveRadial","_linear__WEBPACK_IMPORTED_MODULE_0__","Radial","curve","this","_curve","radial","context","prototype","areaStart","areaEnd","lineStart","lineEnd","point","a","r","Math","sin","cos","Linear","_context","_line","NaN","_point","closePath","x","y","lineTo","moveTo","Step","t","_t","stepBefore","stepAfter","_x","_y","x1","b","sign","slope3","that","x2","y2","h0","_x1","_x0","h1","s0","_y1","_y0","s1","p","min","abs","slope2","h","t0","t1","x0","y0","y1","dx","bezierCurveTo","MonotoneX","MonotoneY","ReflectContext","monotoneX","monotoneY","_t0","Object","create","call","Natural","controlPoints","i","m","n","length","Array","px","py","i0","i1","push","_noop__WEBPACK_IMPORTED_MODULE_0__","LinearClosed"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~3d3deb07.js","sourcesContent":["import curveLinear from \"./linear\";\n\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\n\nexport default function curveRadial(curve) {\n\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n\n  return radial;\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","import noop from \"../noop\";\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._point) this._context.closePath();\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);\n    else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nexport default function(context) {\n  return new LinearClosed(context);\n}\n"],"sourceRoot":""}