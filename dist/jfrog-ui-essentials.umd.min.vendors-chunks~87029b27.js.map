{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/utils/config.js"],"names":["exports","__esModule","getBreakpointsDownCached","getBreakpointsUpCached","getBreakpointsCached","getBreakpointsDown","getBreakpointsUp","getBreakpoints","getComponentConfig","getConfigValue","getDefaults","getConfig","resetConfig","setConfig","_cloneDeep","_interopRequireDefault","__webpack_require__","_get","_memoize","_warn","_inspect","_object","obj","default","DEFAULTS","breakpoints","BAlert","dismissLabel","variant","BBadge","BButton","BButtonClose","textVariant","ariaLabel","BCardSubTitle","subTitleTextVariant","BCarousel","labelPrev","labelNext","labelGotoSlide","labelIndicators","BDropdown","toggleText","BFormFile","browseText","placeholder","dropPlaceholder","BFormText","BImg","blankColor","BImgLazy","BModal","cancelTitle","cancelVariant","okTitle","okVariant","headerCloseLabel","BNavbarToggle","label","BToast","toaster","CONFIG","config","arguments","length","undefined","isObject","keys","filter","cmpName","hasOwnProperty","forEach","cmpConfig","isArray","some","b","isString","key","isUndefined","concat","slice"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~87029b27.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.getBreakpointsDownCached = exports.getBreakpointsUpCached = exports.getBreakpointsCached = exports.getBreakpointsDown = exports.getBreakpointsUp = exports.getBreakpoints = exports.getComponentConfig = exports.getConfigValue = exports.getDefaults = exports.getConfig = exports.resetConfig = exports.setConfig = void 0;\n\nvar _cloneDeep = _interopRequireDefault(require(\"./clone-deep\"));\n\nvar _get = _interopRequireDefault(require(\"./get\"));\n\nvar _memoize = _interopRequireDefault(require(\"./memoize\"));\n\nvar _warn = _interopRequireDefault(require(\"./warn\"));\n\nvar _inspect = require(\"./inspect\");\n\nvar _object = require(\"./object\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// General BootstrapVue configuration\n//\n// BREAKPOINT DEFINITIONS\n//\n// Some components (BCol and BFormGroup) generate props based on breakpoints, and this\n// occurs when the component is first loaded (evaluated), which may happen before the\n// config is created/modified\n//\n// To get around this we make these components async (lazy evaluation)\n// The component definition is only called/executed when the first access to the\n// component is used (and cached on subsequent uses)\n//\n// See: https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\n//\n// PROP DEFAULTS\n//\n// For default values on props, we use the default value factory function approach so\n// so that the default values are pulled in at each component instantiation\n//\n//  props: {\n//    variant: {\n//      type: String,\n//      default: () => getConfigComponent('BAlert', 'variant')\n//    }\n//  }\n// prettier-ignore\nvar DEFAULTS = {\n  // Breakpoints\n  breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n  // Component Specific defaults are keyed by the component\n  // name (PascalCase) and prop name (camelCase)\n  BAlert: {\n    dismissLabel: 'Close',\n    variant: 'info'\n  },\n  BBadge: {\n    variant: 'secondary'\n  },\n  BButton: {\n    variant: 'secondary'\n  },\n  BButtonClose: {\n    // `textVariant` is `null` to inherit the current text color\n    textVariant: null,\n    ariaLabel: 'Close'\n  },\n  BCardSubTitle: {\n    // BCard and BCardBody also inherit this prop\n    subTitleTextVariant: 'muted'\n  },\n  BCarousel: {\n    labelPrev: 'Previous Slide',\n    labelNext: 'Next Slide',\n    labelGotoSlide: 'Goto Slide',\n    labelIndicators: 'Select a slide to display'\n  },\n  BDropdown: {\n    toggleText: 'Toggle Dropdown',\n    variant: 'secondary'\n  },\n  BFormFile: {\n    browseText: 'Browse',\n    // Chrome default file prompt\n    placeholder: 'No file chosen',\n    dropPlaceholder: 'Drop files here'\n  },\n  BFormText: {\n    textVariant: 'muted'\n  },\n  BImg: {\n    blankColor: 'transparent'\n  },\n  BImgLazy: {\n    blankColor: 'transparent'\n  },\n  BModal: {\n    cancelTitle: 'Cancel',\n    cancelVariant: 'secondary',\n    okTitle: 'OK',\n    okVariant: 'primary',\n    headerCloseLabel: 'Close'\n  },\n  BNavbarToggle: {\n    label: 'Toggle navigation'\n  },\n  BToast: {\n    toaster: 'b-toaster-top-right'\n  } // This contains user defined configuration\n\n};\nvar CONFIG = {}; // Method to get a deep clone (immutable) copy of the defaults\n\nvar getDefaults = function getDefaults() {\n  return (0, _cloneDeep.default)(DEFAULTS);\n}; // Method to set the config\n// Merges in only known top-level and sub-level keys\n//   Vue.use(BootstrapVue, config)\n// or\n//   BootstrapVue.setConfig(config)\n//   Vue.use(BootstrapVue)\n\n\nexports.getDefaults = getDefaults;\n\nvar setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _inspect.isObject)(config)) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  (0, _object.keys)(config).filter(function (cmpName) {\n    return config.hasOwnProperty(cmpName);\n  }).forEach(function (cmpName) {\n    if (!DEFAULTS.hasOwnProperty(cmpName)) {\n      /* istanbul ignore next */\n      (0, _warn.default)(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n      /* istanbul ignore next */\n\n      return;\n    }\n\n    var cmpConfig = config[cmpName];\n\n    if (cmpName === 'breakpoints') {\n      // Special case for breakpoints\n      var breakpoints = config.breakpoints;\n\n      if (!(0, _inspect.isArray)(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n        return !(0, _inspect.isString)(b) || b.length === 0;\n      })) {\n        /* istanbul ignore next */\n        (0, _warn.default)('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n      } else {\n        CONFIG.breakpoints = (0, _cloneDeep.default)(breakpoints);\n      }\n    } else if ((0, _inspect.isObject)(cmpConfig)) {\n      (0, _object.keys)(cmpConfig).filter(function (key) {\n        return cmpConfig.hasOwnProperty(key);\n      }).forEach(function (key) {\n        if (!DEFAULTS[cmpName].hasOwnProperty(key)) {\n          /* istanbul ignore next */\n          (0, _warn.default)(\"config: unknown config property \\\"\".concat(cmpName, \".{$key}\\\"\"));\n        } else {\n          // If we pre-populate the config with defaults, we can skip this line\n          CONFIG[cmpName] = CONFIG[cmpName] || {};\n\n          if (!(0, _inspect.isUndefined)(cmpConfig[key])) {\n            CONFIG[cmpName][key] = (0, _cloneDeep.default)(cmpConfig[key]);\n          }\n        }\n      });\n    }\n  });\n}; // Reset the user config to default\n// For testing purposes only\n\n\nexports.setConfig = setConfig;\n\nvar resetConfig = function resetConfig() {\n  CONFIG = {};\n}; // Get the current user config\n// For testing purposes only\n\n\nexports.resetConfig = resetConfig;\n\nvar getConfig = function getConfig() {\n  return (0, _cloneDeep.default)(CONFIG);\n}; // Method to grab a config value based on a dotted/array notation key\n// Returns a deep clone (immutable) copy\n\n\nexports.getConfig = getConfig;\n\nvar getConfigValue = function getConfigValue(key) {\n  // First we try the user config, and if key not found we fall back to default value\n  // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n  return (0, _cloneDeep.default)((0, _get.default)(CONFIG, key, (0, _get.default)(getDefaults(), key)));\n}; // Method to grab a config value for a particular component.\n// Returns a deep clone (immutable) copy\n\n\nexports.getConfigValue = getConfigValue;\n\nvar getComponentConfig = function getComponentConfig(cmpName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Return the particular config value for key for if specified,\n  // otherwise we return the full config\n  return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\n\nexports.getComponentConfig = getComponentConfig;\n\nvar getBreakpoints = function getBreakpoints() {\n  return getConfigValue('breakpoints');\n}; // Convenience method for getting all breakpoint names\n// Caches the results after first access\n\n\nexports.getBreakpoints = getBreakpoints;\nvar getBreakpointsCached = (0, _memoize.default)(function () {\n  return getConfigValue('breakpoints');\n}); // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n\nexports.getBreakpointsCached = getBreakpointsCached;\n\nvar getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n// Caches the results after first access\n\n\nexports.getBreakpointsUp = getBreakpointsUp;\nvar getBreakpointsUpCached = (0, _memoize.default)(function () {\n  var breakpoints = getBreakpointsCached().slice();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n\nexports.getBreakpointsUpCached = getBreakpointsUpCached;\n\nvar getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n// Caches the results after first access\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\n\nexports.getBreakpointsDown = getBreakpointsDown;\nvar getBreakpointsDownCached = (0, _memoize.default)(function () {\n  var breakpoints = getBreakpointsCached().slice();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}); // Named Exports\n\nexports.getBreakpointsDownCached = getBreakpointsDownCached;"],"sourceRoot":""}