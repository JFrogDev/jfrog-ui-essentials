{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/mode/javascript/javascript.js"],"names":["mod","__webpack_require__","CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","readRegexp","stream","next","escaped","inSet","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","quote","peek","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","formaybeinof","forspec3","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","top","firstChar","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~d8858137.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\da-f]+|o[0-7]+|b[01]+)n?/i)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:n|(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return ret(\"error\", \"error\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/]/.test(ch)) {\n        return;\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), className, poplex); }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typeexpr, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, block, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(expression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"keyof\" ? typeexpr : expressionNoComma)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, expect(\")\"), poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, expect(\";\"), forspec2);\n    if (type == \";\") return cont(forspec2);\n    if (type == \"variable\") return cont(formaybeinof);\n    return pass(expression, expect(\";\"), forspec2);\n  }\n  function formaybeinof(_type, value) {\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression); }\n    return cont(maybeoperatorComma, forspec2);\n  }\n  function forspec2(type, value) {\n    if (type == \";\") return cont(forspec3);\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression); }\n    return pass(expression, expect(\";\"), forspec3);\n  }\n  function forspec3(type) {\n    if (type != \")\") cont(expression);\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(isTS ? classfield : functiondef, classBody);\n    }\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \";\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    return pass(functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"sourceRoot":""}