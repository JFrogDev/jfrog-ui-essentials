{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/mode/xml/xml.js"],"names":["mod","__webpack_require__","CodeMirror","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ok","ch","next","eat","match","inBlock","eatWhile","doctype","inTag","baseState","tagName","tagStart","test","inAttribute","stringStartCol","column","quote","closure","eol","isInAttribute","style","terminator","depth","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","defineMIME","mimeModes","name"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~c8d65df8.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar htmlConfig = {\n  autoSelfClosers: {'area': true, 'base': true, 'br': true, 'col': true, 'command': true,\n                    'embed': true, 'frame': true, 'hr': true, 'img': true, 'input': true,\n                    'keygen': true, 'link': true, 'meta': true, 'param': true, 'source': true,\n                    'track': true, 'wbr': true, 'menuitem': true},\n  implicitlyClosed: {'dd': true, 'li': true, 'optgroup': true, 'option': true, 'p': true,\n                     'rp': true, 'rt': true, 'tbody': true, 'td': true, 'tfoot': true,\n                     'th': true, 'tr': true},\n  contextGrabbers: {\n    'dd': {'dd': true, 'dt': true},\n    'dt': {'dd': true, 'dt': true},\n    'li': {'li': true},\n    'option': {'option': true, 'optgroup': true},\n    'optgroup': {'optgroup': true},\n    'p': {'address': true, 'article': true, 'aside': true, 'blockquote': true, 'dir': true,\n          'div': true, 'dl': true, 'fieldset': true, 'footer': true, 'form': true,\n          'h1': true, 'h2': true, 'h3': true, 'h4': true, 'h5': true, 'h6': true,\n          'header': true, 'hgroup': true, 'hr': true, 'menu': true, 'nav': true, 'ol': true,\n          'p': true, 'pre': true, 'section': true, 'table': true, 'ul': true},\n    'rp': {'rp': true, 'rt': true},\n    'rt': {'rp': true, 'rt': true},\n    'tbody': {'tbody': true, 'tfoot': true},\n    'td': {'td': true, 'th': true},\n    'tfoot': {'tbody': true},\n    'th': {'td': true, 'th': true},\n    'thead': {'tbody': true, 'tfoot': true},\n    'tr': {'tr': true}\n  },\n  doNotIndent: {\"pre\": true},\n  allowUnquoted: true,\n  allowMissing: true,\n  caseFold: true\n}\n\nvar xmlConfig = {\n  autoSelfClosers: {},\n  implicitlyClosed: {},\n  contextGrabbers: {},\n  doNotIndent: {},\n  allowUnquoted: false,\n  allowMissing: false,\n  allowMissingTagName: false,\n  caseFold: false\n}\n\nCodeMirror.defineMode(\"xml\", function(editorConf, config_) {\n  var indentUnit = editorConf.indentUnit\n  var config = {}\n  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\n  for (var prop in defaults) config[prop] = defaults[prop]\n  for (var prop in config_) config[prop] = config_[prop]\n\n  // Return variables for tokenizers\n  var type, setStyle;\n\n  function inText(stream, state) {\n    function chain(parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    var ch = stream.next();\n    if (ch == \"<\") {\n      if (stream.eat(\"!\")) {\n        if (stream.eat(\"[\")) {\n          if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));\n          else return null;\n        } else if (stream.match(\"--\")) {\n          return chain(inBlock(\"comment\", \"-->\"));\n        } else if (stream.match(\"DOCTYPE\", true, true)) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          return chain(doctype(1));\n        } else {\n          return null;\n        }\n      } else if (stream.eat(\"?\")) {\n        stream.eatWhile(/[\\w\\._\\-]/);\n        state.tokenize = inBlock(\"meta\", \"?>\");\n        return \"meta\";\n      } else {\n        type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n        state.tokenize = inTag;\n        return \"tag bracket\";\n      }\n    } else if (ch == \"&\") {\n      var ok;\n      if (stream.eat(\"#\")) {\n        if (stream.eat(\"x\")) {\n          ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n        } else {\n          ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n        }\n      } else {\n        ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n      }\n      return ok ? \"atom\" : \"error\";\n    } else {\n      stream.eatWhile(/[^&<]/);\n      return null;\n    }\n  }\n  inText.isInText = true;\n\n  function inTag(stream, state) {\n    var ch = stream.next();\n    if (ch == \">\" || (ch == \"/\" && stream.eat(\">\"))) {\n      state.tokenize = inText;\n      type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n      return \"tag bracket\";\n    } else if (ch == \"=\") {\n      type = \"equals\";\n      return null;\n    } else if (ch == \"<\") {\n      state.tokenize = inText;\n      state.state = baseState;\n      state.tagName = state.tagStart = null;\n      var next = state.tokenize(stream, state);\n      return next ? next + \" tag error\" : \"tag error\";\n    } else if (/[\\'\\\"]/.test(ch)) {\n      state.tokenize = inAttribute(ch);\n      state.stringStartCol = stream.column();\n      return state.tokenize(stream, state);\n    } else {\n      stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n      return \"word\";\n    }\n  }\n\n  function inAttribute(quote) {\n    var closure = function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.next() == quote) {\n          state.tokenize = inTag;\n          break;\n        }\n      }\n      return \"string\";\n    };\n    closure.isInAttribute = true;\n    return closure;\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = inText;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    }\n  }\n\n  function doctype(depth) {\n    return function(stream, state) {\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == \"<\") {\n          state.tokenize = doctype(depth + 1);\n          return state.tokenize(stream, state);\n        } else if (ch == \">\") {\n          if (depth == 1) {\n            state.tokenize = inText;\n            break;\n          } else {\n            state.tokenize = doctype(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n      return \"meta\";\n    };\n  }\n\n  function Context(state, tagName, startOfLine) {\n    this.prev = state.context;\n    this.tagName = tagName;\n    this.indent = state.indented;\n    this.startOfLine = startOfLine;\n    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context && state.context.noIndent))\n      this.noIndent = true;\n  }\n  function popContext(state) {\n    if (state.context) state.context = state.context.prev;\n  }\n  function maybePopContext(state, nextTagName) {\n    var parentTagName;\n    while (true) {\n      if (!state.context) {\n        return;\n      }\n      parentTagName = state.context.tagName;\n      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\n          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n        return;\n      }\n      popContext(state);\n    }\n  }\n\n  function baseState(type, stream, state) {\n    if (type == \"openTag\") {\n      state.tagStart = stream.column();\n      return tagNameState;\n    } else if (type == \"closeTag\") {\n      return closeTagNameState;\n    } else {\n      return baseState;\n    }\n  }\n  function tagNameState(type, stream, state) {\n    if (type == \"word\") {\n      state.tagName = stream.current();\n      setStyle = \"tag\";\n      return attrState;\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return attrState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return tagNameState;\n    }\n  }\n  function closeTagNameState(type, stream, state) {\n    if (type == \"word\") {\n      var tagName = stream.current();\n      if (state.context && state.context.tagName != tagName &&\n          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\n        popContext(state);\n      if ((state.context && state.context.tagName == tagName) || config.matchClosing === false) {\n        setStyle = \"tag\";\n        return closeState;\n      } else {\n        setStyle = \"tag error\";\n        return closeStateErr;\n      }\n    } else if (config.allowMissingTagName && type == \"endTag\") {\n      setStyle = \"tag bracket\";\n      return closeState(type, stream, state);\n    } else {\n      setStyle = \"error\";\n      return closeStateErr;\n    }\n  }\n\n  function closeState(type, _stream, state) {\n    if (type != \"endTag\") {\n      setStyle = \"error\";\n      return closeState;\n    }\n    popContext(state);\n    return baseState;\n  }\n  function closeStateErr(type, stream, state) {\n    setStyle = \"error\";\n    return closeState(type, stream, state);\n  }\n\n  function attrState(type, _stream, state) {\n    if (type == \"word\") {\n      setStyle = \"attribute\";\n      return attrEqState;\n    } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n      var tagName = state.tagName, tagStart = state.tagStart;\n      state.tagName = state.tagStart = null;\n      if (type == \"selfcloseTag\" ||\n          config.autoSelfClosers.hasOwnProperty(tagName)) {\n        maybePopContext(state, tagName);\n      } else {\n        maybePopContext(state, tagName);\n        state.context = new Context(state, tagName, tagStart == state.indented);\n      }\n      return baseState;\n    }\n    setStyle = \"error\";\n    return attrState;\n  }\n  function attrEqState(type, stream, state) {\n    if (type == \"equals\") return attrValueState;\n    if (!config.allowMissing) setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrValueState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    if (type == \"word\" && config.allowUnquoted) {setStyle = \"string\"; return attrState;}\n    setStyle = \"error\";\n    return attrState(type, stream, state);\n  }\n  function attrContinuedState(type, stream, state) {\n    if (type == \"string\") return attrContinuedState;\n    return attrState(type, stream, state);\n  }\n\n  return {\n    startState: function(baseIndent) {\n      var state = {tokenize: inText,\n                   state: baseState,\n                   indented: baseIndent || 0,\n                   tagName: null, tagStart: null,\n                   context: null}\n      if (baseIndent != null) state.baseIndent = baseIndent\n      return state\n    },\n\n    token: function(stream, state) {\n      if (!state.tagName && stream.sol())\n        state.indented = stream.indentation();\n\n      if (stream.eatSpace()) return null;\n      type = null;\n      var style = state.tokenize(stream, state);\n      if ((style || type) && style != \"comment\") {\n        setStyle = null;\n        state.state = state.state(type || style, stream, state);\n        if (setStyle)\n          style = setStyle == \"error\" ? style + \" error\" : setStyle;\n      }\n      return style;\n    },\n\n    indent: function(state, textAfter, fullLine) {\n      var context = state.context;\n      // Indent multi-line strings (e.g. css).\n      if (state.tokenize.isInAttribute) {\n        if (state.tagStart == state.indented)\n          return state.stringStartCol + 1;\n        else\n          return state.indented + indentUnit;\n      }\n      if (context && context.noIndent) return CodeMirror.Pass;\n      if (state.tokenize != inTag && state.tokenize != inText)\n        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n      // Indent the starts of attribute names.\n      if (state.tagName) {\n        if (config.multilineTagIndentPastTag !== false)\n          return state.tagStart + state.tagName.length + 2;\n        else\n          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n      }\n      if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n      var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n      if (tagAfter && tagAfter[1]) { // Closing tag spotted\n        while (context) {\n          if (context.tagName == tagAfter[2]) {\n            context = context.prev;\n            break;\n          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n            context = context.prev;\n          } else {\n            break;\n          }\n        }\n      } else if (tagAfter) { // Opening tag spotted\n        while (context) {\n          var grabbers = config.contextGrabbers[context.tagName];\n          if (grabbers && grabbers.hasOwnProperty(tagAfter[2]))\n            context = context.prev;\n          else\n            break;\n        }\n      }\n      while (context && context.prev && !context.startOfLine)\n        context = context.prev;\n      if (context) return context.indent + indentUnit;\n      else return state.baseIndent || 0;\n    },\n\n    electricInput: /<\\/[\\s\\w:]+>$/,\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n\n    configuration: config.htmlMode ? \"html\" : \"xml\",\n    helperType: config.htmlMode ? \"html\" : \"xml\",\n\n    skipAttribute: function(state) {\n      if (state.state == attrValueState)\n        state.state = attrState\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/xml\", \"xml\");\nCodeMirror.defineMIME(\"application/xml\", \"xml\");\nif (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\"))\n  CodeMirror.defineMIME(\"text/html\", {name: \"xml\", htmlMode: true});\n\n});\n"],"sourceRoot":""}