{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/mode/markdown/markdown.js"],"names":["mod","__webpack_require__","CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","findModeByName","found","mime","mimes","mode","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","expandedTab","switchInline","stream","state","f","inline","switchBlock","block","lineIsEmpty","line","test","string","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","returnType","currListInd","hasExitedList","maxFencedEndInd","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","replace","regex","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","getLinkHrefInside","linkRE",")","]","endChar","returnState","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME"],"mappings":"6LAGA,SAAAA,GAEAA,EAAQC,EAAQ,QAAyBA,EAAQ,QAAeA,EAAQ,UAFxE,CAOC,SAAAC,GACD,aAEAA,EAAAC,WAAA,oBAAAC,EAAAC,GAEA,IAAAC,EAAAJ,EAAAK,QAAAH,EAAA,aACAI,EAAA,QAAAF,EAAAG,KAEA,SAAAF,EAAAE,GACA,GAAAP,EAAAQ,eAAA,CACA,IAAAC,EAAAT,EAAAQ,eAAAD,GACAE,IAAAF,EAAAE,EAAAC,MAAAD,EAAAE,MAAA,IAEA,IAAAC,EAAAZ,EAAAK,QAAAH,EAAAK,GACA,cAAAK,EAAAL,KAAA,KAAAK,OAKAC,IAAAV,EAAAW,sBACAX,EAAAW,qBAAA,QAIAD,IAAAV,EAAAY,qBACAZ,EAAAY,mBAAA,QAGAF,IAAAV,EAAAa,YAAAb,EAAAa,WAAA,QAGAH,IAAAV,EAAAc,gBACAd,EAAAc,eAAA,QAEAJ,IAAAV,EAAAe,QACAf,EAAAe,OAAA,QAEAL,IAAAV,EAAAgB,8BACAhB,EAAAgB,6BAAA,QAEAN,IAAAV,EAAAiB,MACAjB,EAAAiB,KAAA,QAGAP,IAAAV,EAAAkB,qBACAlB,EAAAkB,mBAAA,IAEA,IAAAC,EAAA,CACAC,OAAA,SACAC,KAAA,UACAC,MAAA,QACAC,MAAA,aACAC,MAAA,aACAC,MAAA,UACAC,GAAA,KACAC,MAAA,QACAC,aAAA,iBACAC,YAAA,eACAC,WAAA,aACAC,WAAA,OACAC,UAAA,OACAC,SAAA,OACAC,SAAA,SACAC,GAAA,KACAC,OAAA,SACAtB,cAAA,gBACAC,MAAA,WAGA,QAAAsB,KAAAlB,EACAA,EAAAmB,eAAAD,IAAArC,EAAAkB,mBAAAmB,KACAlB,EAAAkB,GAAArC,EAAAkB,mBAAAmB,IAIA,IAAAE,EAAA,6BACAC,EAAA,+BACAC,EAAA,oBACAC,EAAA1C,EAAA2C,2BAAA,uBACAC,EAAA,0BACAC,EAAA,2BACAC,EAAA,uCACAC,EAAA,sBACAC,EAAA,mpDACAC,EAAA,OAEA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,OADAD,EAAAC,EAAAD,EAAAE,OAAAD,EACAA,EAAAF,EAAAC,GAGA,SAAAG,EAAAJ,EAAAC,EAAAC,GAEA,OADAD,EAAAC,EAAAD,EAAAI,MAAAH,EACAA,EAAAF,EAAAC,GAGA,SAAAK,EAAAC,GACA,OAAAA,IAAA,KAAAC,KAAAD,EAAAE,QAKA,SAAAC,EAAAT,GAeA,GAbAA,EAAAU,WAAA,EACAV,EAAAlB,UAAA,EACAkB,EAAAnB,UAAA,EAEAmB,EAAAjB,IAAA,EAEAiB,EAAAhB,QAAA,EAEAgB,EAAAtC,eAAA,EAEAsC,EAAA9B,MAAA,EAEA8B,EAAAW,cAAA,EACAX,EAAAC,GAAAW,EAAA,CACA,IAAAC,EAAA9D,EACA,IAAA8D,EAAA,CACA,IAAAC,EAAArE,EAAAsE,UAAAlE,EAAAmD,EAAAgB,WACAH,EAAA,OAAAC,EAAAzD,KAAAL,MAAA,OAAA8D,EAAAd,MAAAiB,WACAH,EAAAd,MAAAkB,SAAAJ,EAAAd,MAAAmB,SAAAC,SAEAP,IACAb,EAAAC,EAAAoB,EACArB,EAAAI,MAAAkB,EACAtB,EAAAgB,UAAA,MASA,OALAhB,EAAAuB,cAAA,EACAvB,EAAAwB,sBAAA,EAEAxB,EAAAyB,SAAAzB,EAAA0B,SACA1B,EAAA0B,SAAA,CAAsB3B,OAAA,MACtB,KAGA,SAAAuB,EAAAvB,EAAAC,GACA,IAAA2B,EAAA5B,EAAA6B,WAAA5B,EAAA6B,YACAC,EAAAzB,EAAAL,EAAAyB,SAAA1B,QACAgC,EAAA/B,EAAAW,aACAqB,EAAAhC,EAAAyB,SAAAnD,GACA2D,GAAA,IAAAjC,EAAAkC,KACAC,GAAAnC,EAAAoC,UAAApC,EAAAoC,UAAAC,OAAA,SAEArC,EAAAW,cAAA,EAEA,IAAA2B,EAAAtC,EAAA6B,YAEA,UAAA7B,EAAAuC,kBACAvC,EAAAuC,gBAAAvC,EAAA6B,YACAI,GAAA,CAEAjC,EAAAjB,IAAA,EACAiB,EAAAhB,QAAA,EACAgB,EAAA/B,MAAA,EACA+B,EAAAtC,eAAA,EAEAsC,EAAAkC,KAAA,KAIA,MAAAI,EAAAtC,EAAAoC,UAAApC,EAAAoC,UAAAC,OAAA,GACArC,EAAAoC,UAAAI,MACAxC,EAAAoC,UAAAC,OACArC,EAAA6B,YAAA7B,EAAAoC,UAAApC,EAAAoC,UAAAC,OAAA,GAGArC,EAAAkC,MAAA,GAGA,IAAAlC,EAAAkC,OACAlC,EAAAuC,gBAAAD,EAAAtC,EAAAoC,UAAApC,EAAAoC,UAAAC,OAAA,IAMA,IAAAI,GACAX,IAAAE,IAAAhC,EAAAyB,SAAAzD,UACAiE,IAAAF,KACA/B,EAAAyB,SAAAiB,cAGAC,IAAA,IAAA3C,EAAAkC,MAAAF,GAAAF,IACA9B,EAAA6B,aAAAM,GAAApC,EAAA6C,MAAAzD,GAEAyD,EAAA,KACA,GAAA5C,EAAAuC,iBAAA,IAAAR,GAAA/B,EAAAyB,SAAAiB,eACA1C,EAAAyB,SAAAzD,QAAA8D,GAGA,OAFA/B,EAAA8C,YACA7C,EAAAW,cAAA,EACA5C,EAAAE,KACK,GAAA8B,EAAA+C,WACL,YACK,GAAAnB,GAAA3B,EAAA6B,aAAAM,IAAAS,EAAA7C,EAAA6C,MAAAtD,KAAAsD,EAAA,GAAAP,QAAA,EAML,OALArC,EAAA9B,MAAA,EACA8B,EAAAhC,OAAA4E,EAAA,GAAAP,OACArC,EAAA0B,SAAA1D,QAAA,EACApB,EAAAW,sBAAAyC,EAAAtB,WAAA,UACAsB,EAAAC,EAAAD,EAAAE,OACA6C,EAAA/C,GACK,GAAAA,EAAA6B,aAAAM,GAAApC,EAAAiD,IAAA,KAIL,OAHAhD,EAAA9B,MAAAyD,EAAA,EAAA3B,EAAA9B,MAAA,EACAtB,EAAAW,sBAAAyC,EAAAtB,WAAA,SACAqB,EAAA+C,WACAC,EAAA/C,GACK,IAAA2C,IAAA3C,EAAAiD,QAAAtB,GAAA3B,EAAA6B,aAAAM,IAAAS,EAAA7C,EAAA6C,MAAAxD,IAAA,CACL,IAAA8D,EAAAN,EAAA,aAcA,OAZA5C,EAAA6B,YAAAS,EAAAvC,EAAAoD,UAAAd,OACArC,EAAAkC,MAAA,EACAlC,EAAA9B,MAAA,EAGA8B,EAAAoC,UAAAgB,KAAApD,EAAA6B,aAEAjF,EAAAa,WAAAsC,EAAA6C,MAAAvD,GAAA,KACAW,EAAAqD,UAAA,GAEArD,EAAAC,EAAAD,EAAAE,OACAtD,EAAAW,sBAAAyC,EAAAtB,WAAA,gBAAAwE,IACAH,EAAA/C,GACK,OAAA2B,GAAA3B,EAAA6B,aAAAM,IAAAS,EAAA7C,EAAA6C,MAAAlD,GAAA,KACLM,EAAA9B,MAAA,EACA8B,EAAAsD,YAAA,IAAAC,OAAAX,EAAA,WAEA5C,EAAAwD,UAAA5G,EAAAgB,6BAAAd,EAAA8F,EAAA,IACA5C,EAAAwD,YAAAxD,EAAAyD,WAAAhH,EAAAiH,WAAA1D,EAAAwD,YACAxD,EAAAC,EAAAD,EAAAI,MAAAuD,EACA/G,EAAAW,sBAAAyC,EAAAtB,WAAA,cACAsB,EAAA/B,MAAA,EACA8E,EAAA/C,IAKAA,EAAAiD,UAEAR,GAAAR,GAAAjC,EAAA9B,QAAA,IAAA8B,EAAAkC,MACAlC,EAAA/B,MAAA0E,GAAAhD,EAAAY,KAAAR,EAAAS,WACAoC,EAAA7C,EAAA6D,UAAA,MAAAhB,UAAApD,KAGAQ,EAAAiD,QAIAjD,EAAAhC,OAAAgC,EAAAiD,OAEAjD,EAAAiD,OAAA,EACAlD,EAAA8C,YACAjG,EAAAW,sBAAAyC,EAAAtB,WAAA,YAPAsB,EAAAhC,OAAA,KAAA4E,EAAA,GAAAiB,OAAA,OACA7D,EAAAiD,OAAAjD,EAAAhC,QAQAgC,EAAA0B,SAAA1D,QAAA,EACAgC,EAAAC,EAAAD,EAAAE,OACA6C,EAAA/C,IACK2C,GACL5C,EAAA8C,YACA7C,EAAA1B,IAAA,EACA0B,EAAA0B,SAAApD,IAAA,EACAP,EAAAO,IACK,MAAAyB,EAAA+D,OACLhE,EAAAC,EAAAC,EAAA+D,GAGAjE,EAAAC,EAAAC,IAAAE,QAGA,SAAAU,EAAAb,EAAAC,GACA,IAAAgE,EAAAnH,EAAAoH,MAAAlE,EAAAC,EAAAgB,WACA,IAAAjE,EAAA,CACA,IAAA+D,EAAArE,EAAAsE,UAAAlE,EAAAmD,EAAAgB,YACA,OAAAF,EAAAzD,KAAAL,MAAA,OAAA8D,EAAAd,MAAAiB,WACAH,EAAAd,MAAAkB,SAAAJ,EAAAd,MAAAmB,SAAAC,UACApB,EAAAkE,WAAAnE,EAAAoD,UAAAgB,QAAA,WACAnE,EAAAC,EAAAoB,EACArB,EAAAI,MAAAkB,EACAtB,EAAAgB,UAAA,MAGA,OAAAgD,EAGA,SAAAL,EAAA5D,EAAAC,GACA,IAKAoE,EALAC,EAAArE,EAAAoC,UAAApC,EAAAoC,UAAAC,OAAA,MACAiC,EAAAtE,EAAA6B,YAAAwC,EACAE,EAAAF,EAAA,EACA,OAAArE,EAAAsD,aAAAtD,EAAA6B,aAAA0C,IAAAD,GAAAvE,EAAA6C,MAAA5C,EAAAsD,eACA1G,EAAAW,sBAAAyC,EAAAtB,WAAA,cAEA4F,IAAAF,EAAArB,EAAA/C,IACAA,EAAAwD,UAAAxD,EAAAyD,WAAA,KACAzD,EAAAI,MAAAkB,EACAtB,EAAAC,EAAAoB,EACArB,EAAAsD,YAAA,KACAtD,EAAA/B,KAAA,EACA+B,EAAA0B,SAAAgB,eAAA,EACA4B,EAAAnE,EAAAJ,EAAAC,IAAAI,OACAgE,GACKpE,EAAAwD,UACLxD,EAAAwD,UAAAS,MAAAlE,EAAAC,EAAAyD,aAEA1D,EAAA8C,YACA9E,EAAAE,MAKA,SAAA8E,EAAA/C,GACA,IAAAwE,EAAA,GAEA,GAAAxE,EAAAtB,WAAA,CACA8F,EAAApB,KAAArF,EAAAW,YAEA,kBAAAsB,EAAAtB,aAAAsB,EAAAtB,WAAA,CAAAsB,EAAAtB,aAEA,QAAA+F,EAAA,EAAqBA,EAAAzE,EAAAtB,WAAA2D,OAA6BoC,IAClDD,EAAApB,KAAArF,EAAAW,WAAA,IAAAsB,EAAAtB,WAAA+F,IAEA,WAAAzE,EAAAtB,WAAA+F,IACAD,EAAApB,KAAArF,EAAAW,WAAA,IAAAsB,EAAAtB,WAAA+F,GAAA,IAAAzE,EAAAhC,QAKA,UAAAgC,EAAAtB,WAAA+F,MACA7H,EAAAY,oBAAAZ,EAAAY,oBAAAwC,EAAA9B,MACAsG,EAAApB,KAAArF,EAAAW,WAAA,IAAAsB,EAAAtB,WAAA+F,GAAA,IAAAzE,EAAA9B,OAEAsG,EAAApB,KAAA,UAMA,GAAApD,EAAA0E,SAEA,OADAF,EAAApB,KAAA,QACAoB,EAAAnC,OAAAmC,EAAAG,KAAA,UAEA,GAAA3E,EAAA4E,WAEA,OADAJ,EAAApB,KAAA,YACAoB,EAAAnC,OAAAmC,EAAAG,KAAA,UA8BA,GA3BA3E,EAAAlB,SACA0F,EAAApB,KAAArF,EAAAe,SAAA,QAEAkB,EAAAhB,QAAyBwF,EAAApB,KAAArF,EAAAiB,QACzBgB,EAAAjB,IAAqByF,EAAApB,KAAArF,EAAAgB,IACrBiB,EAAAtC,eAAgC8G,EAAApB,KAAArF,EAAAL,eAChCsC,EAAArC,OAAwB6G,EAAApB,KAAArF,EAAAJ,OACxBqC,EAAAnB,UAA2B2F,EAAApB,KAAArF,EAAAc,UAC3BmB,EAAA/B,MAAuBuG,EAAApB,KAAArF,EAAAE,MACvB+B,EAAAzB,OAAwBiG,EAAApB,KAAArF,EAAAQ,OACxByB,EAAAxB,cAA+BgG,EAAApB,KAAArF,EAAAS,aAAA,QAC/BwB,EAAAvB,aAA8B+F,EAAApB,KAAArF,EAAAU,cAG9BuB,EAAAhC,QAAuBwG,EAAApB,KAAArF,EAAAC,OAAAD,EAAAC,OAAA,IAAAgC,EAAAhC,QAEvBgC,EAAA9B,QACAsG,EAAApB,KAAArF,EAAAG,QAGAtB,EAAAY,oBAAAZ,EAAAY,oBAAAwC,EAAA9B,MACAsG,EAAApB,KAAArF,EAAAG,MAAA,IAAA8B,EAAA9B,OAEAsG,EAAApB,KAAArF,EAAAG,MAAA,IAAAtB,EAAAY,sBAIA,IAAAwC,EAAAkC,KAAA,CACA,IAAA2C,GAAA7E,EAAAoC,UAAAC,OAAA,KACAwC,EAEO,IAAAA,EACPL,EAAApB,KAAArF,EAAAK,OAEAoG,EAAApB,KAAArF,EAAAM,OAJAmG,EAAApB,KAAArF,EAAAI,OAcA,OANA6B,EAAAwB,qBACAgD,EAAApB,KAAA,2BACKpD,EAAAuB,eACLiD,EAAApB,KAAA,mBAAApD,EAAAuB,cAAA,YAGAiD,EAAAnC,OAAAmC,EAAAG,KAAA,UAGA,SAAAG,EAAA/E,EAAAC,GACA,GAAAD,EAAA6C,MAAAnD,GAAA,GACA,OAAAsD,EAAA/C,GAKA,SAAAqB,EAAAtB,EAAAC,GACA,IAAAgE,EAAAhE,EAAA+E,KAAAhF,EAAAC,GACA,wBAAAgE,EACA,OAAAA,EAEA,GAAAhE,EAAAkC,KAEA,OADAlC,EAAAkC,KAAA,KACAa,EAAA/C,GAGA,GAAAA,EAAAqD,SAAA,CACA,IAAAqB,EAAA,MAAA3E,EAAA6C,MAAAvD,GAAA,MAKA,OAJAqF,EAAA1E,EAAA0E,UAAA,EACA1E,EAAA4E,YAAA,EACAhI,EAAAW,sBAAAyC,EAAAtB,WAAA,QACAsB,EAAAqD,UAAA,EACAN,EAAA/C,GAMA,GAHAA,EAAA0E,UAAA,EACA1E,EAAA4E,YAAA,EAEA5E,EAAAhC,QAAA+B,EAAA6C,MAAA,WAEA,OADAhG,EAAAW,sBAAAyC,EAAAtB,WAAA,UACAqE,EAAA/C,GAGA,IAAAgF,EAAAjF,EAAAkF,OAGA,GAAAjF,EAAAU,UAAA,CACAV,EAAAU,WAAA,EACA,IAAAwE,EAAAF,EACA,MAAAA,IACAE,EAAA,KAEAA,KAAA,IAAAC,QAAA,yBAAuD,QACvD,IAAAC,EAAA,aAAAF,EAAA,yBAAAA,EACA,GAAAnF,EAAA6C,MAAA,IAAAW,OAAA6B,IAAA,GACA,OAAArH,EAAAe,SAKA,SAAAkG,EAAA,CACA,IAAAK,EAAArF,EAAAtB,WACA9B,EAAAW,sBAAAyC,EAAAtB,WAAA,QACAqB,EAAAuF,SAAA,KACA,IAAAC,EAAAxF,EAAAoD,UAAAd,OACA,MAAArC,EAAA/B,MAAA+B,EAAA9B,OAAA,GAAAqH,EAGO,IAAAA,GAAAvF,EAAA/B,KAAA,CACP,IAAAuH,EAAAzC,EAAA/C,GAEA,OADAA,EAAA/B,KAAA,EACAuH,EAGA,OADAxF,EAAAtB,WAAA2G,EACAtC,EAAA/C,GAPA,OADAA,EAAA/B,KAAAsH,EACAxC,EAAA/C,GASK,GAAAA,EAAA/B,KACL,OAAA8E,EAAA/C,GAGA,UAAAgF,IACAjF,EAAAkF,OACArI,EAAAW,qBAAA,CACA,IAAAkI,EAAA1C,EAAA/C,GACA0F,EAAA3H,EAAAW,WAAA,UACA,OAAA+G,IAAA,IAAAC,IAIA,SAAAV,GAAAjF,EAAA6C,MAAA,4BAIA,OAHA5C,EAAAvB,aAAA,EACAuB,EAAAzB,OAAA,EACA3B,EAAAW,sBAAAyC,EAAAtB,WAAA,SACAqE,EAAA/C,GAGA,SAAAgF,GAAAhF,EAAAvB,aAAAsB,EAAA6C,MAAA,kCAIA,OAHA5C,EAAAvB,aAAA,EACAuB,EAAAxB,cAAA,EACA5B,EAAAW,sBAAAyC,EAAAtB,WAAA,SACAqE,EAAA/C,GAGA,SAAAgF,GAAAhF,EAAAxB,aAAA,CACA5B,EAAAW,sBAAAyC,EAAAtB,WAAA,SACA+G,EAAA1C,EAAA/C,GAIA,OAHAA,EAAAxB,cAAA,EACAwB,EAAAzB,OAAA,EACAyB,EAAAE,OAAAF,EAAAC,EAAAnB,EACA2G,EAGA,SAAAT,IAAAhF,EAAAzB,MACA,OAAAyB,EAAAnB,UAAAkB,EAAA6C,MAAA,UAAAG,EAAA/C,IACAA,EAAAnB,UAAA,EACAjC,EAAAW,sBAAAyC,EAAAtB,WAAA,QACAqE,EAAA/C,IAGA,SAAAgF,GAAAhF,EAAAnB,SAAA,CACAjC,EAAAW,sBAAAyC,EAAAtB,WAAA,QACA+G,EAAA1C,EAAA/C,GAGA,OAFAA,EAAAnB,UAAA,EACAmB,EAAAE,OAAAF,EAAAC,EAAAF,EAAA6C,MAAA,wBAAA9D,EAAAuC,EACAoE,EAGA,SAAAT,GAAAjF,EAAA6C,MAAA,4CACA5C,EAAAC,EAAAD,EAAAE,OAAAvB,EACA/B,EAAAW,sBAAAyC,EAAAtB,WAAA,QACA+G,EAAA1C,EAAA/C,GAMA,OALAyF,EACAA,GAAA,IAEAA,EAAA,GAEAA,EAAA1H,EAAAY,WAGA,SAAAqG,GAAAjF,EAAA6C,MAAA,kCACA5C,EAAAC,EAAAD,EAAAE,OAAAvB,EACA/B,EAAAW,sBAAAyC,EAAAtB,WAAA,QACA+G,EAAA1C,EAAA/C,GAMA,OALAyF,EACAA,GAAA,IAEAA,EAAA,GAEAA,EAAA1H,EAAAa,UAGA,GAAAhC,EAAAiB,KAAA,MAAAmH,GAAAjF,EAAA6C,MAAA,2FACA,IAAA+C,EAAA5F,EAAAS,OAAA2D,QAAA,IAAApE,EAAA6F,KACA,OAAAD,EAAA,CACA,IAAAE,EAAA9F,EAAAS,OAAAsF,UAAA/F,EAAAgG,MAAAJ,GACA,uCAAiDpF,KAAAsF,KAAA7F,EAAAkE,WAAA,GAIjD,OAFAnE,EAAAiG,OAAA,GACAhG,EAAAgB,UAAAvE,EAAAiH,WAAA7G,GACAsD,EAAAJ,EAAAC,EAAAY,GAGA,GAAAhE,EAAAiB,KAAA,MAAAmH,GAAAjF,EAAA6C,MAAA,YAEA,OADA5C,EAAAkE,WAAA,EACA,MACK,SAAAc,GAAA,MAAAA,EAAA,CACL,IAAAiB,EAAA,EAAAC,EAAA,GAAAnG,EAAA6F,IAAA,IAAA7F,EAAAS,OAAAqD,OAAA9D,EAAA6F,IAAA,GACA,MAAAK,EAAA,GAAAlG,EAAAiD,IAAAgC,GAAAiB,IACA,IAAAE,EAAApG,EAAA+D,QAAA,IAEAsC,GAAA,KAAA7F,KAAA4F,MAAAvG,EAAAW,KAAA4F,IAAA,KAAA5F,KAAA2F,IAAAtG,EAAAW,KAAA2F,IACAG,GAAA,KAAA9F,KAAA2F,MAAAtG,EAAAW,KAAA2F,IAAA,KAAA3F,KAAA4F,IAAAvG,EAAAW,KAAA4F,IACAG,EAAA,KAAAC,EAAA,KAaA,GAZAN,EAAA,IACAjG,EAAAjB,KAAAqH,GAAA,MAAApB,GAAAqB,IAAAzG,EAAAW,KAAA2F,GAEAlG,EAAAjB,IAAAiG,IAAAqB,GAAA,MAAArB,GAAAoB,IAAAxG,EAAAW,KAAA4F,KACAG,GAAA,GAFAA,GAAA,GAIAL,EAAA,IACAjG,EAAAhB,SAAAoH,GAAA,MAAApB,GAAAqB,IAAAzG,EAAAW,KAAA2F,GAEAlG,EAAAhB,QAAAgG,IAAAqB,GAAA,MAAArB,GAAAoB,IAAAxG,EAAAW,KAAA4F,KACAI,GAAA,GAFAA,GAAA,GAIA,MAAAA,GAAA,MAAAD,EAAA,CACA1J,EAAAW,sBAAAyC,EAAAtB,WAAA,MAAA4H,EAAA,eAAAC,EAAA,mBACA,IAAAD,IAAAtG,EAAAjB,GAAAiG,IACA,IAAAuB,IAAAvG,EAAAhB,OAAAgG,GACAQ,EAAAzC,EAAA/C,GAGA,OAFA,IAAAsG,IAAAtG,EAAAjB,IAAA,IACA,IAAAwH,IAAAvG,EAAAhB,QAAA,GACAwG,QAEK,SAAAR,IACLjF,EAAAiD,IAAA,MAAAjD,EAAAiD,IAAA,OACA,SAAAjD,EAAA+D,OACA,OAAAf,EAAA/C,GAEAD,EAAAiG,OAAA,GAKA,GAAApJ,EAAAc,cACA,SAAAsH,GAAAjF,EAAAuF,SAAAN,GAAA,CACA,GAAAhF,EAAAtC,cAAA,CACAd,EAAAW,sBAAAyC,EAAAtB,WAAA,iBACA8G,EAAAzC,EAAA/C,GAEA,OADAA,EAAAtC,eAAA,EACA8H,EACS,GAAAzF,EAAA6C,MAAA,aAGT,OAFA5C,EAAAtC,eAAA,EACAd,EAAAW,sBAAAyC,EAAAtB,WAAA,iBACAqE,EAAA/C,QAEO,SAAAgF,GACPjF,EAAA6C,MAAA,WACA,SAAA7C,EAAA+D,OACA,OAAAf,EAAA/C,GAEAD,EAAAiG,OAAA,GAMA,GAAApJ,EAAAe,OAAA,MAAAqH,GAAAjF,EAAA6C,MAAA,sDACA5C,EAAArC,OAAA,EACAf,EAAAW,sBAAAyC,EAAAtB,WAAA,SACA,IAAA8H,EAAAzD,EAAA/C,GAEA,OADAA,EAAArC,OAAA,EACA6I,EAWA,MARA,MAAAxB,IACAjF,EAAA6C,MAAA,WACA5C,EAAAuB,gBACOvB,EAAAuB,gBACPvB,EAAAwB,sBAAA,IAIAuB,EAAA/C,GAGA,SAAArB,EAAAoB,EAAAC,GACA,IAAAgF,EAAAjF,EAAAkF,OAEA,SAAAD,EAAA,CACAhF,EAAAC,EAAAD,EAAAE,OAAAmB,EACAzE,EAAAW,sBAAAyC,EAAAtB,WAAA,QACA,IAAA+G,EAAA1C,EAAA/C,GAMA,OALAyF,EACAA,GAAA,IAEAA,EAAA,GAEAA,EAAA1H,EAAAY,WAKA,OAFAoB,EAAA6C,MAAA,aAEA7E,EAAAY,WAGA,SAAAG,EAAAiB,EAAAC,GAEA,GAAAD,EAAA+C,WACA,YAEA,IAAAkC,EAAAjF,EAAAkF,OACA,YAAAD,GAAA,MAAAA,GACAhF,EAAAC,EAAAD,EAAAE,OAAAuG,EAAA,MAAAzB,EAAA,SACApI,EAAAW,sBAAAyC,EAAAtB,WAAA,eACAsB,EAAAlB,UAAA,EACAiE,EAAA/C,IAEA,QAGA,IAAA0G,EAAA,CACAC,IAAA,oDACAC,IAAA,qDAGA,SAAAH,EAAAI,GACA,gBAAA9G,EAAAC,GACA,IAAAgF,EAAAjF,EAAAkF,OAEA,GAAAD,IAAA6B,EAAA,CACA7G,EAAAC,EAAAD,EAAAE,OAAAmB,EACAzE,EAAAW,sBAAAyC,EAAAtB,WAAA,eACA,IAAAoI,EAAA/D,EAAA/C,GAEA,OADAA,EAAAlB,UAAA,EACAgI,EAKA,OAFA/G,EAAA6C,MAAA8D,EAAAG,IACA7G,EAAAlB,UAAA,EACAiE,EAAA/C,IAIA,SAAA+D,EAAAhE,EAAAC,GACA,OAAAD,EAAA6C,MAAA,0BACA5C,EAAAC,EAAA8G,EACAhH,EAAAkF,OACArI,EAAAW,sBAAAyC,EAAAtB,WAAA,QACAsB,EAAAnB,UAAA,EACAkE,EAAA/C,IAEAF,EAAAC,EAAAC,EAAAqB,GAGA,SAAA0F,EAAAhH,EAAAC,GACA,GAAAD,EAAA6C,MAAA,YACA5C,EAAAC,EAAAD,EAAAE,OAAA8G,EACApK,EAAAW,sBAAAyC,EAAAtB,WAAA,QACA,IAAA0F,EAAArB,EAAA/C,GAEA,OADAA,EAAAnB,UAAA,EACAuF,EAKA,OAFArE,EAAA6C,MAAA,sBAEA7E,EAAAc,SAGA,SAAAmI,EAAAjH,EAAAC,GAEA,OAAAD,EAAA+C,WACA,MAGA/C,EAAA6C,MAAA,mBAEAtF,IAAAyC,EAAA+D,OACA9D,EAAAU,WAAA,EAEAX,EAAA6C,MAAA,0FAEA5C,EAAAC,EAAAD,EAAAE,OAAAmB,EACAtD,EAAAe,SAAA,QAGA,IAAAzB,EAAA,CACAqG,WAAA,WACA,OACAzD,EAAAqB,EAEAG,SAAA,CAAmB1B,OAAA,MACnB2B,SAAA,CAAmB3B,OAAA,MAEnBK,MAAAkB,EACAN,UAAA,KACAa,YAAA,EAEA3B,OAAAmB,EACA0D,KAAAD,EAEApG,YAAA,EACAG,UAAA,EACAC,UAAA,EACA4B,WAAA,EACAzC,KAAA,EACAc,IAAA,EACAC,QAAA,EACAhB,OAAA,EACAiF,OAAA,EACA3E,IAAA,EACA+E,UAAA,EACAnB,MAAA,EACAE,UAAA,GACAlE,MAAA,EACAqD,cAAA,EACAC,sBAAA,EACA9D,eAAA,EACAC,OAAA,EACA2F,YAAA,OAIA2D,UAAA,SAAAC,GACA,OACAjH,EAAAiH,EAAAjH,EAEAwB,SAAAyF,EAAAzF,SACAC,SAAAwF,EAAAxF,SAEAtB,MAAA8G,EAAA9G,MACAY,UAAAkG,EAAAlG,WAAAvE,EAAAwK,UAAApK,EAAAqK,EAAAlG,WACAa,YAAAqF,EAAArF,YAEA2B,UAAA0D,EAAA1D,UACAC,WAAAyD,EAAA1D,UAAA/G,EAAAwK,UAAAC,EAAA1D,UAAA0D,EAAAzD,YAAA,KAEAvD,OAAAgH,EAAAhH,OACA6E,KAAAmC,EAAAnC,KACArG,YAAA,EACAG,SAAAqI,EAAArI,SACA6B,UAAAwG,EAAAxG,UACA5B,SAAAoI,EAAApI,SACAb,KAAAiJ,EAAAjJ,KACAc,GAAAmI,EAAAnI,GACAC,OAAAkI,EAAAlI,OACAtB,cAAAwJ,EAAAxJ,cACAC,MAAAuJ,EAAAvJ,MACAK,OAAAkJ,EAAAlJ,OACAiF,OAAAiE,EAAAjE,OACA3E,GAAA4I,EAAA5I,GACA+E,SAAA6D,EAAA7D,SACAnB,KAAAgF,EAAAhF,KACAE,UAAA8E,EAAA9E,UAAA+E,MAAA,GACAjJ,MAAAgJ,EAAAhJ,MACAyC,aAAAuG,EAAAvG,aACAY,cAAA2F,EAAA3F,cACAC,qBAAA0F,EAAA1F,qBACA0C,UAAAgD,EAAAhD,UACAZ,YAAA4D,EAAA5D,cAIAW,MAAA,SAAAlE,EAAAC,GAKA,GAFAA,EAAAtB,YAAA,EAEAqB,GAAAC,EAAA0B,SAAA3B,OAAA,CAIA,GAHAC,EAAAhC,OAAA,EACAgC,EAAA1B,IAAA,EAEAyB,EAAA6C,MAAA,YAEA,OADAnC,EAAAT,GACA,KAaA,GAVAA,EAAAyB,SAAAzB,EAAA0B,SACA1B,EAAA0B,SAAA,CAA0B3B,UAG1BC,EAAAqD,UAAA,EAGArD,EAAAuB,cAAA,EACAvB,EAAAwB,sBAAA,GAEAxB,EAAAyD,aACAzD,EAAAC,EAAAD,EAAAI,MACAJ,EAAAC,GAAAW,GAAA,CACA,IAAAiB,EAAA9B,EAAA6C,MAAA,cAAAuC,QAAA,MAAAtF,GAAAwC,OAGA,GAFArC,EAAA6B,cACA7B,EAAAuC,gBAAA,KACAV,EAAA,eAIA,OAAA7B,EAAAC,EAAAF,EAAAC,IAGAe,UAAA,SAAAf,GACA,OAAAA,EAAAI,OAAAQ,EAAA,CAA4CZ,QAAAgB,UAAA3D,KAAAR,GAC5CmD,EAAAyD,WAAA,CAAoCzD,QAAAyD,WAAApG,KAAA2C,EAAAwD,WACpC,CAAcxD,QAAA3C,SAGd+J,OAAA,SAAApH,EAAAqH,EAAA/G,GACA,OAAAN,EAAAI,OAAAQ,GAAA/D,EAAAuK,OAAAvK,EAAAuK,OAAApH,EAAAgB,UAAAqG,EAAA/G,GACAN,EAAAyD,YAAAzD,EAAAwD,UAAA4D,OAAApH,EAAAwD,UAAA4D,OAAApH,EAAAyD,WAAA4D,EAAA/G,GACA7D,EAAA6K,MAGA7G,YAEAsC,UAEAwE,kBAAA,UACAC,gBAAA,SACAC,cAAA,iBACAC,KAAA,YAEA,OAAArK,GACC,OAEDZ,EAAAkL,WAAA,4BAEAlL,EAAAkL,WAAA","file":"jfrog-ui-essentials.umd.min.vendors-chunks~c1b9e965.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        // Reset inline styles which shouldn't propagate aross list items\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match(/^~~/, true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(/^\\]:/, true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"],"sourceRoot":""}