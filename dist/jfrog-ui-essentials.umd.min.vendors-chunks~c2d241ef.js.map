{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/addon/search/search.js"],"names":["mod","__webpack_require__","CodeMirror","searchOverlay","query","caseInsensitive","RegExp","replace","global","source","ignoreCase","token","stream","lastIndex","pos","match","exec","string","index","length","skipToEnd","SearchState","this","posFrom","posTo","lastQuery","overlay","getSearchState","cm","state","search","queryCaseInsensitive","toLowerCase","getSearchCursor","caseFold","multiline","persistentDialog","text","deflt","onEnter","onKeyDown","openDialog","value","selectValueOnOpen","closeOnEnter","onClose","clearSearch","dialog","shortText","f","prompt","confirmDialog","fs","openConfirm","confirm","parseString","_","ch","parseQuery","isRE","indexOf","e","test","startSearch","queryText","removeOverlay","addOverlay","showMatchesOnScrollbar","annotate","clear","doSearch","rev","persistent","immediate","findNext","q","getSelection","hiding","searchNext","event","e_stop","getCursor","style","opacity","shiftKey","to","line","document","querySelector","display","wrapper","getBoundingClientRect","bottom","cursorCoords","top","getQueryDialog","keyName","extra","getOption","cmd","keyMap","execCommand","operation","callback","cursor","find","Pos","lastLine","firstLine","setSelection","from","scrollIntoView","phrase","getReplaceQueryDialog","getReplacementQueryDialog","getDoReplaceConfirm","replaceAll","getRange","i","all","dialogText","advance","start","doReplace","commands","findPersistent","findPersistentNext","findPersistentPrev","findPrev"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~c2d241ef.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (q instanceof RegExp && q.source == \"x^\") q = null\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, getQueryDialog(cm), \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n\n  function getQueryDialog(cm)  {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Search:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplaceQueryDialog(cm) {\n    return ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplacementQueryDialog(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"With:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  }\n  function getDoReplaceConfirm(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Replace?\") + '</span> <button>' + cm.phrase(\"Yes\") + '</button> <button>' + cm.phrase(\"No\") + '</button> <button>' + cm.phrase(\"All\") + '</button> <button>' + cm.phrase(\"Stop\") + '</button> ';\n  }\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? cm.phrase(\"Replace all:\") : cm.phrase(\"Replace:\")) + '</span>';\n    dialog(cm, dialogText + getReplaceQueryDialog(cm), dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, getReplacementQueryDialog(cm), cm.phrase(\"Replace with:\"), \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase(\"Replace?\"),\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n"],"sourceRoot":""}