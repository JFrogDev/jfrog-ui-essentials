{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/normalize-fields.js"],"names":["exports","__esModule","default","_startcase","_interopRequireDefault","__webpack_require__","_inspect","_object","_constants","obj","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","processField","field","isString","label","isFunction","formatter","isObject","normalizeFields","origFields","items","fields","isArray","f","push","sample","k","IGNORED_FIELD_KEYS","memo","_default"],"mappings":"yMAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAAC,EAAwCC,EAAQ,SAEhDC,EAAeD,EAAQ,QAEvBE,EAAcF,EAAQ,QAEtBG,EAAiBH,EAAQ,QAEzB,SAAAD,EAAAK,GAAsC,OAAAA,KAAAR,WAAAQ,EAAA,CAAuCP,QAAAO,GAE7E,SAAAC,EAAAC,GAAgC,QAAAC,EAAA,EAAgBA,EAAAC,UAAAC,OAAsBF,IAAA,CAAO,IAAAG,EAAA,MAAAF,UAAAD,GAAAC,UAAAD,GAAA,GAAuDI,EAAAC,OAAAC,KAAAH,GAAmC,oBAAAE,OAAAE,wBAA0DH,IAAAI,OAAAH,OAAAE,sBAAAJ,GAAAM,OAAA,SAAAC,GAAsF,OAAAL,OAAAM,yBAAAR,EAAAO,GAAAE,eAAuER,EAAAS,QAAA,SAAAC,GAAiCC,EAAAhB,EAAAe,EAAAX,EAAAW,MAAiD,OAAAf,EAEhd,SAAAgB,EAAAlB,EAAAiB,EAAAE,GAAmM,OAAxJF,KAAAjB,EAAkBQ,OAAAY,eAAApB,EAAAiB,EAAA,CAAkCE,QAAAJ,YAAA,EAAAM,cAAA,EAAAC,UAAA,IAAgFtB,EAAAiB,GAAAE,EAAoBnB,EAGnM,IAAAuB,EAAA,SAAAN,EAAAE,GACA,IAAAK,EAAA,KA0BA,OAxBA,EAAA3B,EAAA4B,UAAAN,GAEAK,EAAA,CACAP,MACAS,MAAAP,IAEG,EAAAtB,EAAA8B,YAAAR,GAEHK,EAAA,CACAP,MACAW,UAAAT,IAEG,EAAAtB,EAAAgC,UAAAV,IACHK,EAAAvB,EAAA,GAA4BkB,GAC5BK,EAAAP,IAAAO,EAAAP,SACG,IAAAE,IAIHK,EAAA,CACAP,QAIAO,GAKAM,EAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,GAqCA,IAnCA,EAAApC,EAAAqC,SAAAH,GAEAA,EAAAnB,OAAA,SAAAuB,GACA,OAAAA,IACKnB,QAAA,SAAAmB,GACL,MAAAtC,EAAA4B,UAAAU,GACAF,EAAAG,KAAA,CACAnB,IAAAkB,EACAT,OAAA,EAAAhC,EAAAD,SAAA0C,UAEO,MAAAtC,EAAAgC,UAAAM,MAAAlB,MAAA,EAAApB,EAAA4B,UAAAU,EAAAlB,KAEPgB,EAAAG,KAAAnC,EAAA,GAAoCkC,SAC7B,MAAAtC,EAAAgC,UAAAM,IAAA,OAAArC,EAAAW,MAAA0B,GAAA9B,OAAA,CAEP,IAAAY,GAAA,EAAAnB,EAAAW,MAAA0B,GAAA,GACAX,EAAAD,EAAAN,EAAAkB,EAAAlB,IAEAO,GACAS,EAAAG,KAAAZ,MAIGO,IAAA,EAAAlC,EAAAgC,UAAAE,KAAA,EAAAjC,EAAAW,MAAAsB,GAAA1B,OAAA,IAEH,EAAAP,EAAAW,MAAAsB,GAAAf,QAAA,SAAAC,GACA,IAAAO,EAAAD,EAAAN,EAAAc,EAAAd,IAEAO,GACAS,EAAAG,KAAAZ,KAMA,IAAAS,EAAA5B,SAAA,EAAAR,EAAAqC,SAAAF,MAAA3B,OAAA,GACA,IAAAgC,EAAAL,EAAA,IACA,EAAAlC,EAAAW,MAAA4B,GAAArB,QAAA,SAAAsB,GACAvC,EAAAwC,mBAAAD,IACAL,EAAAG,KAAA,CACAnB,IAAAqB,EACAZ,OAAA,EAAAhC,EAAAD,SAAA6C,OAOA,IAAAE,EAAA,GACA,OAAAP,EAAArB,OAAA,SAAAuB,GACA,OAAAK,EAAAL,EAAAlB,OACAuB,EAAAL,EAAAlB,MAAA,EACAkB,EAAAT,OAAA,EAAA7B,EAAA4B,UAAAU,EAAAT,OAAAS,EAAAT,OAAA,EAAAhC,EAAAD,SAAA0C,EAAAlB,MACA,MAOAwB,EAAAX,EACAvC,EAAAE,QAAAgD","file":"jfrog-ui-essentials.umd.min.vendors-chunks~641b105c.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _startcase = _interopRequireDefault(require(\"../../../utils/startcase\"));\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Private function to massage field entry into common object format\nvar processField = function processField(key, value) {\n  var field = null;\n\n  if ((0, _inspect.isString)(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if ((0, _inspect.isFunction)(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if ((0, _inspect.isObject)(value)) {\n    field = _objectSpread({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if ((0, _inspect.isArray)(origFields)) {\n    // Normalize array Form\n    origFields.filter(function (f) {\n      return f;\n    }).forEach(function (f) {\n      if ((0, _inspect.isString)(f)) {\n        fields.push({\n          key: f,\n          label: (0, _startcase.default)(f)\n        });\n      } else if ((0, _inspect.isObject)(f) && f.key && (0, _inspect.isString)(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(_objectSpread({}, f));\n      } else if ((0, _inspect.isObject)(f) && (0, _object.keys)(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = (0, _object.keys)(f)[0];\n        var field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && (0, _inspect.isObject)(origFields) && (0, _object.keys)(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    (0, _object.keys)(origFields).forEach(function (key) {\n      var field = processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && (0, _inspect.isArray)(items) && items.length > 0) {\n    var sample = items[0];\n    (0, _object.keys)(sample).forEach(function (k) {\n      if (!_constants.IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: (0, _startcase.default)(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = (0, _inspect.isString)(f.label) ? f.label : (0, _startcase.default)(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar _default = normalizeFields;\nexports.default = _default;"],"sourceRoot":""}