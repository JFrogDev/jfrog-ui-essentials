{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/pagination-nav/pagination-nav.js"],"names":["exports","__esModule","default","_vue","_interopRequireDefault","__webpack_require__","_looseEqual","_toString","_warn","_dom","_env","_inspect","_router","_pagination","obj","props","numberOfPages","type","Number","String","validator","value","num","parseInt","isNaN","baseUrl","useRouter","Boolean","linkGen","Function","pageGen","pages","Array","noPageDetect","activeClass","exact","exactActiveClass","noPrefetch","sanitizeNumPages","_default","extend","name","mixins","computed","isNav","computedValue","val","this","watch","newVal","oldVal","_this","$nextTick","setNumPages","_this2","created","_this3","guessCurrentPage","mounted","_this4","$router","$watch","to","from","requestAF","methods","isArray","length","localNumPages","onClick","pageNum","evt","_this5","currentPage","$emit","target","currentTarget","blur","e","getPageInfo","isUndefined","link","concat","path","text","info","isObject","_link","makePage","isFunction","makeLink","linkProps","rel","disabled","append","replace","href","resolveLink","arguments","undefined","document","createElement","computeHref","body","appendChild","_link2","pathname","hash","search","removeChild","query","parseQuery","parentNode","resolveRoute","route","resolve","$route","guess","isBrowser","currRoute","loc","window","location","currLink","page"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~14187d6c.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"../../utils/vue\"));\n\nvar _looseEqual = _interopRequireDefault(require(\"../../utils/loose-equal\"));\n\nvar _toString = _interopRequireDefault(require(\"../../utils/to-string\"));\n\nvar _warn = _interopRequireDefault(require(\"../../utils/warn\"));\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _env = require(\"../../utils/env\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _router = require(\"../../utils/router\");\n\nvar _pagination = _interopRequireDefault(require(\"../../mixins/pagination\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Props object\nvar props = {\n  // pagination-nav specific props\n  numberOfPages: {\n    type: [Number, String],\n    default: 1,\n    validator: function validator(value) {\n      var num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (isNaN(num) || num < 1) {\n        (0, _warn.default)('b-pagination: prop \"number-of-pages\" must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n  },\n  baseUrl: {\n    type: String,\n    default: '/'\n  },\n  useRouter: {\n    type: Boolean,\n    default: false\n  },\n  linkGen: {\n    type: Function,\n    default: null\n  },\n  pageGen: {\n    type: Function,\n    default: null\n  },\n  pages: {\n    // Optional array of page links\n    type: Array,\n    default: null\n  },\n  noPageDetect: {\n    // Disable auto page number detection if true\n    type: Boolean,\n    default: false\n  },\n  // router-link specific props\n  activeClass: {\n    type: String // default: undefined\n\n  },\n  exact: {\n    type: Boolean,\n    default: false\n  },\n  exactActiveClass: {\n    type: String // default: undefined\n\n  },\n  // nuxt-link specific prop(s)\n  noPrefetch: {\n    type: Boolean,\n    default: false\n  } // TODO: move this to an instance method in pagination mixin\n\n};\n\nvar sanitizeNumPages = function sanitizeNumPages(value) {\n  var num = parseInt(value, 10) || 1;\n  return num < 1 ? 1 : num;\n}; // Our render function is brought in via the pagination mixin\n// @vue/component\n\n\nvar _default = _vue.default.extend({\n  name: 'BPaginationNav',\n  mixins: [_pagination.default],\n  props: props,\n  computed: {\n    // Used by render function to trigger wrapping in '<nav>' element\n    isNav: function isNav() {\n      return true;\n    },\n    computedValue: function computedValue() {\n      // Returns the value prop as a number or `null` if undefined or < 1\n      var val = parseInt(this.value, 10);\n      return isNaN(val) || val < 1 ? null : val;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages(newVal, oldVal) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.setNumPages();\n      });\n    },\n    pages: function pages(newVal, oldVal) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.setNumPages();\n      });\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    this.setNumPages(); // For SSR, assuming a page URL can be detected\n\n    this.$nextTick(function () {\n      _this3.guessCurrentPage();\n    });\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    if (this.$router) {\n      // We only add the watcher if vue router is detected\n      this.$watch('$route', function (to, from) {\n        _this4.$nextTick(function () {\n          (0, _dom.requestAF)(function () {\n            _this4.guessCurrentPage();\n          });\n        });\n      });\n    }\n  },\n  methods: {\n    setNumPages: function setNumPages() {\n      if ((0, _inspect.isArray)(this.pages) && this.pages.length > 0) {\n        this.localNumPages = this.pages.length;\n      } else {\n        this.localNumPages = sanitizeNumPages(this.numberOfPages);\n      }\n    },\n    onClick: function onClick(pageNum, evt) {\n      var _this5 = this;\n\n      // Dont do anything if clicking the current active page\n      if (pageNum === this.currentPage) {\n        return;\n      }\n\n      (0, _dom.requestAF)(function () {\n        // Update the v-model\n        // Done in in requestAF() to allow browser to complete the\n        // native browser click handling of a link\n        _this5.currentPage = pageNum;\n\n        _this5.$emit('change', pageNum);\n      });\n      this.$nextTick(function () {\n        // Done in a nextTick() to ensure rendering complete\n        try {\n          // Emulate native link click page reloading behaviour by blurring the\n          // paginator and returning focus to the document\n          var target = evt.currentTarget || evt.target;\n          target.blur();\n        } catch (e) {}\n      });\n    },\n    getPageInfo: function getPageInfo(pageNum) {\n      if (!(0, _inspect.isArray)(this.pages) || this.pages.length === 0 || (0, _inspect.isUndefined)(this.pages[pageNum - 1])) {\n        var link = \"\".concat(this.baseUrl).concat(pageNum);\n        return {\n          link: this.useRouter ? {\n            path: link\n          } : link,\n          text: (0, _toString.default)(pageNum)\n        };\n      }\n\n      var info = this.pages[pageNum - 1];\n\n      if ((0, _inspect.isObject)(info)) {\n        var _link = info.link;\n        return {\n          // Normalize link for router use\n          link: (0, _inspect.isObject)(_link) ? _link : this.useRouter ? {\n            path: _link\n          } : _link,\n          // Make sure text has a value\n          text: (0, _toString.default)(info.text || pageNum)\n        };\n      } else {\n        return {\n          link: (0, _toString.default)(info),\n          text: (0, _toString.default)(pageNum)\n        };\n      }\n    },\n    makePage: function makePage(pageNum) {\n      var info = this.getPageInfo(pageNum);\n\n      if (this.pageGen && (0, _inspect.isFunction)(this.pageGen)) {\n        return this.pageGen(pageNum, info);\n      }\n\n      return info.text;\n    },\n    makeLink: function makeLink(pageNum) {\n      var info = this.getPageInfo(pageNum);\n\n      if (this.linkGen && (0, _inspect.isFunction)(this.linkGen)) {\n        return this.linkGen(pageNum, info);\n      }\n\n      return info.link;\n    },\n    linkProps: function linkProps(pageNum) {\n      var link = this.makeLink(pageNum);\n      var props = {\n        target: this.target || null,\n        rel: this.rel || null,\n        disabled: this.disabled,\n        // The following props are only used if BLink detects router\n        exact: this.exact,\n        activeClass: this.activeClass,\n        exactActiveClass: this.exactActiveClass,\n        append: this.append,\n        replace: this.replace,\n        // nuxt-link specific prop\n        noPrefetch: this.noPrefetch\n      };\n\n      if (this.useRouter || (0, _inspect.isObject)(link)) {\n        props.to = link;\n      } else {\n        props.href = link;\n      }\n\n      return props;\n    },\n    resolveLink: function resolveLink() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // Given a to (or href string), convert to normalized route-like structure\n      // Works only client side!!\n      var link;\n\n      try {\n        // Convert the `to` to a HREF via a temporary `a` tag\n        link = document.createElement('a');\n        link.href = (0, _router.computeHref)({\n          to: to\n        }, 'a', '/', '/'); // We need to add the anchor to the document to make sure the\n        // `pathname` is correctly detected in any browser (i.e. IE)\n\n        document.body.appendChild(link); // Once href is assigned, the link will be normalized to the full URL bits\n\n        var _link2 = link,\n            pathname = _link2.pathname,\n            hash = _link2.hash,\n            search = _link2.search; // Remove link from document\n\n        document.body.removeChild(link); // Return the location in a route-like object\n\n        return {\n          path: pathname,\n          hash: hash,\n          query: (0, _router.parseQuery)(search)\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        try {\n          link && link.parentNode && link.parentNode.removeChild(link);\n        } catch (e) {}\n        /* istanbul ignore next */\n\n\n        return {};\n      }\n    },\n    resolveRoute: function resolveRoute() {\n      var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      // Given a to (or href string), convert to normalized route location structure\n      // works only when router available!!\n      try {\n        var route = this.$router.resolve(to, this.$route).route;\n        return {\n          path: route.path,\n          hash: route.hash,\n          query: route.query\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    guessCurrentPage: function guessCurrentPage() {\n      var guess = this.computedValue;\n      var $router = this.$router;\n      var $route = this.$route; // This section only occurs if we are client side, or server-side with $router\n\n      /* istanbul ignore else */\n\n      if (!this.noPageDetect && !guess && (_env.isBrowser || !_env.isBrowser && $router)) {\n        // Current route (if router available)\n        var currRoute = $router && $route ? {\n          path: $route.path,\n          hash: $route.hash,\n          query: $route.query\n        } : {}; // Current page full HREF (if client side). Can't be done as a computed prop!\n\n        var loc = _env.isBrowser ? window.location || document.location : null;\n        var currLink = loc ? {\n          path: loc.pathname,\n          hash: loc.hash,\n          query: (0, _router.parseQuery)(loc.search)\n        } : {}; // Loop through the possible pages looking for a match until found\n\n        for (var page = 1; !guess && page <= this.localNumPages; page++) {\n          var to = this.makeLink(page);\n\n          if ($router && ((0, _inspect.isObject)(to) || this.useRouter)) {\n            // Resolve the page via the $router\n            guess = (0, _looseEqual.default)(this.resolveRoute(to), currRoute) ? page : null;\n          } else if (_env.isBrowser) {\n            // If no $router available (or !this.useRouter when `to` is a string)\n            // we compare using parsed URIs\n            guess = (0, _looseEqual.default)(this.resolveLink(to), currLink) ? page : null;\n          } else {\n            // probably SSR, but no $router so we can't guess, so lets break out of\n            // the loop early\n\n            /* istanbul ignore next */\n            guess = -1;\n          }\n        }\n      } // We set currentPage to 0 to trigger an $emit('input', null)\n      // As the default for this.currentPage is -1 when no value is specified\n      // And valid page numbers are greater than 0\n\n\n      this.currentPage = guess > 0 ? guess : 0;\n    }\n  }\n});\n\nexports.default = _default;"],"sourceRoot":""}