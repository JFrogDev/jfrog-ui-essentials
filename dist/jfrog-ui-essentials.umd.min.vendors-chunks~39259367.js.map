{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/core-js/modules/es6.regexp.search.js","webpack://jfrog-ui-essentials/./node_modules/core-js/modules/es6.regexp.replace.js"],"names":["anObject","__webpack_require__","sameValue","regExpExec","defined","SEARCH","$search","maybeCallNative","regexp","O","this","fn","undefined","call","RegExp","String","res","done","value","rx","S","previousLastIndex","lastIndex","result","index","toObject","toLength","toInteger","advanceStringIndex","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","REPLACE","$replace","searchValue","replaceValue","functionalReplace","global","fullUnicode","unicode","results","push","matchStr","accumulatedResult","nextSourcePosition","i","length","matched","position","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","getSubstitution","slice","str","tailPos","m","symbols","match","ch","capture","charAt","n","f"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~39259367.js","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar sameValue = require('./_same-value');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n"],"sourceRoot":""}