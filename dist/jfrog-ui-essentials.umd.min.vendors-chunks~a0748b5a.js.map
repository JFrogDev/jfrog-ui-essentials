{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/codemirror/addon/selection/mark-selection.js"],"names":["mod","__webpack_require__","CodeMirror","onCursorActivity","cm","state","markedSelection","operation","update","onChange","length","clear","defineOption","val","old","prev","Init","markedSelectionStyle","reset","on","off","CHUNK_SIZE","Pos","cmp","cmpPos","coverRange","from","to","addAt","array","cls","line","start","endLine","atEnd","end","mark","markText","className","push","splice","i","ranges","listSelections","somethingSelected","getCursor","coverStart","find","coverEnd","shift","pop"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~a0748b5a.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Because sometimes you need to mark the selected *text*.\n//\n// Adds an option 'styleSelectedText' which, when enabled, gives\n// selected text the CSS class given as option value, or\n// \"CodeMirror-selectedtext\" when the value is not a string.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"styleSelectedText\", false, function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.state.markedSelection = [];\n      cm.state.markedSelectionStyle = typeof val == \"string\" ? val : \"CodeMirror-selectedtext\";\n      reset(cm);\n      cm.on(\"cursorActivity\", onCursorActivity);\n      cm.on(\"change\", onChange);\n    } else if (!val && prev) {\n      cm.off(\"cursorActivity\", onCursorActivity);\n      cm.off(\"change\", onChange);\n      clear(cm);\n      cm.state.markedSelection = cm.state.markedSelectionStyle = null;\n    }\n  });\n\n  function onCursorActivity(cm) {\n    if (cm.state.markedSelection)\n      cm.operation(function() { update(cm); });\n  }\n\n  function onChange(cm) {\n    if (cm.state.markedSelection && cm.state.markedSelection.length)\n      cm.operation(function() { clear(cm); });\n  }\n\n  var CHUNK_SIZE = 8;\n  var Pos = CodeMirror.Pos;\n  var cmp = CodeMirror.cmpPos;\n\n  function coverRange(cm, from, to, addAt) {\n    if (cmp(from, to) == 0) return;\n    var array = cm.state.markedSelection;\n    var cls = cm.state.markedSelectionStyle;\n    for (var line = from.line;;) {\n      var start = line == from.line ? from : Pos(line, 0);\n      var endLine = line + CHUNK_SIZE, atEnd = endLine >= to.line;\n      var end = atEnd ? to : Pos(endLine, 0);\n      var mark = cm.markText(start, end, {className: cls});\n      if (addAt == null) array.push(mark);\n      else array.splice(addAt++, 0, mark);\n      if (atEnd) break;\n      line = endLine;\n    }\n  }\n\n  function clear(cm) {\n    var array = cm.state.markedSelection;\n    for (var i = 0; i < array.length; ++i) array[i].clear();\n    array.length = 0;\n  }\n\n  function reset(cm) {\n    clear(cm);\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++)\n      coverRange(cm, ranges[i].from(), ranges[i].to());\n  }\n\n  function update(cm) {\n    if (!cm.somethingSelected()) return clear(cm);\n    if (cm.listSelections().length > 1) return reset(cm);\n\n    var from = cm.getCursor(\"start\"), to = cm.getCursor(\"end\");\n\n    var array = cm.state.markedSelection;\n    if (!array.length) return coverRange(cm, from, to);\n\n    var coverStart = array[0].find(), coverEnd = array[array.length - 1].find();\n    if (!coverStart || !coverEnd || to.line - from.line <= CHUNK_SIZE ||\n        cmp(from, coverEnd.to) >= 0 || cmp(to, coverStart.from) <= 0)\n      return reset(cm);\n\n    while (cmp(from, coverStart.from) > 0) {\n      array.shift().clear();\n      coverStart = array[0].find();\n    }\n    if (cmp(from, coverStart.from) < 0) {\n      if (coverStart.to.line - from.line < CHUNK_SIZE) {\n        array.shift().clear();\n        coverRange(cm, from, coverStart.to, 0);\n      } else {\n        coverRange(cm, from, coverStart.from, 0);\n      }\n    }\n\n    while (cmp(to, coverEnd.to) < 0) {\n      array.pop().clear();\n      coverEnd = array[array.length - 1].find();\n    }\n    if (cmp(to, coverEnd.to) > 0) {\n      if (to.line - coverEnd.from.line < CHUNK_SIZE) {\n        array.pop().clear();\n        coverRange(cm, coverEnd.from, to);\n      } else {\n        coverRange(cm, coverEnd.to, to);\n      }\n    }\n  }\n});\n"],"sourceRoot":""}