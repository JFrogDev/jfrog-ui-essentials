{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/deep-diff/index.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","root","factory","deepDiff","call","exports","__webpack_require__","module","undefined","this","validKinds","inherits","ctor","superCtor","super_","prototype","Object","create","constructor","value","enumerable","writable","configurable","Diff","kind","path","defineProperty","length","DiffEdit","origin","DiffNew","DiffDeleted","DiffArray","index","item","arrayRemove","arr","from","to","rest","slice","push","apply","realTypeOf","subject","type","Math","Array","isArray","toString","test","hashThisString","string","hash","i","char","charCodeAt","getOrderIndependentHash","object","accum","forEach","arrayString","key","hasOwnProperty","keyValueString","stringToHash","lhs","rhs","changes","prefilter","stack","orderIndependent","currentPath","normalize","alt","j","k","other","ltype","rtype","ldefined","getOwnPropertyDescriptor","rdefined","sort","a","b","akeys","keys","pkeys","indexOf","isNaN","observableDiff","observer","orderIndependentDeepDiff","accumulateDiff","difference","accumulateOrderIndependentDiff","applyArrayChange","change","it","u","applyChange","target","source","last","revertArrayChange","revertChange","applyDiff","filter","onChange","defineProperties","diff","orderIndependentDiff","orderIndependentObservableDiff","orderIndepHash","isConflict","$conflict","DeepDiff"],"mappings":"4LAAA,IAAAA,GAAC,SAAAC,EAAAC,GACD,IAAAC,EAAAD,EAAAD,GAIMD,EAAA,WACN,OAAAG,GACOC,KAAAC,EAAAC,EAAAD,EAAAE,QAAAC,IAAAR,IAAAO,EAAAF,QAAAL,IAPN,CAsBAS,KAAA,SAAAR,GACD,IAAAS,EAAA,kBAGA,SAAAC,EAAAC,EAAAC,GACAD,EAAAE,OAAAD,EACAD,EAAAG,UAAAC,OAAAC,OAAAJ,EAAAE,UAAA,CACAG,YAAA,CACAC,MAAAP,EACAQ,YAAA,EACAC,UAAA,EACAC,cAAA,KAKA,SAAAC,EAAAC,EAAAC,GACAT,OAAAU,eAAAjB,KAAA,QACAU,MAAAK,EACAJ,YAAA,IAEAK,KAAAE,QACAX,OAAAU,eAAAjB,KAAA,QACAU,MAAAM,EACAL,YAAA,IAKA,SAAAQ,EAAAH,EAAAI,EAAAV,GACAS,EAAAd,OAAAV,KAAAK,KAAA,IAAAgB,GACAT,OAAAU,eAAAjB,KAAA,OACAU,MAAAU,EACAT,YAAA,IAEAJ,OAAAU,eAAAjB,KAAA,OACAU,QACAC,YAAA,IAKA,SAAAU,EAAAL,EAAAN,GACAW,EAAAhB,OAAAV,KAAAK,KAAA,IAAAgB,GACAT,OAAAU,eAAAjB,KAAA,OACAU,QACAC,YAAA,IAKA,SAAAW,EAAAN,EAAAN,GACAY,EAAAjB,OAAAV,KAAAK,KAAA,IAAAgB,GACAT,OAAAU,eAAAjB,KAAA,OACAU,QACAC,YAAA,IAKA,SAAAY,EAAAP,EAAAQ,EAAAC,GACAF,EAAAlB,OAAAV,KAAAK,KAAA,IAAAgB,GACAT,OAAAU,eAAAjB,KAAA,SACAU,MAAAc,EACAb,YAAA,IAEAJ,OAAAU,eAAAjB,KAAA,QACAU,MAAAe,EACAd,YAAA,IAKA,SAAAe,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAI,OAAAF,GAAAD,GAAA,GAAAD,EAAAT,QAGA,OAFAS,EAAAT,OAAAU,EAAA,EAAAD,EAAAT,OAAAU,IACAD,EAAAK,KAAAC,MAAAN,EAAAG,GACAH,EAGA,SAAAO,EAAAC,GACA,IAAAC,SAAAD,EACA,iBAAAC,EACAA,EAGAD,IAAAE,KACA,OACK,OAAAF,EACL,OACKG,MAAAC,QAAAJ,GACL,QACK,kBAAA5B,OAAAD,UAAAkC,SAAA7C,KAAAwC,GACL,OACK,oBAAAA,EAAAK,UAAA,UAAAC,KAAAN,EAAAK,YACL,SAEA,SAIA,SAAAE,EAAAC,GACA,IAAAC,EAAA,EACA,OAAAD,EAAAzB,OAA8B,OAAA0B,EAC9B,QAAAC,EAAA,EAAmBA,EAAAF,EAAAzB,OAAmB2B,IAAA,CACtC,IAAAC,EAAAH,EAAAI,WAAAF,GACAD,MAAA,GAAAA,EAAAE,EACAF,KAEA,OAAAA,EAKA,SAAAI,EAAAC,GACA,IAAAC,EAAA,EACAd,EAAAF,EAAAe,GAEA,aAAAb,EAAA,CACAa,EAAAE,QAAA,SAAA1B,GAEAyB,GAAAF,EAAAvB,KAGA,IAAA2B,EAAA,uBAAAF,EAAA,IACA,OAAAA,EAAAR,EAAAU,GAGA,cAAAhB,EAAA,CACA,QAAAiB,KAAAJ,EACA,GAAAA,EAAAK,eAAAD,GAAA,CACA,IAAAE,EAAA,wBAAAF,EAAA,iBAAAL,EAAAC,EAAAI,IAAA,IACAH,GAAAR,EAAAa,GAIA,OAAAL,EAIA,IAAAM,EAAA,WAAApB,EAAA,aAA8Ca,EAAA,IAC9C,OAAAC,EAAAR,EAAAc,GAGA,SAAA9D,EAAA+D,EAAAC,EAAAC,EAAAC,EAAA5C,EAAAqC,EAAAQ,EAAAC,GACAH,KAAA,GACA3C,KAAA,GACA6C,KAAA,GACA,IAAAE,EAAA/C,EAAAe,MAAA,GACA,wBAAAsB,GAAA,OAAAA,EAAA,CACA,GAAAO,EAAA,CACA,0BAAAA,EAAAG,EAAAV,GACA,OACS,wBACT,GAAAO,yBAAAG,EAAAV,GACA,OAEA,GAAAO,EAAAI,UAAA,CACA,IAAAC,EAAAL,EAAAI,UAAAD,EAAAV,EAAAI,EAAAC,GACAO,IACAR,EAAAQ,EAAA,GACAP,EAAAO,EAAA,MAKAF,EAAA/B,KAAAqB,GAIA,WAAAnB,EAAAuB,IAAA,WAAAvB,EAAAwB,KACAD,IAAAjB,WACAkB,IAAAlB,YAGA,IAEAK,EAAAqB,EAAAC,EAAAC,EAFAC,SAAAZ,EACAa,SAAAZ,EAGAa,EAAA,cAAAF,GACAR,KAAA3C,OAAA,GAAA2C,IAAA3C,OAAA,GAAAuC,KACAlD,OAAAiE,yBAAAX,IAAA3C,OAAA,GAAAuC,IAAAJ,GACAoB,EAAA,cAAAH,GACAT,KAAA3C,OAAA,GAAA2C,IAAA3C,OAAA,GAAAwC,KACAnD,OAAAiE,yBAAAX,IAAA3C,OAAA,GAAAwC,IAAAL,GAEA,IAAAkB,GAAAE,EACAd,EAAA3B,KAAA,IAAAX,EAAA0C,EAAAL,SACK,IAAAe,GAAAF,EACLZ,EAAA3B,KAAA,IAAAV,EAAAyC,EAAAN,SACK,GAAAvB,EAAAuB,KAAAvB,EAAAwB,GACLC,EAAA3B,KAAA,IAAAb,EAAA4C,EAAAN,EAAAC,SACK,YAAAxB,EAAAuB,MAAAC,IAAA,EACLC,EAAA3B,KAAA,IAAAb,EAAA4C,EAAAN,EAAAC,SACK,cAAAW,GAAA,OAAAZ,GAAA,OAAAC,EAAA,CACL,IAAAb,EAAAgB,EAAA3C,OAAA,EAAgC2B,GAAA,IAAQA,EACxC,GAAAgB,EAAAhB,GAAAY,QAAA,CACAW,GAAA,EACA,MAGA,GAAAA,EA6COX,IAAAC,GAEPC,EAAA3B,KAAA,IAAAb,EAAA4C,EAAAN,EAAAC,QA/CA,CAEA,GADAG,EAAA7B,KAAA,CAAoByB,MAAAC,QACpBpB,MAAAC,QAAAkB,GAAA,CAEAK,IACAL,EAAAiB,KAAA,SAAAC,EAAAC,GACA,OAAA5B,EAAA2B,GAAA3B,EAAA4B,KAGAlB,EAAAgB,KAAA,SAAAC,EAAAC,GACA,OAAA5B,EAAA2B,GAAA3B,EAAA4B,MAGA/B,EAAAa,EAAAxC,OAAA,EACAgD,EAAAT,EAAAvC,OAAA,EACA,MAAA2B,EAAAqB,EACAP,EAAA3B,KAAA,IAAAT,EAAAwC,EAAAlB,EAAA,IAAAxB,OAAAtB,EAAA2D,EAAAb,QAEA,MAAAqB,EAAArB,EACAc,EAAA3B,KAAA,IAAAT,EAAAwC,EAAAG,EAAA,IAAA5C,OAAAvB,EAAA0D,EAAAS,QAEA,KAAgBrB,GAAA,IAAQA,EACxBnD,EAAA+D,EAAAZ,GAAAa,EAAAb,GAAAc,EAAAC,EAAAG,EAAAlB,EAAAgB,EAAAC,OAES,CACT,IAAAe,EAAAtE,OAAAuE,KAAArB,GACAsB,EAAAxE,OAAAuE,KAAApB,GACA,IAAAb,EAAA,EAAqBA,EAAAgC,EAAA3D,SAAkB2B,EACvCsB,EAAAU,EAAAhC,GACAuB,EAAAW,EAAAC,QAAAb,GACAC,GAAA,GACA1E,EAAA+D,EAAAU,GAAAT,EAAAS,GAAAR,EAAAC,EAAAG,EAAAI,EAAAN,EAAAC,GACAiB,EAAAX,GAAA,MAEA1E,EAAA+D,EAAAU,QAAApE,EAAA4D,EAAAC,EAAAG,EAAAI,EAAAN,EAAAC,GAGA,IAAAjB,EAAA,EAAqBA,EAAAkC,EAAA7D,SAAkB2B,EACvCsB,EAAAY,EAAAlC,GACAsB,GACAzE,OAAAK,EAAA2D,EAAAS,GAAAR,EAAAC,EAAAG,EAAAI,EAAAN,EAAAC,GAIAD,EAAA3C,OAAA2C,EAAA3C,OAAA,QAKKuC,IAAAC,IACL,WAAAW,GAAAY,MAAAxB,IAAAwB,MAAAvB,IACAC,EAAA3B,KAAA,IAAAb,EAAA4C,EAAAN,EAAAC,KAKA,SAAAwB,EAAAzB,EAAAC,EAAAyB,EAAAvB,EAAAE,GACA,IAAAH,EAAA,GAEA,GADAjE,EAAA+D,EAAAC,EAAAC,EAAAC,EAAA,eAAAE,GACAqB,EACA,QAAAtC,EAAA,EAAqBA,EAAAc,EAAAzC,SAAoB2B,EACzCsC,EAAAxB,EAAAd,IAGA,OAAAc,EAGA,SAAAyB,EAAA3B,EAAAC,EAAAC,EAAAC,EAAA5C,EAAAqC,EAAAQ,GACA,OAAAnE,EAAA+D,EAAAC,EAAAC,EAAAC,EAAA5C,EAAAqC,EAAAQ,GAAA,GAGA,SAAAwB,EAAA5B,EAAAC,EAAAE,EAAAV,GACA,IAAAiC,EAAA,EACA,SAAAG,GACAA,GACApC,EAAAlB,KAAAsD,SAEOvF,EACP4D,EAAAuB,EAAAzB,EAAAC,EAAAyB,EAAAvB,GACA,WAAAD,EAAA,OAAAA,OAAA5D,GAGA,SAAAwF,EAAA9B,EAAAC,EAAAE,EAAAV,GACA,IAAAiC,EAAA,EACA,SAAAG,GACAA,GACApC,EAAAlB,KAAAsD,SAEOvF,EACP4D,EAAAuB,EAAAzB,EAAAC,EAAAyB,EAAAvB,GAAA,GACA,WAAAD,EAAA,OAAAA,OAAA5D,GAGA,SAAAyF,EAAA7D,EAAAH,EAAAiE,GACA,GAAAA,EAAAzE,MAAAyE,EAAAzE,KAAAE,OAAA,CACA,IACA2B,EADA6C,EAAA/D,EAAAH,GACAmE,EAAAF,EAAAzE,KAAAE,OAAA,EACA,IAAA2B,EAAA,EAAiBA,EAAA8C,EAAO9C,IACxB6C,IAAAD,EAAAzE,KAAA6B,IAEA,OAAA4C,EAAA1E,MACA,QACAyE,EAAAE,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,eACAiE,EAAAD,EAAAzE,KAAA6B,IACA,MACA,QACA,QACA6C,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAA/B,IACA,YAGA,OAAA+B,EAAA1E,MACA,QACAyE,EAAA7D,EAAAH,GAAAiE,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,QACAE,EAAAD,EAAAC,EAAAH,GACA,MACA,QACA,QACAG,EAAAH,GAAAiE,EAAA/B,IACA,MAGA,OAAA/B,EAGA,SAAAiE,EAAAC,EAAAC,EAAAL,GAIA,GAHA,qBAAAA,GAAAK,IAAA7F,EAAA+E,QAAAc,EAAA/E,QACA0E,EAAAK,GAEAD,GAAAJ,KAAA1E,KAAA,CACA,IAAA2E,EAAAG,EACAhD,GAAA,EACAkD,EAAAN,EAAAzE,KAAAyE,EAAAzE,KAAAE,OAAA,IACA,QAAA2B,EAAAkD,EACA,qBAAAL,EAAAD,EAAAzE,KAAA6B,MACA6C,EAAAD,EAAAzE,KAAA6B,IAAA,qBAAA4C,EAAAzE,KAAA6B,EAAA,sBAAA4C,EAAAzE,KAAA6B,EAAA,UAEA6C,IAAAD,EAAAzE,KAAA6B,IAEA,OAAA4C,EAAA1E,MACA,QACA0E,EAAAzE,MAAA,qBAAA0E,EAAAD,EAAAzE,KAAA6B,MACA6C,EAAAD,EAAAzE,KAAA6B,IAAA,IAEA2C,EAAAC,EAAAzE,KAAA0E,EAAAD,EAAAzE,KAAA6B,IAAA6C,EAAAD,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,eACAiE,EAAAD,EAAAzE,KAAA6B,IACA,MACA,QACA,QACA6C,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAA/B,IACA,QAKA,SAAAsC,EAAArE,EAAAH,EAAAiE,GACA,GAAAA,EAAAzE,MAAAyE,EAAAzE,KAAAE,OAAA,CAEA,IACA2B,EADA6C,EAAA/D,EAAAH,GACAmE,EAAAF,EAAAzE,KAAAE,OAAA,EACA,IAAA2B,EAAA,EAAiBA,EAAA8C,EAAO9C,IACxB6C,IAAAD,EAAAzE,KAAA6B,IAEA,OAAA4C,EAAA1E,MACA,QACAiF,EAAAN,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,QACAiE,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAhC,IACA,MACA,QACAiC,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAhC,IACA,MACA,eACAiC,EAAAD,EAAAzE,KAAA6B,IACA,YAIA,OAAA4C,EAAA1E,MACA,QACAiF,EAAArE,EAAAH,GAAAiE,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,QACAE,EAAAH,GAAAiE,EAAAhC,IACA,MACA,QACA9B,EAAAH,GAAAiE,EAAAhC,IACA,MACA,QACA9B,EAAAD,EAAAC,EAAAH,GACA,MAGA,OAAAG,EAGA,SAAAsE,EAAAJ,EAAAC,EAAAL,GACA,GAAAI,GAAAC,GAAAL,KAAA1E,KAAA,CACA,IACA8B,EAAA8C,EADAD,EAAAG,EAGA,IADAF,EAAAF,EAAAzE,KAAAE,OAAA,EACA2B,EAAA,EAAiBA,EAAA8C,EAAO9C,IACxB,qBAAA6C,EAAAD,EAAAzE,KAAA6B,MACA6C,EAAAD,EAAAzE,KAAA6B,IAAA,IAEA6C,IAAAD,EAAAzE,KAAA6B,IAEA,OAAA4C,EAAA1E,MACA,QAGAiF,EAAAN,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAjE,MAAAiE,EAAAhE,MACA,MACA,QAEAiE,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAhC,IACA,MACA,QAEAiC,EAAAD,EAAAzE,KAAA6B,IAAA4C,EAAAhC,IACA,MACA,eAEAiC,EAAAD,EAAAzE,KAAA6B,IACA,QAKA,SAAAqD,EAAAL,EAAAC,EAAAK,GACA,GAAAN,GAAAC,EAAA,CACA,IAAAM,EAAA,SAAAX,GACAU,MAAAN,EAAAC,EAAAL,IACAG,EAAAC,EAAAC,EAAAL,IAGAP,EAAAW,EAAAC,EAAAM,IA0DA,OA9cAlG,EAAAiB,EAAAL,GASAZ,EAAAmB,EAAAP,GASAZ,EAAAoB,EAAAR,GAaAZ,EAAAqB,EAAAT,GAyXAP,OAAA8F,iBAAAhB,EAAA,CAEAiB,KAAA,CACA5F,MAAA2E,EACA1E,YAAA,GAEA4F,qBAAA,CACA7F,MAAA6E,EACA5E,YAAA,GAEAuE,eAAA,CACAxE,MAAAwE,EACAvE,YAAA,GAEA6F,+BAAA,CACA9F,MAAA0E,EACAzE,YAAA,GAEA8F,eAAA,CACA/F,MAAAsC,EACArC,YAAA,GAEAuF,UAAA,CACAxF,MAAAwF,EACAvF,YAAA,GAEAiF,YAAA,CACAlF,MAAAkF,EACAjF,YAAA,GAEAsF,aAAA,CACAvF,MAAAuF,EACAtF,YAAA,GAEA+F,WAAA,CACAhG,MAAA,WACA,2BAAAiG,WAEAhG,YAAA,KAKA0E,EAAAuB,SAAAvB,EAOA7F,IACAA,EAAAoH,SAAAvB,GAGAA","file":"jfrog-ui-essentials.umd.min.vendors-chunks~966a77ca.js","sourcesContent":[";(function(root, factory) { // eslint-disable-line no-extra-semi\n  var deepDiff = factory(root);\n  // eslint-disable-next-line no-undef\n  if (typeof define === 'function' && define.amd) {\n      // AMD\n      define('DeepDiff', function() { // eslint-disable-line no-undef\n          return deepDiff;\n      });\n  } else if (typeof exports === 'object' || typeof navigator === 'object' && navigator.product.match(/ReactNative/i)) {\n      // Node.js or ReactNative\n      module.exports = deepDiff;\n  } else {\n      // Browser globals\n      var _deepdiff = root.DeepDiff;\n      deepDiff.noConflict = function() {\n          if (root.DeepDiff === deepDiff) {\n              root.DeepDiff = _deepdiff;\n          }\n          return deepDiff;\n      };\n      root.DeepDiff = deepDiff;\n  }\n}(this, function(root) {\n  var validKinds = ['N', 'E', 'A', 'D'];\n\n  // nodejs compatible on server side and in the browser.\n  function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n  function Diff(kind, path) {\n    Object.defineProperty(this, 'kind', {\n      value: kind,\n      enumerable: true\n    });\n    if (path && path.length) {\n      Object.defineProperty(this, 'path', {\n        value: path,\n        enumerable: true\n      });\n    }\n  }\n\n  function DiffEdit(path, origin, value) {\n    DiffEdit.super_.call(this, 'E', path);\n    Object.defineProperty(this, 'lhs', {\n      value: origin,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffEdit, Diff);\n\n  function DiffNew(path, value) {\n    DiffNew.super_.call(this, 'N', path);\n    Object.defineProperty(this, 'rhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffNew, Diff);\n\n  function DiffDeleted(path, value) {\n    DiffDeleted.super_.call(this, 'D', path);\n    Object.defineProperty(this, 'lhs', {\n      value: value,\n      enumerable: true\n    });\n  }\n  inherits(DiffDeleted, Diff);\n\n  function DiffArray(path, index, item) {\n    DiffArray.super_.call(this, 'A', path);\n    Object.defineProperty(this, 'index', {\n      value: index,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'item', {\n      value: item,\n      enumerable: true\n    });\n  }\n  inherits(DiffArray, Diff);\n\n  function arrayRemove(arr, from, to) {\n    var rest = arr.slice((to || from) + 1 || arr.length);\n    arr.length = from < 0 ? arr.length + from : from;\n    arr.push.apply(arr, rest);\n    return arr;\n  }\n\n  function realTypeOf(subject) {\n    var type = typeof subject;\n    if (type !== 'object') {\n      return type;\n    }\n\n    if (subject === Math) {\n      return 'math';\n    } else if (subject === null) {\n      return 'null';\n    } else if (Array.isArray(subject)) {\n      return 'array';\n    } else if (Object.prototype.toString.call(subject) === '[object Date]') {\n      return 'date';\n    } else if (typeof subject.toString === 'function' && /^\\/.*\\//.test(subject.toString())) {\n      return 'regexp';\n    }\n    return 'object';\n  }\n\n  // http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  function hashThisString(string) {\n    var hash = 0;\n    if (string.length === 0) { return hash; }\n    for (var i = 0; i < string.length; i++) {\n      var char = string.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n  // Gets a hash of the given object in an array order-independent fashion\n  // also object key order independent (easier since they can be alphabetized)\n  function getOrderIndependentHash(object) {\n    var accum = 0;\n    var type = realTypeOf(object);\n\n    if (type === 'array') {\n      object.forEach(function (item) {\n        // Addition is commutative so this is order indep\n        accum += getOrderIndependentHash(item);\n      });\n\n      var arrayString = '[type: array, hash: ' + accum + ']';\n      return accum + hashThisString(arrayString);\n    }\n\n    if (type === 'object') {\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var keyValueString = '[ type: object, key: ' + key + ', value hash: ' + getOrderIndependentHash(object[key]) + ']';\n          accum += hashThisString(keyValueString);\n        }\n      }\n\n      return accum;\n    }\n\n    // Non object, non array...should be good?\n    var stringToHash = '[ type: ' + type + ' ; value: ' + object + ']';\n    return accum + hashThisString(stringToHash);\n  }\n\n  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack, orderIndependent) {\n    changes = changes || [];\n    path = path || [];\n    stack = stack || [];\n    var currentPath = path.slice(0);\n    if (typeof key !== 'undefined' && key !== null) {\n      if (prefilter) {\n        if (typeof (prefilter) === 'function' && prefilter(currentPath, key)) {\n          return;\n        } else if (typeof (prefilter) === 'object') {\n          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {\n            return;\n          }\n          if (prefilter.normalize) {\n            var alt = prefilter.normalize(currentPath, key, lhs, rhs);\n            if (alt) {\n              lhs = alt[0];\n              rhs = alt[1];\n            }\n          }\n        }\n      }\n      currentPath.push(key);\n    }\n\n    // Use string comparison for regexes\n    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {\n      lhs = lhs.toString();\n      rhs = rhs.toString();\n    }\n\n    var ltype = typeof lhs;\n    var rtype = typeof rhs;\n    var i, j, k, other;\n\n    var ldefined = ltype !== 'undefined' ||\n      (stack && (stack.length > 0) && stack[stack.length - 1].lhs &&\n        Object.getOwnPropertyDescriptor(stack[stack.length - 1].lhs, key));\n    var rdefined = rtype !== 'undefined' ||\n      (stack && (stack.length > 0) && stack[stack.length - 1].rhs &&\n        Object.getOwnPropertyDescriptor(stack[stack.length - 1].rhs, key));\n\n    if (!ldefined && rdefined) {\n      changes.push(new DiffNew(currentPath, rhs));\n    } else if (!rdefined && ldefined) {\n      changes.push(new DiffDeleted(currentPath, lhs));\n    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {\n      changes.push(new DiffEdit(currentPath, lhs, rhs));\n    } else if (realTypeOf(lhs) === 'date' && (lhs - rhs) !== 0) {\n      changes.push(new DiffEdit(currentPath, lhs, rhs));\n    } else if (ltype === 'object' && lhs !== null && rhs !== null) {\n      for (i = stack.length - 1; i > -1; --i) {\n        if (stack[i].lhs === lhs) {\n          other = true;\n          break;\n        }\n      }\n      if (!other) {\n        stack.push({ lhs: lhs, rhs: rhs });\n        if (Array.isArray(lhs)) {\n          // If order doesn't matter, we need to sort our arrays\n          if (orderIndependent) {\n            lhs.sort(function (a, b) {\n              return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n            });\n\n            rhs.sort(function (a, b) {\n              return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n            });\n          }\n          i = rhs.length - 1;\n          j = lhs.length - 1;\n          while (i > j) {\n            changes.push(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i--])));\n          }\n          while (j > i) {\n            changes.push(new DiffArray(currentPath, j, new DiffDeleted(undefined, lhs[j--])));\n          }\n          for (; i >= 0; --i) {\n            deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack, orderIndependent);\n          }\n        } else {\n          var akeys = Object.keys(lhs);\n          var pkeys = Object.keys(rhs);\n          for (i = 0; i < akeys.length; ++i) {\n            k = akeys[i];\n            other = pkeys.indexOf(k);\n            if (other >= 0) {\n              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n              pkeys[other] = null;\n            } else {\n              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack, orderIndependent);\n            }\n          }\n          for (i = 0; i < pkeys.length; ++i) {\n            k = pkeys[i];\n            if (k) {\n              deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n            }\n          }\n        }\n        stack.length = stack.length - 1;\n      } else if (lhs !== rhs) {\n        // lhs is contains a cycle at this element and it differs from rhs\n        changes.push(new DiffEdit(currentPath, lhs, rhs));\n      }\n    } else if (lhs !== rhs) {\n      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {\n        changes.push(new DiffEdit(currentPath, lhs, rhs));\n      }\n    }\n  }\n\n  function observableDiff(lhs, rhs, observer, prefilter, orderIndependent) {\n    var changes = [];\n    deepDiff(lhs, rhs, changes, prefilter, null, null, null, orderIndependent);\n    if (observer) {\n      for (var i = 0; i < changes.length; ++i) {\n        observer(changes[i]);\n      }\n    }\n    return changes;\n  }\n\n  function orderIndependentDeepDiff(lhs, rhs, changes, prefilter, path, key, stack) {\n    return deepDiff(lhs, rhs, changes, prefilter, path, key, stack, true);\n  }\n\n  function accumulateDiff(lhs, rhs, prefilter, accum) {\n    var observer = (accum) ?\n      function (difference) {\n        if (difference) {\n          accum.push(difference);\n        }\n      } : undefined;\n    var changes = observableDiff(lhs, rhs, observer, prefilter);\n    return (accum) ? accum : (changes.length) ? changes : undefined;\n  }\n\n  function accumulateOrderIndependentDiff(lhs, rhs, prefilter, accum) {\n    var observer = (accum) ?\n      function (difference) {\n        if (difference) {\n          accum.push(difference);\n        }\n      } : undefined;\n    var changes = observableDiff(lhs, rhs, observer, prefilter, true);\n    return (accum) ? accum : (changes.length) ? changes : undefined;\n  }\n\n  function applyArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      var it = arr[index],\n        i, u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          delete it[change.path[i]];\n          break;\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    } else {\n      switch (change.kind) {\n        case 'A':\n          applyArrayChange(arr[index], change.index, change.item);\n          break;\n        case 'D':\n          arr = arrayRemove(arr, index);\n          break;\n        case 'E':\n        case 'N':\n          arr[index] = change.rhs;\n          break;\n      }\n    }\n    return arr;\n  }\n\n  function applyChange(target, source, change) {\n    if (typeof change === 'undefined' && source && ~validKinds.indexOf(source.kind)) {\n      change = source;\n    }\n    if (target && change && change.kind) {\n      var it = target,\n        i = -1,\n        last = change.path ? change.path.length - 1 : 0;\n      while (++i < last) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = (typeof change.path[i + 1] !== 'undefined' && typeof change.path[i + 1] === 'number') ? [] : {};\n        }\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          if (change.path && typeof it[change.path[i]] === 'undefined') {\n            it[change.path[i]] = [];\n          }\n          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n          break;\n        case 'D':\n          delete it[change.path[i]];\n          break;\n        case 'E':\n        case 'N':\n          it[change.path[i]] = change.rhs;\n          break;\n      }\n    }\n  }\n\n  function revertArrayChange(arr, index, change) {\n    if (change.path && change.path.length) {\n      // the structure of the object at the index has changed...\n      var it = arr[index],\n        i, u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'E':\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'N':\n          delete it[change.path[i]];\n          break;\n      }\n    } else {\n      // the array item is different...\n      switch (change.kind) {\n        case 'A':\n          revertArrayChange(arr[index], change.index, change.item);\n          break;\n        case 'D':\n          arr[index] = change.lhs;\n          break;\n        case 'E':\n          arr[index] = change.lhs;\n          break;\n        case 'N':\n          arr = arrayRemove(arr, index);\n          break;\n      }\n    }\n    return arr;\n  }\n\n  function revertChange(target, source, change) {\n    if (target && source && change && change.kind) {\n      var it = target,\n        i, u;\n      u = change.path.length - 1;\n      for (i = 0; i < u; i++) {\n        if (typeof it[change.path[i]] === 'undefined') {\n          it[change.path[i]] = {};\n        }\n        it = it[change.path[i]];\n      }\n      switch (change.kind) {\n        case 'A':\n          // Array was modified...\n          // it will be an array...\n          revertArrayChange(it[change.path[i]], change.index, change.item);\n          break;\n        case 'D':\n          // Item was deleted...\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'E':\n          // Item was edited...\n          it[change.path[i]] = change.lhs;\n          break;\n        case 'N':\n          // Item is new...\n          delete it[change.path[i]];\n          break;\n      }\n    }\n  }\n\n  function applyDiff(target, source, filter) {\n    if (target && source) {\n      var onChange = function (change) {\n        if (!filter || filter(target, source, change)) {\n          applyChange(target, source, change);\n        }\n      };\n      observableDiff(target, source, onChange);\n    }\n  }\n\n  Object.defineProperties(accumulateDiff, {\n\n    diff: {\n      value: accumulateDiff,\n      enumerable: true\n    },\n    orderIndependentDiff: {\n      value: accumulateOrderIndependentDiff,\n      enumerable: true\n    },\n    observableDiff: {\n      value: observableDiff,\n      enumerable: true\n    },\n    orderIndependentObservableDiff: {\n      value: orderIndependentDeepDiff,\n      enumerable: true\n    },\n    orderIndepHash: {\n      value: getOrderIndependentHash,\n      enumerable: true\n    },\n    applyDiff: {\n      value: applyDiff,\n      enumerable: true\n    },\n    applyChange: {\n      value: applyChange,\n      enumerable: true\n    },\n    revertChange: {\n      value: revertChange,\n      enumerable: true\n    },\n    isConflict: {\n      value: function () {\n        return typeof $conflict !== 'undefined';\n      },\n      enumerable: true\n    }\n  });\n\n  // hackish...\n  accumulateDiff.DeepDiff = accumulateDiff;\n  // ...but works with:\n  // import DeepDiff from 'deep-diff'\n  // import { DeepDiff } from 'deep-diff'\n  // const DeepDiff = require('deep-diff');\n  // const { DeepDiff } = require('deep-diff');\n\n  if (root) {\n    root.DeepDiff = accumulateDiff;\n  }\n\n  return accumulateDiff;\n}));\n"],"sourceRoot":""}