{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/collapse/collapse.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/collapse/index.js"],"names":["exports","__esModule","default","_vue","_interopRequireDefault","__webpack_require__","_listenOnRoot","_env","_dom","obj","EVENT_STATE","EVENT_ACCORDION","EVENT_STATE_SYNC","EVENT_TOGGLE","EventOptions","passive","capture","_default","extend","name","mixins","model","prop","event","props","id","type","String","required","isNav","Boolean","accordion","visible","tag","data","show","this","transitioning","computed","classObject","navbar-collapse","collapse","watch","newVal","oldVal","emitState","created","listenOnRoot","handleToggleEvt","handleAccordionEvt","mounted","_this","isBrowser","setWindowEvents","handleResize","$nextTick","updated","$root","$emit","deactivated","activated","beforeDestroy","methods","on","method","eventOn","eventOff","window","toggle","onEnter","el","style","height","reflow","scrollHeight","onAfterEnter","onLeave","display","getBCR","onAfterLeave","clickHandler","evt","target","getCS","$el","matches","closest","openedId","render","h","content","class","directives","value","attrs","click","$slots","enterClass","enterActiveClass","enterToClass","leaveClass","leaveActiveClass","leaveToClass","enter","afterEnter","leave","afterLeave","_collapse","_toggle","_plugins","components","BCollapse","BToggle","install","installFactory"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~f52c2a26.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"../../utils/vue\"));\n\nvar _listenOnRoot = _interopRequireDefault(require(\"../../mixins/listen-on-root\"));\n\nvar _env = require(\"../../utils/env\");\n\nvar _dom = require(\"../../utils/dom\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Events we emit on $root\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on $root to ensure the toggle state is always synced\n// Gets emited even if the state has not changed!\n// This event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on $root\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Event Listener options\n\nvar EventOptions = {\n  passive: true,\n  capture: false // @vue/component\n\n};\n\nvar _default = _vue.default.extend({\n  name: 'BCollapse',\n  mixins: [_listenOnRoot.default],\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  data: function data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n  computed: {\n    classObject: function classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !this.transitioning,\n        show: this.show && !this.transitioning\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n  },\n  created: function created() {\n    this.show = this.visible; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.show = this.visible;\n\n    if (this.isNav && _env.isBrowser) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(function () {\n      _this.emitState();\n    });\n  },\n  updated: function updated() {\n    // Emit a private event every time this component updates\n    // to ensure the toggle button is in sync with the collapse's state.\n    // It is emitted regardless if the visible state changes.\n    this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav && _env.isBrowser) {\n      this.setWindowEvents(false);\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav && _env.isBrowser) {\n      this.setWindowEvents(true);\n    }\n\n    this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && _env.isBrowser) {\n      this.setWindowEvents(false);\n    }\n  },\n  methods: {\n    setWindowEvents: function setWindowEvents(on) {\n      var method = on ? _dom.eventOn : _dom.eventOff;\n      method(window, 'resize', this.handleResize, EventOptions);\n      method(window, 'orientationchange', this.handleResize, EventOptions);\n    },\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter(el) {\n      el.style.height = 0;\n      (0, _dom.reflow)(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit('show');\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n    onLeave: function onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = (0, _dom.getBCR)(el).height + 'px';\n      (0, _dom.reflow)(el);\n      this.transitioning = true;\n      el.style.height = 0; // This should be moved out so we can add cancellable events\n\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n    emitState: function emitState() {\n      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse\n\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n    clickHandler: function clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      var el = evt.target;\n\n      if (!this.isNav || !el || (0, _dom.getCS)(this.$el).display !== 'block') {\n        /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n        return;\n      }\n\n      if ((0, _dom.matches)(el, '.nav-link,.dropdown-item') || (0, _dom.closest)('.nav-link,.dropdown-item', el)) {\n        this.show = false;\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n\n      this.toggle();\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = (0, _dom.getCS)(this.$el).display === 'block';\n    }\n  },\n  render: function render(h) {\n    var content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.id || null\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, [this.$slots.default]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [content]);\n  }\n});\n\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _collapse = _interopRequireDefault(require(\"./collapse\"));\n\nvar _toggle = _interopRequireDefault(require(\"../../directives/toggle/toggle\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar components = {\n  BCollapse: _collapse.default\n};\nvar directives = {\n  BToggle: _toggle.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    components: components,\n    directives: directives\n  })\n};\nexports.default = _default;"],"sourceRoot":""}