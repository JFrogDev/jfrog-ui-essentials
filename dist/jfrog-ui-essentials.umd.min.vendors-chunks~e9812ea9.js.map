{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/vue-multiselect/src/multiselectMixin.js"],"names":["isEmpty","opt","Array","isArray","length","not","fun","params","includes","str","query","undefined","text","toString","toLowerCase","indexOf","trim","filterOptions","options","search","label","customLabel","filter","option","stripGroups","$isLabel","flattenOptions","values","reduce","prev","curr","push","$groupLabel","concat","filterGroups","groupLabel","groups","map","group","console","warn","groupOptions","[object Object]","flow","fns","x","v","f","__webpack_exports__","isOpen","preferredOpenDirection","optimizedHeight","this","maxHeight","props","internalSearch","type","Boolean","default","required","multiple","value","trackBy","String","searchable","clearOnSelect","hideSelected","placeholder","allowEmpty","resetAfter","closeOnSelect","Function","taggable","tagPlaceholder","tagPosition","max","Number","id","optionsLimit","groupValues","groupSelect","blockKeys","preserveSearch","preselectFirst","internalValue","select","filteredOptions","computed","normalizedSearch","filterAndFlat","isSelected","isExistingOption","isTag","unshift","slice","element","flatAndStrip","getOptionLabel","watch","$emit","methods","optionKeys","valueKeys","$isDisabled","key","selectGroup","disabled","pointerDirty","deactivate","removeElement","selectedGroup","find","wholeGroupSelected","newValue","optionsToAdd","isOptionDisabled","every","shouldClose","index","adjustPosition","pointer","$nextTick","$refs","focus","$el","blur","getValue","activate","window","spaceAbove","getBoundingClientRect","top","spaceBelow","innerHeight","bottom","hasEnoughSpaceBelow","openDirection","Math","min"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~e9812ea9.js","sourcesContent":["function isEmpty (opt) {\n  if (opt === 0) return false\n  if (Array.isArray(opt) && opt.length === 0) return true\n  return !opt\n}\n\nfunction not (fun) {\n  return (...params) => !fun(...params)\n}\n\nfunction includes (str, query) {\n  /* istanbul ignore else */\n  if (str === undefined) str = 'undefined'\n  if (str === null) str = 'null'\n  if (str === false) str = 'false'\n  const text = str.toString().toLowerCase()\n  return text.indexOf(query.trim()) !== -1\n}\n\nfunction filterOptions (options, search, label, customLabel) {\n  return options.filter(option => includes(customLabel(option, label), search))\n}\n\nfunction stripGroups (options) {\n  return options.filter(option => !option.$isLabel)\n}\n\nfunction flattenOptions (values, label) {\n  return (options) =>\n    options.reduce((prev, curr) => {\n      /* istanbul ignore else */\n      if (curr[values] && curr[values].length) {\n        prev.push({\n          $groupLabel: curr[label],\n          $isLabel: true\n        })\n        return prev.concat(curr[values])\n      }\n      return prev\n    }, [])\n}\n\nfunction filterGroups (search, label, values, groupLabel, customLabel) {\n  return (groups) =>\n    groups.map(group => {\n      /* istanbul ignore else */\n      if (!group[values]) {\n        console.warn(`Options passed to vue-multiselect do not contain groups, despite the config.`)\n        return []\n      }\n      const groupOptions = filterOptions(group[values], search, label, customLabel)\n\n      return groupOptions.length\n        ? {\n          [groupLabel]: group[groupLabel],\n          [values]: groupOptions\n        }\n        : []\n    })\n}\n\nconst flow = (...fns) => x => fns.reduce((v, f) => f(v), x)\n\nexport default {\n  data () {\n    return {\n      search: '',\n      isOpen: false,\n      preferredOpenDirection: 'below',\n      optimizedHeight: this.maxHeight\n    }\n  },\n  props: {\n    /**\n     * Decide whether to filter the results based on search query.\n     * Useful for async filtering, where we search through more complex data.\n     * @type {Boolean}\n     */\n    internalSearch: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Array of available options: Objects, Strings or Integers.\n     * If array of objects, visible label will default to option.label.\n     * If `labal` prop is passed, label will equal option['label']\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      required: true\n    },\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @default false\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Presets the selected options value.\n     * @type {Object||Array||String||Integer}\n     */\n    value: {\n      type: null,\n      default () {\n        return []\n      }\n    },\n    /**\n     * Key to compare objects\n     * @default 'id'\n     * @type {String}\n     */\n    trackBy: {\n      type: String\n    },\n    /**\n     * Label to look for in option Object\n     * @default 'label'\n     * @type {String}\n     */\n    label: {\n      type: String\n    },\n    /**\n     * Enable/disable search in options\n     * @default true\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Clear the search input after `)\n     * @default true\n     * @type {Boolean}\n     */\n    clearOnSelect: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Hide already selected options\n     * @default false\n     * @type {Boolean}\n     */\n    hideSelected: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Equivalent to the `placeholder` attribute on a `<select>` input.\n     * @default 'Select option'\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      default: 'Select option'\n    },\n    /**\n     * Allow to remove all selected values\n     * @default true\n     * @type {Boolean}\n     */\n    allowEmpty: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Reset this.internalValue, this.search after this.internalValue changes.\n     * Useful if want to create a stateless dropdown.\n     * @default false\n     * @type {Boolean}\n     */\n    resetAfter: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Enable/disable closing after selecting an option\n     * @default true\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Function to interpolate the custom label\n     * @default false\n     * @type {Function}\n     */\n    customLabel: {\n      type: Function,\n      default (option, label) {\n        if (isEmpty(option)) return ''\n        return label ? option[label] : option\n      }\n    },\n    /**\n     * Disable / Enable tagging\n     * @default false\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * String to show when highlighting a potential tag\n     * @default 'Press enter to create a tag'\n     * @type {String}\n    */\n    tagPlaceholder: {\n      type: String,\n      default: 'Press enter to create a tag'\n    },\n    /**\n     * By default new tags will appear above the search results.\n     * Changing to 'bottom' will revert this behaviour\n     * and will proritize the search results\n     * @default 'top'\n     * @type {String}\n    */\n    tagPosition: {\n      type: String,\n      default: 'top'\n    },\n    /**\n     * Number of allowed selected options. No limit if 0.\n     * @default 0\n     * @type {Number}\n    */\n    max: {\n      type: [Number, Boolean],\n      default: false\n    },\n    /**\n     * Will be passed with all events as second param.\n     * Useful for identifying events origin.\n     * @default null\n     * @type {String|Integer}\n    */\n    id: {\n      default: null\n    },\n    /**\n     * Limits the options displayed in the dropdown\n     * to the first X options.\n     * @default 1000\n     * @type {Integer}\n    */\n    optionsLimit: {\n      type: Number,\n      default: 1000\n    },\n    /**\n     * Name of the property containing\n     * the group values\n     * @default 1000\n     * @type {String}\n    */\n    groupValues: {\n      type: String\n    },\n    /**\n     * Name of the property containing\n     * the group label\n     * @default 1000\n     * @type {String}\n    */\n    groupLabel: {\n      type: String\n    },\n    /**\n     * Allow to select all group values\n     * by selecting the group label\n     * @default false\n     * @type {Boolean}\n     */\n    groupSelect: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Array of keyboard keys to block\n     * when selecting\n     * @default 1000\n     * @type {String}\n    */\n    blockKeys: {\n      type: Array,\n      default () {\n        return []\n      }\n    },\n    /**\n     * Prevent from wiping up the search value\n     * @default false\n     * @type {Boolean}\n    */\n    preserveSearch: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Select 1st options if value is empty\n     * @default false\n     * @type {Boolean}\n    */\n    preselectFirst: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted () {\n    /* istanbul ignore else */\n    if (!this.multiple && this.max) {\n      console.warn('[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false.')\n    }\n    if (\n      this.preselectFirst &&\n      !this.internalValue.length &&\n      this.options.length\n    ) {\n      this.select(this.filteredOptions[0])\n    }\n  },\n  computed: {\n    internalValue () {\n      return this.value || this.value === 0\n        ? Array.isArray(this.value) ? this.value : [this.value]\n        : []\n    },\n    filteredOptions () {\n      const search = this.search || ''\n      const normalizedSearch = search.toLowerCase().trim()\n\n      let options = this.options.concat()\n\n      /* istanbul ignore else */\n      if (this.internalSearch) {\n        options = this.groupValues\n          ? this.filterAndFlat(options, normalizedSearch, this.label)\n          : filterOptions(options, normalizedSearch, this.label, this.customLabel)\n      } else {\n        options = this.groupValues ? flattenOptions(this.groupValues, this.groupLabel)(options) : options\n      }\n\n      options = this.hideSelected\n        ? options.filter(not(this.isSelected))\n        : options\n\n      /* istanbul ignore else */\n      if (this.taggable && normalizedSearch.length && !this.isExistingOption(normalizedSearch)) {\n        if (this.tagPosition === 'bottom') {\n          options.push({ isTag: true, label: search })\n        } else {\n          options.unshift({ isTag: true, label: search })\n        }\n      }\n\n      return options.slice(0, this.optionsLimit)\n    },\n    valueKeys () {\n      if (this.trackBy) {\n        return this.internalValue.map(element => element[this.trackBy])\n      } else {\n        return this.internalValue\n      }\n    },\n    optionKeys () {\n      const options = this.groupValues ? this.flatAndStrip(this.options) : this.options\n      return options.map(element => this.customLabel(element, this.label).toString().toLowerCase())\n    },\n    currentOptionLabel () {\n      return this.multiple\n        ? this.searchable ? '' : this.placeholder\n        : this.internalValue.length\n          ? this.getOptionLabel(this.internalValue[0])\n          : this.searchable ? '' : this.placeholder\n    }\n  },\n  watch: {\n    internalValue () {\n      /* istanbul ignore else */\n      if (this.resetAfter && this.internalValue.length) {\n        this.search = ''\n        this.$emit('input', this.multiple ? [] : null)\n      }\n    },\n    search () {\n      this.$emit('search-change', this.search, this.id)\n    }\n  },\n  methods: {\n    /**\n     * Returns the internalValue in a way it can be emited to the parent\n     * @returns {Object||Array||String||Integer}\n     */\n    getValue () {\n      return this.multiple\n        ? this.internalValue\n        : this.internalValue.length === 0\n          ? null\n          : this.internalValue[0]\n    },\n    /**\n     * Filters and then flattens the options list\n     * @param  {Array}\n     * @returns {Array} returns a filtered and flat options list\n     */\n    filterAndFlat (options, search, label) {\n      return flow(\n        filterGroups(search, label, this.groupValues, this.groupLabel, this.customLabel),\n        flattenOptions(this.groupValues, this.groupLabel)\n      )(options)\n    },\n    /**\n     * Flattens and then strips the group labels from the options list\n     * @param  {Array}\n     * @returns {Array} returns a flat options list without group labels\n     */\n    flatAndStrip (options) {\n      return flow(\n        flattenOptions(this.groupValues, this.groupLabel),\n        stripGroups\n      )(options)\n    },\n    /**\n     * Updates the search value\n     * @param  {String}\n     */\n    updateSearch (query) {\n      this.search = query\n    },\n    /**\n     * Finds out if the given query is already present\n     * in the available options\n     * @param  {String}\n     * @returns {Boolean} returns true if element is available\n     */\n    isExistingOption (query) {\n      return !this.options\n        ? false\n        : this.optionKeys.indexOf(query) > -1\n    },\n    /**\n     * Finds out if the given element is already present\n     * in the result value\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is selected\n     */\n    isSelected (option) {\n      const opt = this.trackBy\n        ? option[this.trackBy]\n        : option\n      return this.valueKeys.indexOf(opt) > -1\n    },\n    /**\n     * Finds out if the given option is disabled\n     * @param  {Object||String||Integer} option passed element to check\n     * @returns {Boolean} returns true if element is disabled\n     */\n    isOptionDisabled (option) {\n      return !!option.$isDisabled\n    },\n    /**\n     * Returns empty string when options is null/undefined\n     * Returns tag query if option is tag.\n     * Returns the customLabel() results and casts it to string.\n     *\n     * @param  {Object||String||Integer} Passed option\n     * @returns {Object||String}\n     */\n    getOptionLabel (option) {\n      if (isEmpty(option)) return ''\n      /* istanbul ignore else */\n      if (option.isTag) return option.label\n      /* istanbul ignore else */\n      if (option.$isLabel) return option.$groupLabel\n\n      let label = this.customLabel(option, this.label)\n      /* istanbul ignore else */\n      if (isEmpty(label)) return ''\n      return label\n    },\n    /**\n     * Add the given option to the list of selected options\n     * or sets the option as the selected option.\n     * If option is already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} option to select/deselect\n     * @param  {Boolean} block removing\n     */\n    select (option, key) {\n      /* istanbul ignore else */\n      if (option.$isLabel && this.groupSelect) {\n        this.selectGroup(option)\n        return\n      }\n      if (this.blockKeys.indexOf(key) !== -1 ||\n        this.disabled ||\n        option.$isDisabled ||\n        option.$isLabel\n      ) return\n      /* istanbul ignore else */\n      if (this.max && this.multiple && this.internalValue.length === this.max) return\n      /* istanbul ignore else */\n      if (key === 'Tab' && !this.pointerDirty) return\n      if (option.isTag) {\n        this.$emit('tag', option.label, this.id)\n        this.search = ''\n        if (this.closeOnSelect && !this.multiple) this.deactivate()\n      } else {\n        const isSelected = this.isSelected(option)\n\n        if (isSelected) {\n          if (key !== 'Tab') this.removeElement(option)\n          return\n        }\n\n        this.$emit('select', option, this.id)\n\n        if (this.multiple) {\n          this.$emit('input', this.internalValue.concat([option]), this.id)\n        } else {\n          this.$emit('input', option, this.id)\n        }\n\n        /* istanbul ignore else */\n        if (this.clearOnSelect) this.search = ''\n      }\n      /* istanbul ignore else */\n      if (this.closeOnSelect) this.deactivate()\n    },\n    /**\n     * Add the given group options to the list of selected options\n     * If all group optiona are already selected -> remove it from the results.\n     *\n     * @param  {Object||String||Integer} group to select/deselect\n     */\n    selectGroup (selectedGroup) {\n      const group = this.options.find(option => {\n        return option[this.groupLabel] === selectedGroup.$groupLabel\n      })\n\n      if (!group) return\n\n      if (this.wholeGroupSelected(group)) {\n        this.$emit('remove', group[this.groupValues], this.id)\n\n        const newValue = this.internalValue.filter(\n          option => group[this.groupValues].indexOf(option) === -1\n        )\n\n        this.$emit('input', newValue, this.id)\n      } else {\n        const optionsToAdd = group[this.groupValues].filter(not(this.isOptionDisabled || this.isSelected))\n\n        this.$emit('select', optionsToAdd, this.id)\n        this.$emit(\n          'input',\n          this.internalValue.concat(optionsToAdd),\n          this.id\n        )\n      }\n    },\n    /**\n     * Helper to identify if all values in a group are selected\n     *\n     * @param {Object} group to validated selected values against\n     */\n    wholeGroupSelected (group) {\n      return group[this.groupValues].every(option => this.isSelected(option) || this.isOptionDisabled(option)\n      )\n    },\n    /**\n     * Helper to identify if all values in a group are disabled\n     *\n     * @param {Object} group to check for disabled values\n     */\n    wholeGroupDisabled (group) {\n      return group[this.groupValues].every(this.isOptionDisabled)\n    },\n    /**\n     * Removes the given option from the selected options.\n     * Additionally checks this.allowEmpty prop if option can be removed when\n     * it is the last selected option.\n     *\n     * @param  {type} option description\n     * @returns {type}        description\n     */\n    removeElement (option, shouldClose = true) {\n      /* istanbul ignore else */\n      if (this.disabled) return\n      /* istanbul ignore else */\n      if (option.$isDisabled) return\n      /* istanbul ignore else */\n      if (!this.allowEmpty && this.internalValue.length <= 1) {\n        this.deactivate()\n        return\n      }\n\n      const index = typeof option === 'object'\n        ? this.valueKeys.indexOf(option[this.trackBy])\n        : this.valueKeys.indexOf(option)\n\n      this.$emit('remove', option, this.id)\n      if (this.multiple) {\n        const newValue = this.internalValue.slice(0, index).concat(this.internalValue.slice(index + 1))\n        this.$emit('input', newValue, this.id)\n      } else {\n        this.$emit('input', null, this.id)\n      }\n\n      /* istanbul ignore else */\n      if (this.closeOnSelect && shouldClose) this.deactivate()\n    },\n    /**\n     * Calls this.removeElement() with the last element\n     * from this.internalValue (selected element Array)\n     *\n     * @fires this#removeElement\n     */\n    removeLastElement () {\n      /* istanbul ignore else */\n      if (this.blockKeys.indexOf('Delete') !== -1) return\n      /* istanbul ignore else */\n      if (this.search.length === 0 && Array.isArray(this.internalValue)) {\n        this.removeElement(this.internalValue[this.internalValue.length - 1], false)\n      }\n    },\n    /**\n     * Opens the multiselect’s dropdown.\n     * Sets this.isOpen to TRUE\n     */\n    activate () {\n      /* istanbul ignore else */\n      if (this.isOpen || this.disabled) return\n\n      this.adjustPosition()\n      /* istanbul ignore else  */\n      if (this.groupValues && this.pointer === 0 && this.filteredOptions.length) {\n        this.pointer = 1\n      }\n\n      this.isOpen = true\n      /* istanbul ignore else  */\n      if (this.searchable) {\n        if (!this.preserveSearch) this.search = ''\n        this.$nextTick(() => this.$refs.search.focus())\n      } else {\n        this.$el.focus()\n      }\n      this.$emit('open', this.id)\n    },\n    /**\n     * Closes the multiselect’s dropdown.\n     * Sets this.isOpen to FALSE\n     */\n    deactivate () {\n      /* istanbul ignore else */\n      if (!this.isOpen) return\n\n      this.isOpen = false\n      /* istanbul ignore else  */\n      if (this.searchable) {\n        this.$refs.search.blur()\n      } else {\n        this.$el.blur()\n      }\n      if (!this.preserveSearch) this.search = ''\n      this.$emit('close', this.getValue(), this.id)\n    },\n    /**\n     * Call this.activate() or this.deactivate()\n     * depending on this.isOpen value.\n     *\n     * @fires this#activate || this#deactivate\n     * @property {Boolean} isOpen indicates if dropdown is open\n     */\n    toggle () {\n      this.isOpen\n        ? this.deactivate()\n        : this.activate()\n    },\n    /**\n     * Updates the hasEnoughSpace variable used for\n     * detecting where to expand the dropdown\n     */\n    adjustPosition () {\n      if (typeof window === 'undefined') return\n\n      const spaceAbove = this.$el.getBoundingClientRect().top\n      const spaceBelow = window.innerHeight - this.$el.getBoundingClientRect().bottom\n      const hasEnoughSpaceBelow = spaceBelow > this.maxHeight\n\n      if (hasEnoughSpaceBelow || spaceBelow > spaceAbove || this.openDirection === 'below' || this.openDirection === 'bottom') {\n        this.preferredOpenDirection = 'below'\n        this.optimizedHeight = Math.min(spaceBelow - 40, this.maxHeight)\n      } else {\n        this.preferredOpenDirection = 'above'\n        this.optimizedHeight = Math.min(spaceAbove - 40, this.maxHeight)\n      }\n    }\n  }\n}\n"],"sourceRoot":""}