{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/sequentialQuantile.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/quantile.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/quantize.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/sequential.js"],"names":["__webpack_require__","d","__webpack_exports__","sequentialQuantile","d3_array__WEBPACK_IMPORTED_MODULE_0__","_continuous__WEBPACK_IMPORTED_MODULE_1__","_init__WEBPACK_IMPORTED_MODULE_2__","domain","interpolator","scale","x","isNaN","Object","length","_","arguments","slice","i","n","push","sort","copy","apply","quantile","_array__WEBPACK_IMPORTED_MODULE_1__","unknown","range","thresholds","rescale","Math","max","Array","invertExtent","y","indexOf","NaN","call","quantiles","quantize","_linear__WEBPACK_IMPORTED_MODULE_2__","_init__WEBPACK_IMPORTED_MODULE_3__","x0","x1","sequential","sequentialLog","sequentialSymlog","sequentialPow","sequentialSqrt","_continuous__WEBPACK_IMPORTED_MODULE_0__","_init__WEBPACK_IMPORTED_MODULE_1__","_log__WEBPACK_IMPORTED_MODULE_3__","_symlog__WEBPACK_IMPORTED_MODULE_4__","_pow__WEBPACK_IMPORTED_MODULE_5__","transformer","t0","t1","k10","transform","clamp","min","t","source","target","base","constant","exponent"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~9fb01e94.js","sourcesContent":["import {ascending, bisect} from \"d3-array\";\nimport {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\n\nexport default function sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((bisect(domain, x) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n","import {ascending, bisect, quantile as threshold} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {linearish} from \"./linear\";\nimport {initRange} from \"./init\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n","import {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\nimport {linearish} from \"./linear\";\nimport {loggish} from \"./log\";\nimport {symlogish} from \"./symlog\";\nimport {powish} from \"./pow\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport default function sequential() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialLog() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n"],"sourceRoot":""}