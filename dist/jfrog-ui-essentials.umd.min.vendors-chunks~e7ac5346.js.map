{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/form-file/form-file.js"],"names":["exports","__esModule","default","_vue","_interopRequireDefault","__webpack_require__","_array","_config","_inspect","_formCustom","_form","_formState","_id","_normalizeSlot","obj","NAME","_default2","extend","name","mixins","model","prop","event","props","value","accept","type","String","capture","Boolean","placeholder","getComponentConfig","browseText","dropPlaceholder","multiple","directory","noTraverse","noDrop","fileNameFormatter","Function","data","selectedFile","dragging","hasFocus","computed","selectLabel","this","length","files","concat","filter","hasNormalizedSlot","normalizeSlot","names","map","f","isFunction","file","join","watch","newVal","oldVal","isArray","every","v","i","$emit","reset","methods","focusHandler","evt","plain","$refs","input","e","onFileChange","_this","items","dataTransfer","setFiles","target","queue","item","webkitGetAsEntry","push","traverseFileTree","Promise","all","then","filesArr","from","arguments","undefined","filesArray","onReset","onDragover","preventDefault","stopPropagation","custom","dropEffect","onDragleave","onDrop","path","_this2","resolve","isFile","$path","isDirectory","createReader","readEntries","entries","render","h","ref","class","form-control-file","custom-file-input","focus","stateClass","attrs","id","safeId","disabled","required","form","webkitdirectory","aria-required","on","change","focusin","focusout","label","staticClass","for","data-browse","dragover","dragleave","drop"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~e7ac5346.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"../../utils/vue\"));\n\nvar _array = require(\"../../utils/array\");\n\nvar _config = require(\"../../utils/config\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _formCustom = _interopRequireDefault(require(\"../../mixins/form-custom\"));\n\nvar _form = _interopRequireDefault(require(\"../../mixins/form\"));\n\nvar _formState = _interopRequireDefault(require(\"../../mixins/form-state\"));\n\nvar _id = _interopRequireDefault(require(\"../../mixins/id\"));\n\nvar _normalizeSlot = _interopRequireDefault(require(\"../../mixins/normalize-slot\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NAME = 'BFormFile'; // @vue/component\n\nvar _default2 = _vue.default.extend({\n  name: NAME,\n  mixins: [_id.default, _form.default, _formState.default, _formCustom.default, _normalizeSlot.default],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    value: {\n      // type: Object,\n      default: null\n    },\n    accept: {\n      type: String,\n      default: ''\n    },\n    // Instruct input to capture from camera\n    capture: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return String((0, _config.getComponentConfig)(NAME, 'placeholder') || '');\n      }\n    },\n    browseText: {\n      type: String,\n      default: function _default() {\n        return String((0, _config.getComponentConfig)(NAME, 'browseText') || '');\n      }\n    },\n    dropPlaceholder: {\n      type: String,\n      default: function _default() {\n        return String((0, _config.getComponentConfig)(NAME, 'dropPlaceholder') || '');\n      }\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    directory: {\n      type: Boolean,\n      default: false\n    },\n    noTraverse: {\n      type: Boolean,\n      default: false\n    },\n    noDrop: {\n      type: Boolean,\n      default: false\n    },\n    fileNameFormatter: {\n      type: Function,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      selectedFile: null,\n      dragging: false,\n      hasFocus: false\n    };\n  },\n  computed: {\n    selectLabel: function selectLabel() {\n      // Draging active\n      if (this.dragging && this.dropPlaceholder) {\n        return this.dropPlaceholder;\n      } // No file chosen\n\n\n      if (!this.selectedFile || this.selectedFile.length === 0) {\n        return this.placeholder;\n      } // Convert selectedFile to an array (if not already one)\n\n\n      var files = (0, _array.concat)(this.selectedFile).filter(Boolean);\n\n      if (this.hasNormalizedSlot('file-name')) {\n        // There is a slot for formatting the files/names\n        return [this.normalizeSlot('file-name', {\n          files: files,\n          names: files.map(function (f) {\n            return f.name;\n          })\n        })];\n      } else {\n        // Use the user supplied formatter, or the built in one.\n        return (0, _inspect.isFunction)(this.fileNameFormatter) ? String(this.fileNameFormatter(files)) : files.map(function (file) {\n          return file.name;\n        }).join(', ');\n      }\n    }\n  },\n  watch: {\n    selectedFile: function selectedFile(newVal, oldVal) {\n      // The following test is needed when the file input is \"reset\" or the\n      // exact same file(s) are selected to prevent an infinite loop.\n      // When in `multiple` mode we need to check for two empty arrays or\n      // two arrays with identical files\n      if (newVal === oldVal || (0, _array.isArray)(newVal) && (0, _array.isArray)(oldVal) && newVal.length === oldVal.length && newVal.every(function (v, i) {\n        return v === oldVal[i];\n      })) {\n        return;\n      }\n\n      if (!newVal && this.multiple) {\n        this.$emit('input', []);\n      } else {\n        this.$emit('input', newVal);\n      }\n    },\n    value: function value(newVal) {\n      if (!newVal || (0, _array.isArray)(newVal) && newVal.length === 0) {\n        this.reset();\n      }\n    }\n  },\n  methods: {\n    focusHandler: function focusHandler(evt) {\n      // Bootstrap v4 doesn't have focus styling for custom file input\n      // Firefox has a '[type=file]:focus ~ sibling' selector issue,\n      // so we add a 'focus' class to get around these bugs\n      if (this.plain || evt.type === 'focusout') {\n        this.hasFocus = false;\n      } else {\n        // Add focus styling for custom file input\n        this.hasFocus = true;\n      }\n    },\n    reset: function reset() {\n      try {\n        // Wrapped in try in case IE 11 craps out\n        this.$refs.input.value = '';\n      } catch (e) {} // IE 11 doesn't support setting `input.value` to '' or null\n      // So we use this little extra hack to reset the value, just in case.\n      // This also appears to work on modern browsers as well.\n\n\n      this.$refs.input.type = '';\n      this.$refs.input.type = 'file';\n      this.selectedFile = this.multiple ? [] : null;\n    },\n    onFileChange: function onFileChange(evt) {\n      var _this = this;\n\n      // Always emit original event\n      this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)\n      // Can be disabled by setting no-traverse\n\n      var items = evt.dataTransfer && evt.dataTransfer.items;\n      /* istanbul ignore next: not supported in JSDOM */\n\n      if (items && !this.noTraverse) {\n        var queue = [];\n\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i].webkitGetAsEntry();\n\n          if (item) {\n            queue.push(this.traverseFileTree(item));\n          }\n        }\n\n        Promise.all(queue).then(function (filesArr) {\n          _this.setFiles((0, _array.from)(filesArr));\n        });\n        return;\n      } // Normal handling\n\n\n      this.setFiles(evt.target.files || evt.dataTransfer.files);\n    },\n    setFiles: function setFiles() {\n      var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!files) {\n        /* istanbul ignore next: this will probably not happen */\n        this.selectedFile = null;\n      } else if (this.multiple) {\n        // Convert files to array\n        var filesArray = [];\n\n        for (var i = 0; i < files.length; i++) {\n          filesArray.push(files[i]);\n        } // Return file(s) as array\n\n\n        this.selectedFile = filesArray;\n      } else {\n        // Return single file object\n        this.selectedFile = files[0] || null;\n      }\n    },\n    onReset: function onReset() {\n      // Triggered when the parent form (if any) is reset\n      this.selectedFile = this.multiple ? [] : null;\n    },\n    onDragover: function onDragover(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop || !this.custom) {\n        return;\n      }\n\n      this.dragging = true;\n      evt.dataTransfer.dropEffect = 'copy';\n    },\n    onDragleave: function onDragleave(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.dragging = false;\n    },\n    onDrop: function onDrop(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop) {\n        return;\n      }\n\n      this.dragging = false;\n\n      if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {\n        this.onFileChange(evt);\n      }\n    },\n    traverseFileTree: function traverseFileTree(item, path)\n    /* istanbul ignore next: not supported in JSDOM */\n    {\n      var _this2 = this;\n\n      // Based on http://stackoverflow.com/questions/3590058\n      return new Promise(function (resolve) {\n        path = path || '';\n\n        if (item.isFile) {\n          // Get file\n          item.file(function (file) {\n            file.$path = path; // Inject $path to file obj\n\n            resolve(file);\n          });\n        } else if (item.isDirectory) {\n          // Get folder contents\n          item.createReader().readEntries(function (entries) {\n            var queue = [];\n\n            for (var i = 0; i < entries.length; i++) {\n              queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));\n            }\n\n            Promise.all(queue).then(function (filesArr) {\n              resolve((0, _array.from)(filesArr));\n            });\n          });\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    // Form Input\n    var input = h('input', {\n      ref: 'input',\n      class: [{\n        'form-control-file': this.plain,\n        'custom-file-input': this.custom,\n        focus: this.custom && this.hasFocus\n      }, this.stateClass],\n      attrs: {\n        type: 'file',\n        id: this.safeId(),\n        name: this.name,\n        disabled: this.disabled,\n        required: this.required,\n        form: this.form || null,\n        capture: this.capture || null,\n        accept: this.accept || null,\n        multiple: this.multiple,\n        webkitdirectory: this.directory,\n        'aria-required': this.required ? 'true' : null\n      },\n      on: {\n        change: this.onFileChange,\n        focusin: this.focusHandler,\n        focusout: this.focusHandler,\n        reset: this.onReset\n      }\n    });\n\n    if (this.plain) {\n      return input;\n    } // Overlay Labels\n\n\n    var label = h('label', {\n      staticClass: 'custom-file-label',\n      class: [this.dragging ? 'dragging' : null],\n      attrs: {\n        for: this.safeId(),\n        'data-browse': this.browseText || null\n      }\n    }, this.selectLabel); // Return rendered custom file input\n\n    return h('div', {\n      staticClass: 'custom-file b-form-file',\n      class: this.stateClass,\n      attrs: {\n        id: this.safeId('_BV_file_outer_')\n      },\n      on: {\n        dragover: this.onDragover,\n        dragleave: this.onDragleave,\n        drop: this.onDrop\n      }\n    }, [input, label]);\n  }\n});\n\nexports.default = _default2;"],"sourceRoot":""}