{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.class.js"],"names":["exports","__esModule","default","_observeDom","_interopRequireDefault","__webpack_require__","_warn","_dom","_inspect","obj","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","NAME","ACTIVATE_EVENT","Default","element","offset","method","throttle","DefaultType","ClassName","DROPDOWN_ITEM","ACTIVE","Selector","NAV_LIST_GROUP","NAV_LINKS","NAV_ITEMS","LIST_ITEMS","DROPDOWN","DROPDOWN_ITEMS","DROPDOWN_TOGGLE","OffsetMethod","OFFSET","POSITION","HREF_REGEX","TransitionEndEvents","EventOptions","passive","capture","toType","toString","call","match","toLowerCase","typeCheckConfig","componentName","config","configTypes","property","hasOwnProperty","expectedTypes","valueType","isElement","_isVue","RegExp","test","ScrollSpy","$root","this","$el","$scroller","$selector","join","$offsets","$targets","$activeTarget","$scrollHeight","$resizeTimeout","$obs_scroller","$obs_targets","$config","updateConfig","unlisten","cfg","constructor","Name","self","$nextTick","listen","clearTimeout","_this","scroller","getScroller","tagName","eventOn","window","evtName","setObservers","handleEvent","_this2","eventOff","on","_this3","disconnect","subtree","childList","attributes","attributeFilter","characterData","evt","type","isString","resizeThrottle","setTimeout","refresh","process","_this4","autoMethod","methodFn","position","offsetBase","getScrollTop","getScrollHeight","selectAll","map","link","getAttr","href","id","replace","trim","el","select","isVisible","parseInt","top","Boolean","sort","a","b","reduce","memo","item","push","scrollTop","scrollHeight","maxScroll","getOffsetHeight","activate","clear","isActiveTarget","isUndefined","pageYOffset","Math","max","document","body","documentElement","innerHeight","getBCR","height","_this5","links","split","selector","hasClass","dropdown","closest","setActiveState","matches","parentElement","sibling","previousElementSibling","$emit","_this6","active","addClass","removeClass","get","_default"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~50f3cb73.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _observeDom = _interopRequireDefault(require(\"../../utils/observe-dom\"));\n\nvar _warn = _interopRequireDefault(require(\"../../utils/warn\"));\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/*\n * Constants / Defaults\n */\nvar NAME = 'v-b-scrollspy';\nvar ACTIVATE_EVENT = 'bv::scrollspy::activate';\nvar Default = {\n  element: 'body',\n  offset: 10,\n  method: 'auto',\n  throttle: 75\n};\nvar DefaultType = {\n  element: '(string|element|component)',\n  offset: 'number',\n  method: 'string',\n  throttle: 'number'\n};\nvar ClassName = {\n  DROPDOWN_ITEM: 'dropdown-item',\n  ACTIVE: 'active'\n};\nvar Selector = {\n  ACTIVE: '.active',\n  NAV_LIST_GROUP: '.nav, .list-group',\n  NAV_LINKS: '.nav-link',\n  NAV_ITEMS: '.nav-item',\n  LIST_ITEMS: '.list-group-item',\n  DROPDOWN: '.dropdown, .dropup',\n  DROPDOWN_ITEMS: '.dropdown-item',\n  DROPDOWN_TOGGLE: '.dropdown-toggle'\n};\nvar OffsetMethod = {\n  OFFSET: 'offset',\n  POSITION: 'position' // HREFs must end with a hash followed by at least one non-hash character.\n  // HREFs in the links are assumed to point to non-external links.\n  // Comparison to the current page base URL is not performed!\n\n};\nvar HREF_REGEX = /^.*(#[^#]+)$/; // Transition Events\n\nvar TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd']; // Options for events\n\nvar EventOptions = {\n  passive: true,\n  capture: false\n  /*\n   * Utility Methods\n   */\n  // Better var type detection\n\n};\n\nfunction toType(obj)\n/* istanbul ignore next: not easy to test */\n{\n  return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n} // Check config properties for expected types\n\n\nfunction typeCheckConfig(componentName, config, configTypes)\n/* istanbul ignore next: not easy to test */\n{\n  for (var property in configTypes) {\n    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && (0, _dom.isElement)(value) ? 'element' : toType(value); // handle Vue instances\n\n      valueType = value && value._isVue ? 'component' : valueType;\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        /* istanbul ignore next */\n        (0, _warn.default)(\"\".concat(componentName, \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\"\"));\n      }\n    }\n  }\n}\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/* istanbul ignore next: not easy to test */\n\n\nvar ScrollSpy\n/* istanbul ignore next: not easy to test */\n=\n/*#__PURE__*/\nfunction () {\n  function ScrollSpy(element, config, $root) {\n    _classCallCheck(this, ScrollSpy);\n\n    // The element we activate links in\n    this.$el = element;\n    this.$scroller = null;\n    this.$selector = [Selector.NAV_LINKS, Selector.LIST_ITEMS, Selector.DROPDOWN_ITEMS].join(',');\n    this.$offsets = [];\n    this.$targets = [];\n    this.$activeTarget = null;\n    this.$scrollHeight = 0;\n    this.$resizeTimeout = null;\n    this.$obs_scroller = null;\n    this.$obs_targets = null;\n    this.$root = $root || null;\n    this.$config = null;\n    this.updateConfig(config);\n  }\n\n  _createClass(ScrollSpy, [{\n    key: \"updateConfig\",\n    value: function updateConfig(config, $root) {\n      if (this.$scroller) {\n        // Just in case out scroll element has changed\n        this.unlisten();\n        this.$scroller = null;\n      }\n\n      var cfg = _objectSpread({}, this.constructor.Default, config);\n\n      if ($root) {\n        this.$root = $root;\n      }\n\n      typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n      this.$config = cfg;\n\n      if (this.$root) {\n        var self = this;\n        this.$root.$nextTick(function () {\n          self.listen();\n        });\n      } else {\n        this.listen();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.unlisten();\n      clearTimeout(this.$resizeTimeout);\n      this.$resizeTimeout = null;\n      this.$el = null;\n      this.$config = null;\n      this.$scroller = null;\n      this.$selector = null;\n      this.$offsets = null;\n      this.$targets = null;\n      this.$activeTarget = null;\n      this.$scrollHeight = null;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this = this;\n\n      var scroller = this.getScroller();\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        (0, _dom.eventOn)(scroller, 'scroll', this, EventOptions);\n      }\n\n      (0, _dom.eventOn)(window, 'scroll', this, EventOptions);\n      (0, _dom.eventOn)(window, 'resize', this, EventOptions);\n      (0, _dom.eventOn)(window, 'orientationchange', this, EventOptions);\n      TransitionEndEvents.forEach(function (evtName) {\n        (0, _dom.eventOn)(window, evtName, _this, EventOptions);\n      });\n      this.setObservers(true); // Schedule a refresh\n\n      this.handleEvent('refresh');\n    }\n  }, {\n    key: \"unlisten\",\n    value: function unlisten() {\n      var _this2 = this;\n\n      var scroller = this.getScroller();\n      this.setObservers(false);\n\n      if (scroller && scroller.tagName !== 'BODY') {\n        (0, _dom.eventOff)(scroller, 'scroll', this, EventOptions);\n      }\n\n      (0, _dom.eventOff)(window, 'scroll', this, EventOptions);\n      (0, _dom.eventOff)(window, 'resize', this, EventOptions);\n      (0, _dom.eventOff)(window, 'orientationchange', this, EventOptions);\n      TransitionEndEvents.forEach(function (evtName) {\n        (0, _dom.eventOff)(window, evtName, _this2, EventOptions);\n      });\n    }\n  }, {\n    key: \"setObservers\",\n    value: function setObservers(on) {\n      var _this3 = this;\n\n      // We observe both the scroller for content changes, and the target links\n      if (this.$obs_scroller) {\n        this.$obs_scroller.disconnect();\n        this.$obs_scroller = null;\n      }\n\n      if (this.$obs_targets) {\n        this.$obs_targets.disconnect();\n        this.$obs_targets = null;\n      }\n\n      if (on) {\n        this.$obs_targets = (0, _observeDom.default)(this.$el, function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          attributes: true,\n          attributeFilter: ['href']\n        });\n        this.$obs_scroller = (0, _observeDom.default)(this.getScroller(), function () {\n          _this3.handleEvent('mutation');\n        }, {\n          subtree: true,\n          childList: true,\n          characterData: true,\n          attributes: true,\n          attributeFilter: ['id', 'style', 'class']\n        });\n      }\n    } // general event handler\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(evt) {\n      var type = (0, _inspect.isString)(evt) ? evt : evt.type;\n      var self = this;\n\n      function resizeThrottle() {\n        if (!self.$resizeTimeout) {\n          self.$resizeTimeout = setTimeout(function () {\n            self.refresh();\n            self.process();\n            self.$resizeTimeout = null;\n          }, self.$config.throttle);\n        }\n      }\n\n      if (type === 'scroll') {\n        if (!this.$obs_scroller) {\n          // Just in case we are added to the DOM before the scroll target is\n          // We re-instantiate our listeners, just in case\n          this.listen();\n        }\n\n        this.process();\n      } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n        // Postpone these events by throttle time\n        resizeThrottle();\n      }\n    } // Refresh the list of target links on the element we are applied to\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this4 = this;\n\n      var scroller = this.getScroller();\n\n      if (!scroller) {\n        return;\n      }\n\n      var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n      var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n      var methodFn = method === OffsetMethod.POSITION ? _dom.position : _dom.offset;\n      var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n      this.$offsets = [];\n      this.$targets = [];\n      this.$scrollHeight = this.getScrollHeight(); // Find all the unique link HREFs that we will control\n\n      (0, _dom.selectAll)(this.$selector, this.$el) // Get HREF value\n      .map(function (link) {\n        return (0, _dom.getAttr)(link, 'href');\n      }) // Filter out HREFs that do not match our RegExp\n      .filter(function (href) {\n        return href && HREF_REGEX.test(href || '');\n      }) // Find all elements with ID that match HREF hash\n      .map(function (href) {\n        // Convert HREF into an ID (including # at beginning)\n        var id = href.replace(HREF_REGEX, '$1').trim();\n\n        if (!id) {\n          return null;\n        } // Find the element with the ID specified by id\n\n\n        var el = (0, _dom.select)(id, scroller);\n\n        if (el && (0, _dom.isVisible)(el)) {\n          return {\n            offset: parseInt(methodFn(el).top, 10) + offsetBase,\n            target: id\n          };\n        }\n\n        return null;\n      }).filter(Boolean) // Sort them by their offsets (smallest first)\n      .sort(function (a, b) {\n        return a.offset - b.offset;\n      }) // record only unique targets/offsets\n      .reduce(function (memo, item) {\n        if (!memo[item.target]) {\n          _this4.$offsets.push(item.offset);\n\n          _this4.$targets.push(item.target);\n\n          memo[item.target] = true;\n        }\n\n        return memo;\n      }, {}); // Return this for easy chaining\n\n      return this;\n    } // Handle activating/clearing\n\n  }, {\n    key: \"process\",\n    value: function process() {\n      var scrollTop = this.getScrollTop() + this.$config.offset;\n      var scrollHeight = this.getScrollHeight();\n      var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n      if (this.$scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this.$targets[this.$targets.length - 1];\n\n        if (this.$activeTarget !== target) {\n          this.activate(target);\n        }\n\n        return;\n      }\n\n      if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n        this.$activeTarget = null;\n        this.clear();\n        return;\n      }\n\n      for (var i = this.$offsets.length; i--;) {\n        var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && ((0, _inspect.isUndefined)(this.$offsets[i + 1]) || scrollTop < this.$offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this.activate(this.$targets[i]);\n        }\n      }\n    }\n  }, {\n    key: \"getScroller\",\n    value: function getScroller() {\n      if (this.$scroller) {\n        return this.$scroller;\n      }\n\n      var scroller = this.$config.element;\n\n      if (!scroller) {\n        return null;\n      } else if ((0, _dom.isElement)(scroller.$el)) {\n        scroller = scroller.$el;\n      } else if ((0, _inspect.isString)(scroller)) {\n        scroller = (0, _dom.select)(scroller);\n      }\n\n      if (!scroller) {\n        return null;\n      }\n\n      this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n      return this.$scroller;\n    }\n  }, {\n    key: \"getScrollTop\",\n    value: function getScrollTop() {\n      var scroller = this.getScroller();\n      return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n  }, {\n    key: \"getOffsetHeight\",\n    value: function getOffsetHeight() {\n      var scroller = this.getScroller();\n      return scroller === window ? window.innerHeight : (0, _dom.getBCR)(scroller).height;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(target) {\n      var _this5 = this;\n\n      this.$activeTarget = target;\n      this.clear(); // Grab the list of target links (<a href=\"{$target}\">)\n\n      var links = (0, _dom.selectAll)(this.$selector // Split out the base selectors\n      .split(',') // Map to a selector that matches links with HREF ending in the ID (including '#')\n      .map(function (selector) {\n        return \"\".concat(selector, \"[href$=\\\"\").concat(target, \"\\\"]\");\n      }) // Join back into a single selector string\n      .join(','), this.$el);\n      links.forEach(function (link) {\n        if ((0, _dom.hasClass)(link, ClassName.DROPDOWN_ITEM)) {\n          // This is a dropdown item, so find the .dropdown-toggle and set it's state\n          var dropdown = (0, _dom.closest)(Selector.DROPDOWN, link);\n\n          if (dropdown) {\n            _this5.setActiveState((0, _dom.select)(Selector.DROPDOWN_TOGGLE, dropdown), true);\n          } // Also set this link's state\n\n\n          _this5.setActiveState(link, true);\n        } else {\n          // Set triggered link as active\n          _this5.setActiveState(link, true);\n\n          if ((0, _dom.matches)(link.parentElement, Selector.NAV_ITEMS)) {\n            // Handle nav-link inside nav-item, and set nav-item active\n            _this5.setActiveState(link.parentElement, true);\n          } // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n\n          var el = link;\n\n          while (el) {\n            el = (0, _dom.closest)(Selector.NAV_LIST_GROUP, el);\n            var sibling = el ? el.previousElementSibling : null;\n\n            if (sibling && (0, _dom.matches)(sibling, \"\".concat(Selector.NAV_LINKS, \", \").concat(Selector.LIST_ITEMS))) {\n              _this5.setActiveState(sibling, true);\n            } // Handle special case where nav-link is inside a nav-item\n\n\n            if (sibling && (0, _dom.matches)(sibling, Selector.NAV_ITEMS)) {\n              _this5.setActiveState((0, _dom.select)(Selector.NAV_LINKS, sibling), true); // Add active state to nav-item as well\n\n\n              _this5.setActiveState(sibling, true);\n            }\n          }\n        }\n      }); // Signal event to via $root, passing ID of activated target and reference to array of links\n\n      if (links && links.length > 0 && this.$root) {\n        this.$root.$emit(ACTIVATE_EVENT, target, links);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this6 = this;\n\n      (0, _dom.selectAll)(\"\".concat(this.$selector, \", \").concat(Selector.NAV_ITEMS), this.$el).filter(function (el) {\n        return (0, _dom.hasClass)(el, ClassName.ACTIVE);\n      }).forEach(function (el) {\n        return _this6.setActiveState(el, false);\n      });\n    }\n  }, {\n    key: \"setActiveState\",\n    value: function setActiveState(el, active) {\n      if (!el) {\n        return;\n      }\n\n      if (active) {\n        (0, _dom.addClass)(el, ClassName.ACTIVE);\n      } else {\n        (0, _dom.removeClass)(el, ClassName.ACTIVE);\n      }\n    }\n  }], [{\n    key: \"Name\",\n    get: function get() {\n      return NAME;\n    }\n  }, {\n    key: \"Default\",\n    get: function get() {\n      return Default;\n    }\n  }, {\n    key: \"DefaultType\",\n    get: function get() {\n      return DefaultType;\n    }\n  }]);\n\n  return ScrollSpy;\n}();\n\nvar _default = ScrollSpy;\nexports.default = _default;"],"sourceRoot":""}