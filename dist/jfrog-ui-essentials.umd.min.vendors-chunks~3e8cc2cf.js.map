{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/identity.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/diverging.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/index.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/constant.js","webpack://jfrog-ui-essentials/./node_modules/d3-scale/src/continuous.js"],"names":["identity","domain","unknown","scale","x","isNaN","invert","range","_","arguments","length","array","call","number","slice","copy","Object","linear","transformer","t0","t1","t2","k10","k21","transform","x0","x1","x2","interpolator","continuous","clamp","Math","max","min","t","diverging","sequential","init","apply","divergingLog","log","base","divergingSymlog","symlog","constant","divergingPow","pow","exponent","divergingSqrt","__webpack_require__","d","__webpack_exports__","band","ordinal","quantile","quantize","threshold","time","utcTime","sequentialQuantile","tickFormat","unit","normalize","a","b","NaN","clamper","bimap","interpolate","d0","d1","r0","r1","polymap","j","Array","r","i","reverse","src","source","target","untransform","piecewise","output","input","d3_interpolate_src","rescale","map","y","rangeRound","u"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~3e8cc2cf.js","sourcesContent":["import {map} from \"./array\";\nimport {linearish} from \"./linear\";\nimport number from \"./number\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? map.call(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n","import {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\nimport {linearish} from \"./linear\";\nimport {loggish} from \"./log\";\nimport {copy} from \"./sequential\";\nimport {symlogish} from \"./symlog\";\nimport {powish} from \"./pow\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);\n    return scale;\n  };\n}\n\nexport default function diverging() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingLog() {\n  var scale = loggish(transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n","export {\n  default as scaleBand,\n  point as scalePoint\n} from \"./band\";\n\nexport {\n  default as scaleIdentity\n} from \"./identity\";\n\nexport {\n  default as scaleLinear\n} from \"./linear\";\n\nexport {\n  default as scaleLog\n} from \"./log\";\n\nexport {\n  default as scaleSymlog\n} from \"./symlog\";\n\nexport {\n  default as scaleOrdinal,\n  implicit as scaleImplicit\n} from \"./ordinal\";\n\nexport {\n  default as scalePow,\n  sqrt as scaleSqrt\n} from \"./pow\";\n\nexport {\n  default as scaleQuantile\n} from \"./quantile\";\n\nexport {\n  default as scaleQuantize\n} from \"./quantize\";\n\nexport {\n  default as scaleThreshold\n} from \"./threshold\";\n\nexport {\n  default as scaleTime\n} from \"./time\";\n\nexport {\n  default as scaleUtc\n} from \"./utcTime\";\n\nexport {\n  default as scaleSequential,\n  sequentialLog as scaleSequentialLog,\n  sequentialPow as scaleSequentialPow,\n  sequentialSqrt as scaleSequentialSqrt,\n  sequentialSymlog as scaleSequentialSymlog\n} from \"./sequential\";\n\nexport {\n  default as scaleSequentialQuantile\n} from \"./sequentialQuantile\";\n\nexport {\n  default as scaleDiverging,\n  divergingLog as scaleDivergingLog,\n  divergingPow as scaleDivergingPow,\n  divergingSqrt as scaleDivergingSqrt,\n  divergingSymlog as scaleDivergingSymlog\n} from \"./diverging\";\n\nexport {\n  default as tickFormat\n} from \"./tickFormat\";\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(domain) {\n  var a = domain[0], b = domain[domain.length - 1], t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}\n"],"sourceRoot":""}