{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/source-map/lib/source-map-generator.js"],"names":["base64VLQ","__webpack_require__","util","ArraySet","MappingList","SourceMapGenerator","aArgs","this","_file","getArg","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","prototype","_version","fromSourceMap","aSourceMapConsumer","sourceRoot","generator","file","eachMapping","mapping","newMapping","generated","line","generatedLine","column","generatedColumn","source","relative","original","originalLine","originalColumn","name","addMapping","sources","forEach","sourceFile","sourceRelative","has","add","content","sourceContentFor","setSourceContent","_validateMapping","String","aSourceFile","aSourceContent","Object","create","toSetString","keys","length","applySourceMap","aSourceMapPath","Error","newSources","newNames","unsortedForEach","originalPositionFor","join","aGenerated","aOriginal","aSource","aName","JSON","stringify","_serializeMappings","next","nameIdx","sourceIdx","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","result","mappings","toArray","i","len","compareByGeneratedPositionsInflated","encode","indexOf","_generateSourcesContent","aSources","aSourceRoot","map","key","hasOwnProperty","call","toJSON","version","names","sourcesContent","toString","exports"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~97efd3ff.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n"],"sourceRoot":""}