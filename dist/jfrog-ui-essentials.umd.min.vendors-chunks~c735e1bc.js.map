{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-format/src/precisionFixed.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/precisionPrefix.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/precisionRound.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/index.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/identity.js","webpack://jfrog-ui-essentials/./node_modules/d3-format/src/locale.js"],"names":["precisionFixed","step","Math","max","Object","exponent","abs","precisionPrefix","value","min","floor","precisionRound","__webpack_require__","d","__webpack_exports__","defaultLocale","formatSpecifier","identity","x","prefixes","locale","group","grouping","thousands","formatGroup","currency","decimal","numerals","formatNumerals","percent","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format","i","n","c","valuePrefix","valueSuffix","valueNegative","formatTrim","formatPrefixAuto","length","charCodeAt","slice","Infinity","padding","Array","join","toString","formatPrefix","f","e","k","pow"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~c735e1bc.js","sourcesContent":["import exponent from \"./exponent\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export {default as formatDefaultLocale, format, formatPrefix} from \"./defaultLocale\";\nexport {default as formatLocale} from \"./locale\";\nexport {default as formatSpecifier} from \"./formatSpecifier\";\nexport {default as precisionFixed} from \"./precisionFixed\";\nexport {default as precisionPrefix} from \"./precisionPrefix\";\nexport {default as precisionRound} from \"./precisionRound\";\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTrim from \"./formatTrim\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"],"sourceRoot":""}