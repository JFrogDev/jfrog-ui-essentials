{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/mixins/form-state.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/mixins/form-validity.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/mixins/form-text.js"],"names":["exports","__esModule","default","_default","props","state","type","String","Boolean","computed","computedState","this","stateClass","validity","cache","get","$refs","input","validationMessage","willValidate","methods","setCustomValidity","_this$$refs$input","apply","arguments","checkValidity","_this$$refs$input2","reportValidity","_this$$refs$input3","_inspect","__webpack_require__","model","prop","event","value","Number","ariaInvalid","readonly","plaintext","autocomplete","placeholder","formatter","Function","trim","number","lazyFormatter","data","localValue","stringifyValue","computedClass","custom-range","form-control-plaintext","form-control","sizeFormClass","computedAriaInvalid","watch","newVal","oldVal","mounted","isUndefined","isNull","getFormatted","force","length","undefined","isFunction","updateValue","num","parseFloat","isNaN","$emit","onInput","evt","target","composing","formatted","defaultPrevented","preventDefault","onChange","onBlur","focus","disabled","$el","blur"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~7eec0944.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/* Form control contextual state class computation\n *\n * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\n * state can be one of five values:\n *  - true or 'valid' for is-valid\n *  - false or 'invalid' for is-invalid\n *  - null (or empty string) for no contextual state\n */\n// @vue/component\nvar _default = {\n  props: {\n    state: {\n      // true/'valid', false/'invalid', '',null\n      // The order must be String first, then Boolean!\n      type: [String, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    computedState: function computedState() {\n      var state = this.state;\n\n      if (state === '') {\n        return null;\n      } else if (state === true || state === 'valid') {\n        return true;\n      } else if (state === false || state === 'invalid') {\n        return false;\n      }\n\n      return null;\n    },\n    stateClass: function stateClass() {\n      var state = this.computedState;\n\n      if (state === true) {\n        return 'is-valid';\n      } else if (state === false) {\n        return 'is-invalid';\n      }\n\n      return null;\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n// @vue/component\nvar _default = {\n  computed: {\n    validity: {\n      // Expose validity property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validity;\n      }\n    },\n    validationMessage: {\n      // Expose validationMessage property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validationMessage;\n      }\n    },\n    willValidate: {\n      // Expose willValidate property\n      cache: false,\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.willValidate;\n      }\n    }\n  },\n  methods: {\n    setCustomValidity: function setCustomValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input;\n\n      // For external handler that may want a setCustomValidity(...) method\n      return (_this$$refs$input = this.$refs.input).setCustomValidity.apply(_this$$refs$input, arguments);\n    },\n    checkValidity: function checkValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input2;\n\n      // For external handler that may want a checkValidity(...) method\n      return (_this$$refs$input2 = this.$refs.input).checkValidity.apply(_this$$refs$input2, arguments);\n    },\n    reportValidity: function reportValidity()\n    /* istanbul ignore next */\n    {\n      var _this$$refs$input3;\n\n      // For external handler that may want a reportValidity(...) method\n      return (_this$$refs$input3 = this.$refs.input).reportValidity.apply(_this$$refs$input3, arguments);\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _inspect = require(\"../utils/inspect\");\n\n// @vue/component\nvar _default = {\n  model: {\n    prop: 'value',\n    event: 'update'\n  },\n  props: {\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    plaintext: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    formatter: {\n      type: Function,\n      default: null\n    },\n    trim: {\n      type: Boolean,\n      default: false\n    },\n    number: {\n      type: Boolean,\n      default: false\n    },\n    lazyFormatter: {\n      type: Boolean,\n      value: false\n    }\n  },\n  data: function data() {\n    return {\n      localValue: this.stringifyValue(this.value)\n    };\n  },\n  computed: {\n    computedClass: function computedClass() {\n      return [{\n        // Range input needs class custom-range\n        'custom-range': this.type === 'range',\n        // plaintext not supported by type=range or type=color\n        'form-control-plaintext': this.plaintext && this.type !== 'range' && this.type !== 'color',\n        // form-control not used by type=range or plaintext. Always used by type=color\n        'form-control': !this.plaintext && this.type !== 'range' || this.type === 'color'\n      }, this.sizeFormClass, this.stateClass];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      if (!this.ariaInvalid || this.ariaInvalid === 'false') {\n        // this.ariaInvalid is null or false or 'false'\n        return this.computedState === false ? 'true' : null;\n      }\n\n      if (this.ariaInvalid === true) {\n        // User wants explicit aria-invalid=true\n        return 'true';\n      } // Most likely a string value (which could be the string 'true')\n\n\n      return this.ariaInvalid;\n    }\n  },\n  watch: {\n    value: function value(newVal, oldVal) {\n      if (newVal !== oldVal && newVal !== this.localValue) {\n        this.localValue = this.stringifyValue(newVal);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var value = this.stringifyValue(this.value);\n\n    if (value !== this.localValue) {\n      /* istanbul ignore next */\n      this.localValue = value;\n    }\n  },\n  methods: {\n    stringifyValue: function stringifyValue(value) {\n      return (0, _inspect.isUndefined)(value) || (0, _inspect.isNull)(value) ? '' : String(value);\n    },\n    getFormatted: function getFormatted(value, event) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      value = this.stringifyValue(value);\n\n      if ((!this.lazyFormatter || force) && (0, _inspect.isFunction)(this.formatter)) {\n        value = this.formatter(value, event);\n      }\n\n      return value;\n    },\n    updateValue: function updateValue(value) {\n      value = this.stringifyValue(value);\n\n      if (this.localValue !== value) {\n        // keep the input set to the value before modifiers\n        this.localValue = value;\n\n        if (this.number) {\n          // Emulate .number modifier behaviour\n          var num = parseFloat(value);\n          value = isNaN(num) ? value : num;\n        } else if (this.trim) {\n          // Emulate .trim modifier behaviour\n          value = value.trim();\n        } // Update the v-model\n\n\n        this.$emit('update', value);\n      }\n    },\n    onInput: function onInput(evt) {\n      // evt.target.composing is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      var formatted = this.getFormatted(evt.target.value, evt);\n\n      if (formatted === false || evt.defaultPrevented) {\n        evt.preventDefault();\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('input', formatted);\n    },\n    onChange: function onChange(evt) {\n      // evt.target.composing is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      var formatted = this.getFormatted(evt.target.value, evt);\n\n      if (formatted === false) {\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('change', formatted);\n    },\n    onBlur: function onBlur(evt) {\n      // lazy formatter\n      if (this.lazyFormatter) {\n        var formatted = this.getFormatted(evt.target.value, evt, true);\n\n        if (formatted === false) {\n          return;\n        }\n\n        this.updateValue(formatted);\n      } // Emit native blur event\n\n\n      this.$emit('blur', evt);\n    },\n    focus: function focus() {\n      // For external handler that may want a focus method\n      if (!this.disabled) {\n        this.$el.focus();\n      }\n    },\n    blur: function blur() {\n      // For external handler that may want a blur method\n      if (!this.disabled) {\n        this.$el.blur();\n      }\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}