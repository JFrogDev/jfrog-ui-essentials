{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/vue-clipboard2/vue-clipboard.js"],"names":["Clipboard","__webpack_require__","VueClipboardConfig","autoSetContainer","VueClipboard","install","Vue","prototype","$clipboardConfig","$copyText","text","container","Promise","resolve","reject","fake_el","document","createElement","clipboard","action","body","on","e","destroy","click","directive","bind","el","binding","vnode","arg","_v_clipboard_success","value","_v_clipboard_error","undefined","callback","_v_clipboard","update","unbind","config","module","exports"],"mappings":"4LAAA,IAAAA,EAAgBC,EAAQ,QAExBC,EAAA,CACAC,kBAAA,GAGAC,EAAA,CACAC,QAAA,SAAAC,GACAA,EAAAC,UAAAC,iBAAAN,EACAI,EAAAC,UAAAE,UAAA,SAAAC,EAAAC,GACA,WAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,SAAAC,cAAA,UACAC,EAAA,IAAAlB,EAAAe,EAAA,CACAL,KAAA,WAA6B,OAAAA,GAC7BS,OAAA,WAA+B,cAC/BR,UAAA,kBAAAA,IAAAK,SAAAI,OAEAF,EAAAG,GAAA,mBAAAC,GACAJ,EAAAK,UACAV,EAAAS,KAEAJ,EAAAG,GAAA,iBAAAC,GACAJ,EAAAK,UACAT,EAAAQ,KAEAP,EAAAS,WAIAlB,EAAAmB,UAAA,aACAC,KAAA,SAAAC,EAAAC,EAAAC,GACA,eAAAD,EAAAE,IACAH,EAAAI,qBAAAH,EAAAI,WACS,aAAAJ,EAAAE,IACTH,EAAAM,mBAAAL,EAAAI,UACS,CACT,IAAAd,EAAA,IAAAlB,EAAA2B,EAAA,CACAjB,KAAA,WAA+B,OAAAkB,EAAAI,OAC/Bb,OAAA,WAAiC,cAAAS,EAAAE,IAAA,cACjCnB,UAAAT,EAAAC,iBAAAwB,OAAAO,IAEAhB,EAAAG,GAAA,mBAAAC,GACA,IAAAa,EAAAR,EAAAI,qBACAI,KAAAb,KAEAJ,EAAAG,GAAA,iBAAAC,GACA,IAAAa,EAAAR,EAAAM,mBACAE,KAAAb,KAEAK,EAAAS,aAAAlB,IAGAmB,OAAA,SAAAV,EAAAC,GACA,YAAAA,EAAAE,IACAH,EAAAI,qBAAAH,EAAAI,MACS,UAAAJ,EAAAE,IACTH,EAAAM,mBAAAL,EAAAI,OAEAL,EAAAS,aAAA1B,KAAA,WAA8C,OAAAkB,EAAAI,OAC9CL,EAAAS,aAAAjB,OAAA,WAAgD,cAAAS,EAAAE,IAAA,gBAGhDQ,OAAA,SAAAX,EAAAC,GACA,YAAAA,EAAAE,WACAH,EAAAI,qBACS,UAAAH,EAAAE,WACTH,EAAAM,oBAEAN,EAAAS,aAAAb,iBACAI,EAAAS,kBAKAG,OAAArC,GAIAsC,EAAAC,QAAArC","file":"jfrog-ui-essentials.umd.min.vendors-chunks~90a185b0.js","sourcesContent":["var Clipboard = require('clipboard/dist/clipboard.min.js') // FIXME: workaround for browserify\n\nvar VueClipboardConfig = {\n  autoSetContainer: false\n};\n\nvar VueClipboard = {\n  install: function (Vue) {\n    Vue.prototype.$clipboardConfig = VueClipboardConfig;\n    Vue.prototype.$copyText = function (text, container) {\n      return new Promise(function (resolve, reject) {\n        var fake_el = document.createElement('button');\n        var clipboard = new Clipboard(fake_el, {\n          text: function () { return text },\n          action: function () { return 'copy' },\n          container: typeof container === 'object' ? container : document.body\n        });\n        clipboard.on('success', function (e) {\n          clipboard.destroy();\n          resolve(e);\n        });\n        clipboard.on('error', function (e) {\n          clipboard.destroy();\n          reject(e);\n        });\n        fake_el.click();\n      });\n    };\n\n    Vue.directive('clipboard', {\n      bind: function (el, binding, vnode) {\n        if(binding.arg === 'success') {\n          el._v_clipboard_success = binding.value\n        } else if(binding.arg === 'error') {\n          el._v_clipboard_error = binding.value\n        } else {\n          var clipboard = new Clipboard(el, {\n            text: function () { return binding.value },\n            action: function () { return binding.arg === 'cut' ? 'cut' : 'copy' },\n            container: VueClipboardConfig.autoSetContainer ? el : undefined\n          })\n          clipboard.on('success', function (e) {\n            var callback = el._v_clipboard_success\n            callback && callback(e)\n          })\n          clipboard.on('error', function (e) {\n            var callback = el._v_clipboard_error\n            callback && callback(e)\n          })\n          el._v_clipboard = clipboard\n        }\n      },\n      update: function (el, binding) {\n        if(binding.arg === 'success') {\n          el._v_clipboard_success = binding.value\n        } else if(binding.arg === 'error') {\n          el._v_clipboard_error = binding.value\n        } else {\n          el._v_clipboard.text = function () { return binding.value }\n          el._v_clipboard.action = function () { return binding.arg === 'cut' ? 'cut' : 'copy' }\n        }\n      },\n      unbind: function (el, binding) {\n        if(binding.arg === 'success') {\n          delete el._v_clipboard_success\n        } else if(binding.arg === 'error') {\n          delete el._v_clipboard_error\n        } else {\n          el._v_clipboard.destroy()\n          delete el._v_clipboard\n        }\n      }\n    })\n  },\n  config: VueClipboardConfig\n}\n\nif (typeof exports == \"object\") {\n  module.exports = VueClipboard\n} else if (typeof define == \"function\" && define.amd) {\n  define([], function() {\n    return VueClipboard\n  })\n}\n"],"sourceRoot":""}