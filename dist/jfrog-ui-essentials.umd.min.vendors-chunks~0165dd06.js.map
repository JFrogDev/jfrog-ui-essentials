{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/d3-dsv/src/dsv.js","webpack://jfrog-ui-essentials/./node_modules/d3-dsv/src/csv.js","webpack://jfrog-ui-essentials/./node_modules/d3-dsv/src/autoType.js"],"names":["EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","name","i","JSON","stringify","join","customConverter","f","object","row","inferColumns","rows","columnSet","Object","create","forEach","column","push","pad","value","width","s","length","Array","formatYear","year","formatDate","date","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","__webpack_exports__","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parse","text","convert","parseRows","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","formatValue","format","concat","formatBody","formatRows","formatRow","Date","test","__webpack_require__","d","csvParse","csvParseRows","csvFormat","csvFormatBody","csvFormatRows","_dsv__WEBPACK_IMPORTED_MODULE_0__","csv","autoType","key","number","trim","NaN"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~0165dd06.js","sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\n","export default function autoType(object) {\n  for (var key in object) {\n    var value = object[key].trim(), number;\n    if (!value) value = null;\n    else if (value === \"true\") value = true;\n    else if (value === \"false\") value = false;\n    else if (value === \"NaN\") value = NaN;\n    else if (!isNaN(number = +value)) value = number;\n    else if (/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/.test(value)) value = new Date(value);\n    else continue;\n    object[key] = value;\n  }\n  return object;\n}\n"],"sourceRoot":""}