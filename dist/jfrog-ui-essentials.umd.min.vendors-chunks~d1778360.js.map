{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/source-map/lib/quick-sort.js","webpack://jfrog-ui-essentials/./node_modules/source-map/lib/mapping-list.js"],"names":["swap","ary","x","y","temp","randomIntInRange","low","high","Math","round","random","doQuickSort","comparator","p","r","pivotIndex","i","pivot","j","q","exports","quickSort","length","util","__webpack_require__","generatedPositionAfter","mappingA","mappingB","lineA","generatedLine","lineB","columnA","generatedColumn","columnB","compareByGeneratedPositionsInflated","MappingList","this","_array","_sorted","_last","prototype","unsortedForEach","aCallback","aThisArg","forEach","add","aMapping","push","toArray","sort"],"mappings":"0LA2BA,SAAAA,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAC,GACAD,EAAAC,GAAAD,EAAAE,GACAF,EAAAE,GAAAC,EAWA,SAAAC,EAAAC,EAAAC,GACA,OAAAC,KAAAC,MAAAH,EAAAE,KAAAE,UAAAH,EAAAD,IAeA,SAAAK,EAAAV,EAAAW,EAAAC,EAAAC,GAKA,GAAAD,EAAAC,EAAA,CAYA,IAAAC,EAAAV,EAAAQ,EAAAC,GACAE,EAAAH,EAAA,EAEAb,EAAAC,EAAAc,EAAAD,GASA,IARA,IAAAG,EAAAhB,EAAAa,GAQAI,EAAAL,EAAmBK,EAAAJ,EAAOI,IAC1BN,EAAAX,EAAAiB,GAAAD,IAAA,IACAD,GAAA,EACAhB,EAAAC,EAAAe,EAAAE,IAIAlB,EAAAC,EAAAe,EAAA,EAAAE,GACA,IAAAC,EAAAH,EAAA,EAIAL,EAAAV,EAAAW,EAAAC,EAAAM,EAAA,GACAR,EAAAV,EAAAW,EAAAO,EAAA,EAAAL,IAYAM,EAAAC,UAAA,SAAApB,EAAAW,GACAD,EAAAV,EAAAW,EAAA,EAAAX,EAAAqB,OAAA,2BCzGA,IAAAC,EAAWC,EAAQ,QAMnB,SAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAF,EAAAG,cACAC,EAAAH,EAAAE,cACAE,EAAAL,EAAAM,gBACAC,EAAAN,EAAAK,gBACA,OAAAF,EAAAF,GAAAE,GAAAF,GAAAK,GAAAF,GACAR,EAAAW,oCAAAR,EAAAC,IAAA,EAQA,SAAAQ,IACAC,KAAAC,OAAA,GACAD,KAAAE,SAAA,EAEAF,KAAAG,MAAA,CAAgBV,eAAA,EAAAG,gBAAA,GAShBG,EAAAK,UAAAC,gBACA,SAAAC,EAAAC,GACAP,KAAAC,OAAAO,QAAAF,EAAAC,IAQAR,EAAAK,UAAAK,IAAA,SAAAC,GACArB,EAAAW,KAAAG,MAAAO,IACAV,KAAAG,MAAAO,EACAV,KAAAC,OAAAU,KAAAD,KAEAV,KAAAE,SAAA,EACAF,KAAAC,OAAAU,KAAAD,KAaAX,EAAAK,UAAAQ,QAAA,WAKA,OAJAZ,KAAAE,UACAF,KAAAC,OAAAY,KAAA1B,EAAAW,qCACAE,KAAAE,SAAA,GAEAF,KAAAC,QAGAjB,EAAAe","file":"jfrog-ui-essentials.umd.min.vendors-chunks~d1778360.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n"],"sourceRoot":""}