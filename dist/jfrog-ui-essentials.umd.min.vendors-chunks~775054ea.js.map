{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/directives/toggle/toggle.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/directives/toggle/index.js"],"names":["exports","__esModule","default","_dom","__webpack_require__","_env","_target","listenTypes","click","BV_TOGGLE","BV_TOGGLE_STATE","BV_TOGGLE_CONTROLS","BV_TOGGLE_TARGETS","EVENT_TOGGLE","EVENT_STATE","EVENT_STATE_SYNC","resetProp","el","prop","handleUpdate","binding","vnode","isBrowser","addClass","setAttr","removeClass","_default","bind","targets","bindTargets","_ref","forEach","target","context","$root","$emit","length","join","tagName","id","state","indexOf","$on","componentUpdated","updated","unbind","unbindTargets","$off","removeAttr","_toggle","_interopRequireDefault","_plugins","obj","directives","BToggle","install","installFactory"],"mappings":"uMAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAWC,EAAQ,QAEnBC,EAAWD,EAAQ,QAEnBE,EAAcF,EAAQ,QAGtBG,EAAA,CACAC,OAAA,GAGAC,EAAA,gBACAC,EAAA,sBACAC,EAAA,yBACAC,EAAA,wBAEAC,EAAA,uBAEAC,EAAA,sBAIAC,EAAA,4BAEAC,EAAA,SAAAC,EAAAC,GACAD,EAAAC,GAAA,YACAD,EAAAC,IAMAC,EAAA,SAAAF,EAAAG,EAAAC,GACAhB,EAAAiB,aAOA,IAAAL,EAAAP,KACA,EAAAP,EAAAoB,UAAAN,EAAA,cACA,EAAAd,EAAAqB,SAAAP,EAAA,0BACG,IAAAA,EAAAP,MACH,EAAAP,EAAAsB,aAAAR,EAAA,cACA,EAAAd,EAAAqB,SAAAP,EAAA,2BAGA,EAAAd,EAAAqB,SAAAP,EAAA,gBAAAA,EAAAN,MAOAe,EAAA,CACAC,KAAA,SAAAV,EAAAG,EAAAC,GACA,IAAAO,GAAA,EAAAtB,EAAAuB,aAAAR,EAAAD,EAAAb,EAAA,SAAAuB,GACA,IAAAF,EAAAE,EAAAF,QACAP,EAAAS,EAAAT,MACAO,EAAAG,QAAA,SAAAC,GACAX,EAAAY,QAAAC,MAAAC,MAAAtB,EAAAmB,OAIA3B,EAAAiB,WAAAD,EAAAY,SAAAL,EAAAQ,OAAA,IAEAnB,EAAAL,GAAAgB,EAEAX,EAAAN,GAAAiB,EAAAS,KAAA,KAEApB,EAAAP,IAAA,GACA,EAAAP,EAAAqB,SAAAP,EAAA,gBAAAA,EAAAN,KACA,EAAAR,EAAAqB,SAAAP,EAAA,yBAEA,WAAAA,EAAAqB,UACA,EAAAnC,EAAAqB,SAAAP,EAAA,iBAIAA,EAAAR,GAAA,SAAA8B,EAAAC,GACA,IAAAZ,EAAAX,EAAAL,IAAA,IAEA,IAAAgB,EAAAa,QAAAF,MAEA,EAAApC,EAAAqB,SAAAP,EAAA,gBAAAuB,EAAA,gBAEAvB,EAAAP,GAAA8B,EAEAA,GACA,EAAArC,EAAAsB,aAAAR,EAAA,cAEA,EAAAd,EAAAoB,UAAAN,EAAA,eAMAI,EAAAY,QAAAC,MAAAQ,IAAA5B,EAAAG,EAAAR,IAEAY,EAAAY,QAAAC,MAAAQ,IAAA3B,EAAAE,EAAAR,MAGAkC,iBAAAxB,EACAyB,QAAAzB,EACA0B,OAAA,SAAA5B,EAAAG,EAAAC,IAGA,EAAAf,EAAAwC,eAAAzB,EAAAD,EAAAb,GAEAU,EAAAR,KACAY,EAAAY,QAAAC,MAAAa,KAAAjC,EAAAG,EAAAR,IACAY,EAAAY,QAAAC,MAAAa,KAAAhC,EAAAE,EAAAR,KAIAO,EAAAC,EAAAR,GACAO,EAAAC,EAAAP,GACAM,EAAAC,EAAAN,GACAK,EAAAC,EAAAL,IAEA,EAAAT,EAAAsB,aAAAR,EAAA,cACA,EAAAd,EAAA6C,YAAA/B,EAAA,kBACA,EAAAd,EAAA6C,YAAA/B,EAAA,kBACA,EAAAd,EAAA6C,YAAA/B,EAAA,UAGAjB,EAAAE,QAAAwB,qCClIA1B,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAA+C,EAAAC,EAAqC9C,EAAQ,SAE7C+C,EAAe/C,EAAQ,QAEvB,SAAA8C,EAAAE,GAAsC,OAAAA,KAAAnD,WAAAmD,EAAA,CAAuClD,QAAAkD,GAE7E,IAAAC,EAAA,CACAC,QAAAL,EAAA/C,SAEAwB,EAAA,CACA6B,SAAA,EAAAJ,EAAAK,gBAAA,CACAH,gBAGArD,EAAAE,QAAAwB","file":"jfrog-ui-essentials.umd.min.vendors-chunks~775054ea.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _env = require(\"../../utils/env\");\n\nvar _target = require(\"../../utils/target\");\n\n// Target listen types\nvar listenTypes = {\n  click: true // Property key for handler storage\n\n};\nvar BV_TOGGLE = '__BV_toggle__';\nvar BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nvar BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nvar BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nvar EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  if (!_env.isBrowser) {\n    return;\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    (0, _dom.addClass)(el, 'collapsed');\n    (0, _dom.setAttr)(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    (0, _dom.removeClass)(el, 'collapsed');\n    (0, _dom.setAttr)(el, 'aria-expanded', 'false');\n  }\n\n  (0, _dom.setAttr)(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nvar _default = {\n  bind: function bind(el, binding, vnode) {\n    var targets = (0, _target.bindTargets)(vnode, binding, listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_TOGGLE, target);\n      });\n    });\n\n    if (_env.isBrowser && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      (0, _dom.setAttr)(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      (0, _dom.setAttr)(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        (0, _dom.setAttr)(el, 'role', 'button');\n      } // Toggle state handler, stored on element\n\n\n      el[BV_TOGGLE] = function toggleDirectiveHandler(id, state) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          (0, _dom.setAttr)(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            (0, _dom.removeClass)(el, 'collapsed');\n          } else {\n            (0, _dom.addClass)(el, 'collapsed');\n          }\n        }\n      }; // Listen for toggle state changes (public)\n\n\n      vnode.context.$root.$on(EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    (0, _target.unbindTargets)(vnode, binding, listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    (0, _dom.removeClass)(el, 'collapsed');\n    (0, _dom.removeAttr)(el, 'aria-expanded');\n    (0, _dom.removeAttr)(el, 'aria-controls');\n    (0, _dom.removeAttr)(el, 'role');\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _toggle = _interopRequireDefault(require(\"./toggle\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar directives = {\n  BToggle: _toggle.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    directives: directives\n  })\n};\nexports.default = _default;"],"sourceRoot":""}