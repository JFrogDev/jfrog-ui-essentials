{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/mixins/form-radio-check.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","exports","__esModule","default","_default","model","prop","event","props","checked","inline","type","Boolean","plain","button","buttonVariant","String","ariaLabel","ariaLabelledby","data","localChecked","this","is_Group","bvGroup","hasFocus","computed","computedLocalChecked","get","set","val","is_BtnMode","buttons","is_Plain","is_Custom","is_Switch","is_Radio","switches","switch","is_Inline","is_Disabled","disabled","is_Required","get_Name","required","groupName","name","get_Form","form","get_Size","size","get_State","computedState","get_ButtonVariant","buttonClasses","concat","is_Checked","watch","newVal","oldVal","methods","handleFocus","evt","target","focus","$refs","input","blur","render","h","defaultSlot","$slots","on","change","handleChange","ref","class","form-check-input","custom-control-input","is-valid","is-invalid","position-static","directives","rawName","expression","attrs","id","safeId","autocomplete","aria-required","aria-label","aria-labelledby","domProps","label","form-check-label","custom-control-label","for","form-check","form-check-inline","custom-control","custom-control-inline","custom-checkbox","is_Check","custom-switch","custom-radio"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~62ceb5b4.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @vue/component\nvar _default = {\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    value: {// Value when checked\n      // type: Object,\n      // default: undefined\n    },\n    checked: {// This is the v-model\n      // type: Object,\n      // default: undefined\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    button: {\n      // Only applicable in standalone mode (non group)\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: null\n    },\n    ariaLabel: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    },\n    ariaLabelledby: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      localChecked: this.is_Group ? this.bvGroup.checked : this.checked,\n      hasFocus: false\n    };\n  },\n  computed: {\n    computedLocalChecked: {\n      get: function get() {\n        return this.is_Group ? this.bvGroup.localChecked : this.localChecked;\n      },\n      set: function set(val) {\n        if (this.is_Group) {\n          this.bvGroup.localChecked = val;\n        } else {\n          this.localChecked = val;\n        }\n      }\n    },\n    is_Group: function is_Group() {\n      // Is this check/radio a child of check-group or radio-group?\n      return Boolean(this.bvGroup);\n    },\n    is_BtnMode: function is_BtnMode() {\n      // Support button style in single input mode\n      return this.is_Group ? this.bvGroup.buttons : this.button;\n    },\n    is_Plain: function is_Plain() {\n      return this.is_BtnMode ? false : this.is_Group ? this.bvGroup.plain : this.plain;\n    },\n    is_Custom: function is_Custom() {\n      return this.is_BtnMode ? false : !this.is_Plain;\n    },\n    is_Switch: function is_Switch() {\n      // Custom switch styling (checkboxes only)\n      return this.is_BtnMode || this.is_Radio || this.is_Plain ? false : this.is_Group ? this.bvGroup.switches : this.switch;\n    },\n    is_Inline: function is_Inline() {\n      return this.is_Group ? this.bvGroup.inline : this.inline;\n    },\n    is_Disabled: function is_Disabled() {\n      // Child can be disabled while parent isn't, but is always disabled if group is\n      return this.is_Group ? this.bvGroup.disabled || this.disabled : this.disabled;\n    },\n    is_Required: function is_Required() {\n      // Required only works when a name is provided for the input(s)\n      // Child can only be required when parent is\n      // Groups will always have a name (either user supplied or auto generated)\n      return Boolean(this.get_Name && (this.is_Group ? this.bvGroup.required : this.required));\n    },\n    get_Name: function get_Name() {\n      // Group name preferred over local name\n      return (this.is_Group ? this.bvGroup.groupName : this.name) || null;\n    },\n    get_Form: function get_Form() {\n      return (this.is_Group ? this.bvGroup.form : this.form) || null;\n    },\n    get_Size: function get_Size() {\n      return (this.is_Group ? this.bvGroup.size : this.size) || '';\n    },\n    get_State: function get_State() {\n      return this.is_Group ? this.bvGroup.computedState : this.computedState;\n    },\n    get_ButtonVariant: function get_ButtonVariant() {\n      // Local variant preferred over group variant\n      if (this.buttonVariant) {\n        return this.buttonVariant;\n      } else if (this.is_Group && this.bvGroup.buttonVariant) {\n        return this.bvGroup.buttonVariant;\n      } // default variant\n\n\n      return 'secondary';\n    },\n    buttonClasses: function buttonClasses() {\n      // Same for radio & check\n      return ['btn', \"btn-\".concat(this.get_ButtonVariant), this.get_Size ? \"btn-\".concat(this.get_Size) : '', // 'disabled' class makes \"button\" look disabled\n      this.is_Disabled ? 'disabled' : '', // 'active' class makes \"button\" look pressed\n      this.is_Checked ? 'active' : '', // Focus class makes button look focused\n      this.hasFocus ? 'focus' : ''];\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.computedLocalChecked = newVal;\n    }\n  },\n  methods: {\n    handleFocus: function handleFocus(evt) {\n      // When in buttons mode, we need to add 'focus' class to label when input focused\n      // As it is the hidden input which has actual focus\n      if (evt.target) {\n        if (evt.type === 'focus') {\n          this.hasFocus = true;\n        } else if (evt.type === 'blur') {\n          this.hasFocus = false;\n        }\n      }\n    },\n    // Convenience methods for focusing the input\n    focus: function focus() {\n      if (!this.is_Disabled && this.$refs.input && this.$refs.input.focus) {\n        this.$refs.input.focus();\n      }\n    },\n    blur: function blur() {\n      if (!this.is_Disabled && this.$refs.input && this.$refs.input.blur) {\n        this.$refs.input.blur();\n      }\n    }\n  },\n  render: function render(h) {\n    var defaultSlot = this.$slots.default; // Generate the input element\n\n    var on = {\n      change: this.handleChange\n    };\n\n    if (this.is_BtnMode) {\n      // Handlers for focus styling when in button mode\n      on.focus = on.blur = this.handleFocus;\n    }\n\n    var input = h('input', {\n      ref: 'input',\n      key: 'input',\n      on: on,\n      class: {\n        'form-check-input': this.is_Plain,\n        'custom-control-input': this.is_Custom,\n        'is-valid': this.get_State === true && !this.is_BtnMode,\n        'is-invalid': this.get_State === false && !this.is_BtnMode,\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n        'position-static': this.is_Plain && !defaultSlot\n      },\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: this.computedLocalChecked,\n        expression: 'computedLocalChecked'\n      }],\n      attrs: {\n        id: this.safeId(),\n        type: this.is_Radio ? 'radio' : 'checkbox',\n        name: this.get_Name,\n        form: this.get_Form,\n        disabled: this.is_Disabled,\n        required: this.is_Required,\n        autocomplete: 'off',\n        'aria-required': this.is_Required || null,\n        'aria-label': this.ariaLabel || null,\n        'aria-labelledby': this.ariaLabelledby || null\n      },\n      domProps: {\n        value: this.value,\n        checked: this.is_Checked\n      }\n    });\n\n    if (this.is_BtnMode) {\n      // Button mode\n      var button = h('label', {\n        class: this.buttonClasses\n      }, [input, defaultSlot]);\n\n      if (!this.is_Group) {\n        // Standalone button mode, so wrap in 'btn-group-toggle'\n        // and flag it as inline-block to mimic regular buttons\n        button = h('div', {\n          class: ['btn-group-toggle', 'd-inline-block']\n        }, [button]);\n      }\n\n      return button;\n    } else {\n      // Not button mode\n      var label = h(false); // If no label content in plain mode we dont render the label\n      // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n\n      if (!(this.is_Plain && !defaultSlot)) {\n        label = h('label', {\n          class: {\n            'form-check-label': this.is_Plain,\n            'custom-control-label': this.is_Custom\n          },\n          attrs: {\n            for: this.safeId()\n          }\n        }, defaultSlot);\n      } // Wrap it in a div\n\n\n      return h('div', {\n        class: _defineProperty({\n          'form-check': this.is_Plain,\n          'form-check-inline': this.is_Plain && this.is_Inline,\n          'custom-control': this.is_Custom,\n          'custom-control-inline': this.is_Custom && this.is_Inline,\n          'custom-checkbox': this.is_Custom && this.is_Check && !this.is_Switch,\n          'custom-switch': this.is_Switch,\n          'custom-radio': this.is_Custom && this.is_Radio\n        }, \"form-control-\".concat(this.get_Size), Boolean(this.get_Size && !this.is_BtnMode))\n      }, [input, label]);\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}