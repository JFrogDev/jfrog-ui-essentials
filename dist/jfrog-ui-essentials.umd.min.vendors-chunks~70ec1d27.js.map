{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/directives/tooltip/index.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/directives/tooltip/tooltip.js"],"names":["exports","__esModule","default","_tooltip","_interopRequireDefault","__webpack_require__","_plugins","obj","directives","BTooltip","_default","install","installFactory","_popper","_warn","_env","_inspect","_object","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","BV_TOOLTIP","validTriggers","focus","hover","click","blur","parseBindings","bindings","config","isString","title","isFunction","isObject","arg","container","modifiers","mod","test","html","animation","placement","boundary","delay","parseInt","slice","offset","selectedTriggers","triggers","trigger","trim","split","join","applyTooltip","el","vnode","isBrowser","updateConfig","context","$root","removeTooltip","destroy","bind","inserted","update","oldValue","componentUpdated","unbind"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~70ec1d27.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _tooltip = _interopRequireDefault(require(\"./tooltip\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar directives = {\n  BTooltip: _tooltip.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    directives: directives\n  })\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _popper = _interopRequireDefault(require(\"popper.js\"));\n\nvar _tooltip = _interopRequireDefault(require(\"../../utils/tooltip.class\"));\n\nvar _warn = _interopRequireDefault(require(\"../../utils/warn\"));\n\nvar _env = require(\"../../utils/env\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _object = require(\"../../utils/object\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Key which we use to store tooltip object on element\nvar BV_TOOLTIP = '__BV_ToolTip__'; // Valid event triggers\n\nvar validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Build a ToolTip config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  /* istanbul ignore next: not easy to test */\n\n};\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a blank config\n  var config = {}; // Process bindings.value\n\n  if ((0, _inspect.isString)(bindings.value)) {\n    // Value is tooltip content (html optionally supported)\n    config.title = bindings.value;\n  } else if ((0, _inspect.isFunction)(bindings.value)) {\n    // Title generator function\n    config.title = bindings.value;\n  } else if ((0, _inspect.isObject)(bindings.value)) {\n    // Value is config object, so merge\n    config = _objectSpread({}, config, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {\n    if (/^html$/.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (/^nofade$/.test(mod)) {\n      // No animation\n      config.animation = false;\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n      // Placement of tooltip\n      config.placement = mod;\n    } else if (/^(window|viewport)$/.test(mod)) {\n      // Boundary of tooltip\n      config.boundary = mod;\n    } else if (/^d\\d+$/.test(mod)) {\n      // Delay value\n      var delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (/^o-?\\d+$/.test(mod)) {\n      // Offset value, negative allowed\n      var offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  var selectedTriggers = {}; // Parse current config object trigger\n\n  var triggers = (0, _inspect.isString)(config.trigger) ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(function (trigger) {\n    if (validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  (0, _object.keys)(validTriggers).forEach(function (trigger) {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = (0, _object.keys)(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to 'focus'\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update ToolTip on our element\n\n\nvar applyTooltip = function applyTooltip(el, bindings, vnode) {\n  if (!_env.isBrowser) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  if (!_popper.default) {\n    // Popper is required for ToolTips to work\n\n    /* istanbul ignore next */\n    (0, _warn.default)('v-b-tooltip: Popper.js is required for ToolTips to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].updateConfig(config);\n  } else {\n    el[BV_TOOLTIP] = new _tooltip.default(el, config, vnode.context.$root);\n  }\n}; // Remove ToolTip on our element\n\n\nvar removeTooltip = function removeTooltip(el) {\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].destroy();\n    el[BV_TOOLTIP] = null;\n    delete el[BV_TOOLTIP];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar _default = {\n  bind: function bind(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n  inserted: function inserted(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n  update: function update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n  componentUpdated: function componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n  unbind: function unbind(el) {\n    removeTooltip(el);\n  }\n};\nexports.default = _default;"],"sourceRoot":""}