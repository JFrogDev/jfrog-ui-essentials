{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/mixin-pagination.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/mixin-provider.js"],"names":["exports","__esModule","default","_default","props","perPage","type","Number","String","currentPage","computed","localPaging","this","hasProvider","noProviderPaging","paginatedItems","items","sortedItems","Math","max","parseInt","slice","_looseEqual","_interopRequireDefault","__webpack_require__","_warn","_inspect","_listenOnRoot","obj","mixins","Boolean","noProviderSorting","noProviderFiltering","apiUrl","Function","providerTriggerContext","ctx","filter","localFilter","sortBy","localSortBy","sortDesc","localSortDesc","watch","newVal","oldVal","$nextTick","_providerUpdate","mounted","_this","localItems","length","listenOnRoot","id","refresh","methods","$off","computedBusy","localBusy","$on","clearSelected","isArray","_providerSetLocal","$emit","emitOnRoot","_this2","data","context","then","isFunction","e","concat","name","message"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~7590b234.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _default = {\n  props: {\n    perPage: {\n      type: [Number, String],\n      default: 0\n    },\n    currentPage: {\n      type: [Number, String],\n      default: 1\n    }\n  },\n  computed: {\n    localPaging: function localPaging() {\n      return this.hasProvider ? !!this.noProviderPaging : true;\n    },\n    paginatedItems: function paginatedItems() {\n      var items = this.sortedItems || [];\n      var currentPage = Math.max(parseInt(this.currentPage, 10) || 1, 1);\n      var perPage = Math.max(parseInt(this.perPage, 10) || 0, 0); // Apply local pagination\n\n      if (this.localPaging && !!perPage) {\n        // Grab the current page of data (which may be past filtered items limit)\n        items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\n      } // Return the items to display in the table\n\n\n      return items;\n    }\n  }\n};\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _looseEqual = _interopRequireDefault(require(\"../../../utils/loose-equal\"));\n\nvar _warn = _interopRequireDefault(require(\"../../../utils/warn\"));\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _listenOnRoot = _interopRequireDefault(require(\"../../../mixins/listen-on-root\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = {\n  mixins: [_listenOnRoot.default],\n  props: {\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    apiUrl: {\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    hasProvider: function hasProvider() {\n      return this.items instanceof Function;\n    },\n    providerTriggerContext: function providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      var ctx = {\n        apiUrl: this.apiUrl\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return ctx;\n    }\n  },\n  watch: {\n    // Provider update triggering\n    items: function items(newVal, oldVal) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || newVal instanceof Function) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n    providerTriggerContext: function providerTriggerContext(newVal, oldVal) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!(0, _looseEqual.default)(newVal, oldVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Call the items provider if necessary\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot('bv::refresh::table', function (id) {\n      if (id === _this.id || id === _this) {\n        _this.refresh();\n      }\n    });\n  },\n  methods: {\n    refresh: function refresh() {\n      // Public Method: Force a refresh of the provider function\n      this.$off('refreshed', this.refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on('refreshed', this.refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = (0, _inspect.isArray)(this.items) ? this.items.slice() : [];\n        }\n      }\n    },\n    // Provider related methods\n    _providerSetLocal: function _providerSetLocal(items) {\n      this.localItems = (0, _inspect.isArray)(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit('refreshed'); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot('bv::table::refreshed', this.id);\n      }\n    },\n    _providerUpdate: function _providerUpdate() {\n      // Refresh the provider function items.\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        var _this2 = this;\n\n        try {\n          // Call provider function passing it the context and optional callback\n          var data = this.items(this.context, this._providerSetLocal);\n\n          if (data && data.then && (0, _inspect.isFunction)(data.then)) {\n            // Provider returned Promise\n            data.then(function (items) {\n              // Provider resolved with items\n              _this2._providerSetLocal(items);\n            });\n          } else if ((0, _inspect.isArray)(data)) {\n            // Provider returned Array data\n            this._providerSetLocal(data);\n          } else if (this.items.length !== 2) {\n            // Check number of arguments provider function requested\n            // Provider not using callback (didn't request second argument), so we clear\n            // busy state as most likely there was an error in the provider function\n\n            /* istanbul ignore next */\n            (0, _warn.default)(\"b-table provider function didn't request callback and did not return a promise or data\");\n            /* istanbul ignore next */\n\n            this.localBusy = false;\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          (0, _warn.default)(\"b-table provider function error [\".concat(e.name, \"] \").concat(e.message));\n          this.localBusy = false;\n          this.$off('refreshed', this.refresh);\n        }\n      });\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}