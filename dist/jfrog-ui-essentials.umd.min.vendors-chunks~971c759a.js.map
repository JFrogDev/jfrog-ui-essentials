{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/mixin-items.js"],"names":["exports","__esModule","default","_inspect","__webpack_require__","_normalizeFields","_interopRequireDefault","obj","_default2","props","items","type","Array","Function","fields","Object","primaryKey","String","data","localItems","isArray","this","slice","computed","computedFields","computedFieldsObj","reduce","f","key","watch","newItems","isUndefined","isNull"],"mappings":"uMAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAeC,EAAQ,QAEvBC,EAAAC,EAA8CF,EAAQ,SAEtD,SAAAE,EAAAC,GAAsC,OAAAA,KAAAN,WAAAM,EAAA,CAAuCL,QAAAK,GAE7E,IAAAC,EAAA,CACAC,MAAA,CACAC,MAAA,CACAC,KAAA,CAAAC,MAAAC,UACAX,QAAA,WAGA,WAGAY,OAAA,CAEAH,KAAA,CAAAC,MAAAG,QACAb,QAAA,MAEAc,WAAA,CAGAL,KAAAM,OACAf,QAAA,OAGAgB,KAAA,WACA,OAEAC,YAAA,EAAAhB,EAAAiB,SAAAC,KAAAX,OAAAW,KAAAX,MAAAY,QAAA,KAGAC,SAAA,CACAC,eAAA,WAGA,SAAAnB,EAAAH,SAAAmB,KAAAP,OAAAO,KAAAF,aAEAM,kBAAA,WAKA,OAAAJ,KAAAG,eAAAE,OAAA,SAAAC,EAAApB,GAEA,OADAA,EAAAoB,EAAAC,KAAAD,EACApB,GACO,MAGPsB,MAAA,CACAnB,MAAA,SAAAoB,IAEA,EAAA3B,EAAAiB,SAAAU,GAEAT,KAAAF,WAAAW,EAAAR,UACO,EAAAnB,EAAA4B,aAAAD,KAAA,EAAA3B,EAAA6B,QAAAF,MAEPT,KAAAF,WAAA,OAKAnB,EAAAE,QAAAM","file":"jfrog-ui-essentials.umd.min.vendors-chunks~971c759a.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _normalizeFields = _interopRequireDefault(require(\"./normalize-fields\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default2 = {\n  props: {\n    items: {\n      type: [Array, Function],\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    fields: {\n      // Object format is deprecated and should be avoided\n      type: [Array, Object],\n      default: null\n    },\n    primaryKey: {\n      // Primary key for record.\n      // If provided the value in each row must be unique!!!\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      // Our local copy of the items. Must be an array\n      localItems: (0, _inspect.isArray)(this.items) ? this.items.slice() : []\n    };\n  },\n  computed: {\n    computedFields: function computedFields() {\n      // We normalize fields into an array of objects\n      // [ { key:..., label:..., ...}, {...}, ..., {..}]\n      return (0, _normalizeFields.default)(this.fields, this.localItems);\n    },\n    computedFieldsObj: function computedFieldsObj()\n    /* istanbul ignore next: not using at the moment */\n    {\n      // Fields as a simple lookup hash object\n      // Mainly for scopedSlots for convenience\n      return this.computedFields.reduce(function (f, obj) {\n        obj[f.key] = f;\n        return obj;\n      }, {});\n    }\n  },\n  watch: {\n    items: function items(newItems) {\n      /* istanbul ignore else */\n      if ((0, _inspect.isArray)(newItems)) {\n        // Set localItems/filteredItems to a copy of the provided array\n        this.localItems = newItems.slice();\n      } else if ((0, _inspect.isUndefined)(newItems) || (0, _inspect.isNull)(newItems)) {\n        /* istanbul ignore next */\n        this.localItems = [];\n      }\n    }\n  }\n};\nexports.default = _default2;"],"sourceRoot":""}