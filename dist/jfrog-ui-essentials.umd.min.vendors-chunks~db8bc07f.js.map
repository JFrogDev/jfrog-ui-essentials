{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/table/helpers/mixin-filtering.js"],"names":["exports","__esModule","default","_looseEqual","_interopRequireDefault","__webpack_require__","_warn","_inspect","_stringifyRecordValues","obj","DEPRECATION_MSG","_default","props","filter","type","String","RegExp","Object","Array","Function","deprecation","filterFunction","data","isFiltered","computed","localFiltering","this","hasProvider","noProviderFiltering","filteredCheck","filteredItems","localItems","localFilter","isFunction","isString","isRegExp","localFilterFn","filterFn","concat","items","criteria","filterFnFactory","defaultFilterFnFactory","length","watch","_ref","$emit","newVal","oldVal","created","_this","$nextTick","Boolean","methods","fn","item","regexp","pattern","replace","lastIndex","test"],"mappings":"uMAEAA,EAAAC,YAAA,EACAD,EAAAE,aAAA,EAEA,IAAAC,EAAAC,EAAyCC,EAAQ,SAEjDC,EAAAF,EAAmCC,EAAQ,SAE3CE,EAAeF,EAAQ,QAEvBG,EAAAJ,EAAoDC,EAAQ,SAE5D,SAAAD,EAAAK,GAAsC,OAAAA,KAAAR,WAAAQ,EAAA,CAAuCP,QAAAO,GAE7E,IAAAC,EAAA,sFACAC,EAAA,CACAC,MAAA,CACAC,OAAA,CAEAC,KAAA,CAAAC,OAAAC,OAAAC,OAAAC,MAAAC,UACAjB,QAAA,KAGAkB,YAAAV,GAEAW,eAAA,CACAP,KAAAK,SACAjB,QAAA,OAGAoB,KAAA,WACA,OAEAC,YAAA,IAGAC,SAAA,CACAC,eAAA,WACA,OAAAC,KAAAC,eAAAD,KAAAE,qBAEAC,cAAA,WAEA,OACAC,cAAAJ,KAAAI,cACAC,WAAAL,KAAAK,WACAC,YAAAN,KAAAM,cAGAA,YAAA,WAEA,SAAAzB,EAAA0B,YAAAP,KAAAb,QAKA,IACO,EAAAN,EAAA0B,YAAAP,KAAAL,kBAAA,EAAAd,EAAA2B,UAAAR,KAAAb,UAAA,EAAAN,EAAA4B,UAAAT,KAAAb,QAKPa,KAAAb,OAHA,IAMAuB,cAAA,WACA,IAAAvB,EAAAa,KAAAb,OACAwB,EAAAX,KAAAL,eAEA,SAAAd,EAAA0B,YAAAI,GACAA,GACO,EAAA9B,EAAA0B,YAAApB,KAIP,EAAAP,EAAAJ,SAAA,YAAAoC,OAAA5B,IAGAG,GAGA,MAGAiB,cAAA,WAGA,IAAAS,EAAAb,KAAAK,YAAA,GACAS,EAAAd,KAAAM,YACAK,EAAAX,KAAAe,gBAAAf,KAAAU,cAAAI,IAAAd,KAAAgB,uBAAAF,GAOA,OAJAd,KAAAD,gBAAAY,GAAAE,EAAAI,OAAA,IACAJ,IAAA1B,OAAAwB,IAGAE,IAGAK,MAAA,CAGAf,cAAA,SAAAgB,GACA,IAIAtB,EAJAO,EAAAe,EAAAf,cAEAE,GADAa,EAAAd,WACAc,EAAAb,aASAT,IALAS,MAGO,EAAA7B,EAAAD,SAAA8B,EAAA,SAAA7B,EAAAD,SAAA8B,EAAA,OAGAA,GAQPT,GACAG,KAAAoB,MAAA,WAAAhB,IAAAa,QAGAjB,KAAAH,cAEAA,WAAA,SAAAwB,EAAAC,IACA,IAAAD,IAAA,IAAAC,GAGAtB,KAAAoB,MAAA,WAAApB,KAAAK,WAAAL,KAAAK,WAAAY,UAIAM,QAAA,WACA,IAAAC,EAAAxB,KAIAA,KAAAyB,UAAA,WACAD,EAAA3B,WAAA6B,QAAAF,EAAAlB,gBAGAqB,QAAA,CAEAZ,gBAAA,SAAAJ,EAAAG,GAOA,IAAAH,KAAA,EAAA9B,EAAA0B,YAAAI,KAAAG,IAAA,EAAArC,EAAAD,SAAAsC,EAAA,QAAArC,EAAAD,SAAAsC,EAAA,IACA,YAIA,IAAAc,EAAA,SAAAC,GAGA,OAAAlB,EAAAkB,EAAAf,IAIA,OAAAc,GAEAZ,uBAAA,SAAAF,GAEA,IAAAA,KAAA,EAAAjC,EAAA2B,UAAAM,MAAA,EAAAjC,EAAA4B,UAAAK,GAEA,YAIA,IAAAgB,EAAAhB,EAEA,MAAAjC,EAAA2B,UAAAsB,GAAA,CAGA,IAAAC,EAAAjB,EAAAkB,QAAA,yBAA2D,QAAAA,QAAA,2BAG3DF,EAAA,IAAAxC,OAAA,KAAAsB,OAAAmB,EAAA,WAIA,IAAAH,EAAA,SAAAC,GAgBA,OADAC,EAAAG,UAAA,EACAH,EAAAI,MAAA,EAAApD,EAAAN,SAAAqD,KAIA,OAAAD,KAIAtD,EAAAE,QAAAS","file":"jfrog-ui-essentials.umd.min.vendors-chunks~db8bc07f.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _looseEqual = _interopRequireDefault(require(\"../../../utils/loose-equal\"));\n\nvar _warn = _interopRequireDefault(require(\"../../../utils/warn\"));\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _stringifyRecordValues = _interopRequireDefault(require(\"./stringify-record-values\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEPRECATION_MSG = 'Supplying a function to prop \"filter\" is deprecated. Use \"filter-function\" instead.';\nvar _default = {\n  props: {\n    filter: {\n      // Passing a function to filter is deprecated and should be avoided\n      type: [String, RegExp, Object, Array, Function],\n      default: null,\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecation: DEPRECATION_MSG\n    },\n    filterFunction: {\n      type: Function,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      // Flag for displaying which empty slot to show, and for some event triggering.\n      isFiltered: false\n    };\n  },\n  computed: {\n    localFiltering: function localFiltering() {\n      return this.hasProvider ? !!this.noProviderFiltering : true;\n    },\n    filteredCheck: function filteredCheck() {\n      // For watching changes to filteredItems vs localItems\n      return {\n        filteredItems: this.filteredItems,\n        localItems: this.localItems,\n        localFilter: this.localFilter\n      };\n    },\n    localFilter: function localFilter() {\n      // Returns a sanitized/normalized version of filter prop\n      if ((0, _inspect.isFunction)(this.filter)) {\n        // this.localFilterFn will contain the correct function ref.\n        // Deprecate setting prop filter to a function\n\n        /* istanbul ignore next */\n        return '';\n      } else if (!(0, _inspect.isFunction)(this.filterFunction) && !((0, _inspect.isString)(this.filter) || (0, _inspect.isRegExp)(this.filter))) {\n        // Using internal filter function, which only accepts string or regexp at the moment\n        return '';\n      } else {\n        // Could be a string, object or array, as needed by external filter function\n        return this.filter;\n      }\n    },\n    localFilterFn: function localFilterFn() {\n      var filter = this.filter;\n      var filterFn = this.filterFunction; // Sanitized/normalize filter-function prop\n\n      if ((0, _inspect.isFunction)(filterFn)) {\n        return filterFn;\n      } else if ((0, _inspect.isFunction)(filter)) {\n        // Deprecate setting prop filter to a function\n\n        /* istanbul ignore next */\n        (0, _warn.default)(\"b-table: \".concat(DEPRECATION_MSG));\n        /* istanbul ignore next */\n\n        return filter;\n      } else {\n        // no filterFunction, so signal to use internal filter function\n        return null;\n      }\n    },\n    filteredItems: function filteredItems() {\n      // Returns the records in localItems that match the filter criteria.\n      // Returns the original localItems array if not sorting\n      var items = this.localItems || [];\n      var criteria = this.localFilter;\n      var filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria); // We only do local filtering if requested, and if the are records to filter and\n      // if a filter criteria was specified\n\n      if (this.localFiltering && filterFn && items.length > 0) {\n        items = items.filter(filterFn);\n      }\n\n      return items;\n    }\n  },\n  watch: {\n    // Watch for changes to the filter criteria and filtered items vs localItems).\n    // And set visual state and emit events as required\n    filteredCheck: function filteredCheck(_ref) {\n      var filteredItems = _ref.filteredItems,\n          localItems = _ref.localItems,\n          localFilter = _ref.localFilter;\n      // Determine if the dataset is filtered or not\n      var isFiltered;\n\n      if (!localFilter) {\n        // If filter criteria is falsey\n        isFiltered = false;\n      } else if ((0, _looseEqual.default)(localFilter, []) || (0, _looseEqual.default)(localFilter, {})) {\n        // If filter criteria is an empty array or object\n        isFiltered = false;\n      } else if (localFilter) {\n        // if Filter criteria is truthy\n        isFiltered = true;\n      } else {\n        /* istanbul ignore next: rare chance of reaching this else */\n        isFiltered = false;\n      }\n\n      if (isFiltered) {\n        this.$emit('filtered', filteredItems, filteredItems.length);\n      }\n\n      this.isFiltered = isFiltered;\n    },\n    isFiltered: function isFiltered(newVal, oldVal) {\n      if (newVal === false && oldVal === true) {\n        // We need to emit a filtered event if isFiltered transitions from true to\n        // false so that users can update their pagination controls.\n        this.$emit('filtered', this.localItems, this.localItems.length);\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set the initial filtered state.\n    // In a nextTick so that we trigger a filtered event if needed\n    this.$nextTick(function () {\n      _this.isFiltered = Boolean(_this.localFilter);\n    });\n  },\n  methods: {\n    // Filter Function factories\n    filterFnFactory: function filterFnFactory(filterFn, criteria) {\n      // Wrapper factory for external filter functions.\n      // Wrap the provided filter-function and return a new function.\n      // Returns null if no filter-function defined or if criteria is falsey.\n      // Rather than directly grabbing this.computedLocalFilterFn or this.filterFunction\n      // we have it passed, so that the caller computed prop will be reactive to changes\n      // in the original filter-function (as this routine is a method)\n      if (!filterFn || !(0, _inspect.isFunction)(filterFn) || !criteria || (0, _looseEqual.default)(criteria, []) || (0, _looseEqual.default)(criteria, {})) {\n        return null;\n      } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n      var fn = function fn(item) {\n        // Generated function returns true if the criteria matches part\n        // of the serialized data, otherwise false\n        return filterFn(item, criteria);\n      }; // Return the wrapped function\n\n\n      return fn;\n    },\n    defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {\n      // Generates the default filter function, using the given filter criteria\n      if (!criteria || !((0, _inspect.isString)(criteria) || (0, _inspect.isRegExp)(criteria))) {\n        // Built in filter can only support strings or RegExp criteria (at the moment)\n        return null;\n      } // Build the regexp needed for filtering\n\n\n      var regexp = criteria;\n\n      if ((0, _inspect.isString)(regexp)) {\n        // Escape special RegExp characters in the string and convert contiguous\n        // whitespace to \\s+ matches\n        var pattern = criteria.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/[\\s\\uFEFF\\xA0]+/g, '\\\\s+'); // Build the RegExp (no need for global flag, as we only need\n        // to find the value once in the string)\n\n        regexp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n      } // Generate the wrapped filter test function to use\n\n\n      var fn = function fn(item) {\n        // This searches all row values (and sub property values) in the entire (excluding\n        // special _ prefixed keys), because we convert the record to a space-separated\n        // string containing all the value properties (recursively), even ones that are\n        // not visible (not specified in this.fields).\n        //\n        // TODO: Enable searching on formatted fields and scoped slots\n        // TODO: Should we filter only on visible fields (i.e. ones in this.fields) by default?\n        // TODO: Allow for searching on specific fields/key, this could be combined with the previous TODO\n        // TODO: Give stringifyRecordValues extra options for filtering (i.e. passing the\n        //       fields definition and a reference to $scopedSlots)\n        //\n        // Generated function returns true if the criteria matches part of\n        // the serialized data, otherwise false\n        // We set lastIndex = 0 on regex in case someone uses the /g global flag\n        regexp.lastIndex = 0;\n        return regexp.test((0, _stringifyRecordValues.default)(item));\n      }; // Return the generated function\n\n\n      return fn;\n    }\n  }\n};\nexports.default = _default;"],"sourceRoot":""}