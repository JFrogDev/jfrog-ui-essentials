{"version":3,"sources":["webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/form-textarea/form-textarea.js","webpack://jfrog-ui-essentials/./node_modules/bootstrap-vue/es/components/form-textarea/index.js"],"names":["exports","__esModule","default","_vue","_interopRequireDefault","__webpack_require__","_id","_form","_formSize","_formState","_formText","_formSelection","_formValidity","_dom","_inspect","obj","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","value","defineProperty","configurable","writable","_default","extend","name","mixins","props","rows","type","Number","String","maxRows","wrap","noResize","Boolean","noAutoShrink","data","dontResize","heightInPx","computed","computedStyle","styles","resize","this","computedRows","height","overflowY","computedMinRows","Math","max","parseInt","computedMaxRows","watch","newVal","oldval","setHeight","localValue","oldVal","mounted","_this","$nextTick","activated","_this2","deactivated","beforeDestroy","methods","_this3","computeHeight","$isServer","isNull","el","$el","isVisible","getCS","lineHeight","parseFloat","border","borderTopWidth","borderBottomWidth","padding","paddingTop","paddingBottom","offset","minHeight","oldHeight","style","scrollHeight","contentRows","min","ceil","render","h","self","ref","class","computedClass","directives","rawName","expression","attrs","id","safeId","form","disabled","placeholder","required","autocomplete","readonly","plaintext","aria-required","aria-invalid","computedAriaInvalid","domProps","on","$listeners","input","onInput","change","onChange","blur","onBlur","_formTextarea","_plugins","components","BFormTextarea","BTextarea","install","installFactory"],"mappings":"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","file":"jfrog-ui-essentials.umd.min.vendors-chunks~1abe5aa7.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _vue = _interopRequireDefault(require(\"../../utils/vue\"));\n\nvar _id = _interopRequireDefault(require(\"../../mixins/id\"));\n\nvar _form = _interopRequireDefault(require(\"../../mixins/form\"));\n\nvar _formSize = _interopRequireDefault(require(\"../../mixins/form-size\"));\n\nvar _formState = _interopRequireDefault(require(\"../../mixins/form-state\"));\n\nvar _formText = _interopRequireDefault(require(\"../../mixins/form-text\"));\n\nvar _formSelection = _interopRequireDefault(require(\"../../mixins/form-selection\"));\n\nvar _formValidity = _interopRequireDefault(require(\"../../mixins/form-validity\"));\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @vue/component\nvar _default = _vue.default.extend({\n  name: 'BFormTextarea',\n  mixins: [_id.default, _form.default, _formSize.default, _formState.default, _formText.default, _formSelection.default, _formValidity.default],\n  props: {\n    rows: {\n      type: [Number, String],\n      default: 2\n    },\n    maxRows: {\n      type: [Number, String],\n      default: null\n    },\n    wrap: {\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\n      type: String,\n      default: 'soft'\n    },\n    noResize: {\n      // Disable the resize handle of textarea\n      type: Boolean,\n      default: false\n    },\n    noAutoShrink: {\n      // When in auto resize mode, disable shrinking to content height\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      dontResize: true,\n      heightInPx: null\n    };\n  },\n  computed: {\n    computedStyle: function computedStyle() {\n      var styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto resize mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // The computed height for auto resize.\n        // We avoid setting the style to null, which can override user manual resize.\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-resize is\n        // enabled so that the computed height calcaultion returns a stable value.\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n    computedMinRows: function computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value).\n      // A value of 1 can cause issues in some browsers, and most browsers only support\n      // 2 as the smallest value.\n      return Math.max(parseInt(this.rows, 10) || 2, 2);\n    },\n    computedMaxRows: function computedMaxRows() {\n      return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n    },\n    computedRows: function computedRows() {\n      // This is used to set the attribute 'rows' on the textarea.\n      // If auto-resize is enabled, then we return null as we use CSS to control height.\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    }\n  },\n  watch: {\n    dontResize: function dontResize(newVal, oldval) {\n      if (!newVal) {\n        this.setHeight();\n      }\n    },\n    localValue: function localValue(newVal, oldVal) {\n      this.setHeight();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Enable opt-in resizing once mounted\n    this.$nextTick(function () {\n      _this.dontResize = false;\n    });\n  },\n  activated: function activated() {\n    var _this2 = this;\n\n    // If we are being re-activated in <keep-alive>, enable opt-in resizing\n    this.$nextTick(function () {\n      _this2.dontResize = false;\n    });\n  },\n  deactivated: function deactivated() {\n    // If we are in a deactivated <keep-alive>, disable opt-in resizing\n    this.dontResize = true;\n  },\n  beforeDestroy: function beforeDestroy() {\n    /* istanbul ignore next */\n    this.dontResize = true;\n  },\n  methods: {\n    setHeight: function setHeight() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.heightInPx = _this3.computeHeight();\n      });\n    },\n    computeHeight: function computeHeight()\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    {\n      if (this.$isServer || !(0, _inspect.isNull)(this.computedRows)) {\n        return null;\n      }\n\n      var el = this.$el; // Element must be visible (not hidden) and in document.\n      // Must be checked after above checks\n\n      if (!(0, _dom.isVisible)(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      var computedStyle = (0, _dom.getCS)(el); // Height of one line of text in px\n\n      var lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n      var border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n      var padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n      var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      var oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      el.style.height = 'auto';\n      var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case this computedProp\n      // returns the same value as before.\n\n      el.style.height = oldHeight; // Calculate content height in \"rows\" (scrollHeight includes padding but not border)\n\n      var contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of oldHeight and new height,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n  },\n  render: function render(h) {\n    // Using self instead of this helps reduce code size during minification\n    var self = this;\n    return h('textarea', {\n      ref: 'input',\n      class: self.computedClass,\n      style: self.computedStyle,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        rows: self.computedRows,\n        wrap: self.wrap || null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: _objectSpread({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n});\n\nexports.default = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _formTextarea = _interopRequireDefault(require(\"./form-textarea\"));\n\nvar _plugins = require(\"../../utils/plugins\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar components = {\n  BFormTextarea: _formTextarea.default,\n  BTextarea: _formTextarea.default\n};\nvar _default = {\n  install: (0, _plugins.installFactory)({\n    components: components\n  })\n};\nexports.default = _default;"],"sourceRoot":""}